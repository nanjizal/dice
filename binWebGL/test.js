// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["hxGeomAlgo"] = $hx_exports["hxGeomAlgo"] || {};
$hx_exports["hxGeomAlgo"]["_HxPoint"] = $hx_exports["hxGeomAlgo"]["_HxPoint"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var dice_Dice = function() {
	this.end = 0;
	this.start = 0;
	this.viewGL = new dice_helpers_ViewGL();
	new htmlHelper_tools_DivertTrace();
	this.instructions();
	this.layoutPos = new dice_helpers_LayoutPos(600);
	this.pen = this.viewGL.pen;
	var gridLines = new dice_helpers_GridLines(this.pen,600);
	gridLines.draw(10,60226304,-258540557);
	var tmp = this.viewGL;
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-0.2);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	tmp.transform(this4);
	var die = new dice_view_Die(this.viewGL.pen);
	var startEnd = die.create(this.layoutPos.centre.x,this.layoutPos.centre.y);
	this.start = startEnd.start;
	this.end = startEnd.end;
	this.viewGL.update = $bind(this,this.update);
	this.viewGL.uploadVectors();
	var _this = this.viewGL;
	if(htmlHelper_tools_AnimateTimer.s == null) {
		htmlHelper_tools_AnimateTimer.s = window.document.createElement("style");
		htmlHelper_tools_AnimateTimer.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
		window.document.getElementsByTagName("head")[0].appendChild(htmlHelper_tools_AnimateTimer.s);
		htmlHelper_tools_AnimateTimer.s.animation = "spin 1s linear infinite";
		htmlHelper_tools_AnimateTimer.loop(60.0);
	}
	htmlHelper_tools_AnimateTimer.onFrame = $bind(_this,_this.render_);
};
dice_Dice.__name__ = true;
dice_Dice.main = function() {
	new dice_Dice();
};
dice_Dice.prototype = {
	update: function() {
		var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
		var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
		var this3 = new geom_structure_DualQ(this1,this2);
		var model = this3;
		model = this.viewGL.itemModel.updateCalculate(model);
		var a = model.real;
		var b = model.real;
		var mag = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
		var q;
		if(mag < 0) {
			q = null;
		} else {
			var oneOver = 1 / mag;
			var a1 = model.real;
			var this4 = new geom_structure_Mat1x4(a1.x * oneOver,a1.y * oneOver,a1.z * oneOver,a1.w * oneOver);
			var a2 = model.dual;
			var this5 = new geom_structure_Mat1x4(a2.x * oneOver,a2.y * oneOver,a2.z * oneOver,a2.w * oneOver);
			var this6 = new geom_structure_DualQ(this4,this5);
			q = this6;
		}
		var this7 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var m = this7;
		var w = q.real.w;
		var x = q.real.x;
		var y = q.real.y;
		var z = q.real.z;
		m.a = w * w + x * x - y * y - z * z;
		m.e = 2 * x * y + 2 * w * z;
		m.i = 2 * x * z - 2 * w * y;
		m.b = 2 * x * y - 2 * w * z;
		m.f = w * w + y * y - x * x - z * z;
		m.j = 2 * y * z + 2 * w * x;
		m.c = 2 * x * z + 2 * w * y;
		m.g = 2 * y * z - 2 * w * x;
		m.k = w * w + z * z - x * x - y * y;
		var a3 = q.dual;
		var this8 = new geom_structure_Mat1x4(a3.x * 2.,a3.y * 2.,a3.z * 2.,a3.w * 2.);
		var q1 = this8;
		var a4 = q.real;
		var this9 = new geom_structure_Mat1x4(-a4.x,-a4.y,-a4.z,a4.w);
		var q2 = this9;
		var this10 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
		q1 = this10;
		var this11 = new geom_structure_Mat1x4(q1.x,q1.y,q1.z,1.);
		var t = this11;
		m.d = t.x;
		m.h = t.y;
		m.l = t.z;
		var trans = m;
		this.viewGL.transformRange(trans,this.start,this.end);
		this.viewGL.uploadVectors();
	}
	,instructions: function() {
		haxe_Log.trace("use keys to transform",{ fileName : "src/dice/Dice.hx", lineNumber : 91, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("to swap between disc and scene: a",{ fileName : "src/dice/Dice.hx", lineNumber : 92, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("rotate: arrow keys",{ fileName : "src/dice/Dice.hx", lineNumber : 93, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("zoom: delete/return",{ fileName : "src/dice/Dice.hx", lineNumber : 94, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("translate up/down: tab/shift",{ fileName : "src/dice/Dice.hx", lineNumber : 95, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("translate left/right: ctrl/space",{ fileName : "src/dice/Dice.hx", lineNumber : 96, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("spin: alt/cmd",{ fileName : "src/dice/Dice.hx", lineNumber : 97, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("reset scene position: r",{ fileName : "src/dice/Dice.hx", lineNumber : 98, className : "dice.Dice", methodName : "instructions"});
	}
};
var dice_helpers_AxisKeys = function(axisModel_,itemModel_) {
	this.sceneTransform = true;
	this.showTrace = false;
	this.axisModel = axisModel_;
	this.sceneModel = axisModel_;
	this.itemModel = itemModel_;
	this.characterInput = new htmlHelper_tools_CharacterInput();
	this.characterInput.commandSignal = $bind(this,this.commandDown);
	this.characterInput.navSignal = $bind(this,this.navDown);
	this.characterInput.letterSignal = $bind(this,this.letterDown);
};
dice_helpers_AxisKeys.__name__ = true;
dice_helpers_AxisKeys.prototype = {
	commandDown: function() {
		if(this.characterInput.cmdDown) {
			var v = 1.;
			var _this = this.axisModel.rz;
			_this.trinary.set_trit(v);
			if(_this.trinary.changed) {
				if(v == 0.) {
					_this.value = 0.;
				} else {
					var f = v;
					_this.value = -f * _this.step;
				}
			}
		} else if(this.characterInput.altDown) {
			var v1 = -1.;
			var _this1 = this.axisModel.rz;
			_this1.trinary.set_trit(v1);
			if(_this1.trinary.changed) {
				if(v1 == 0.) {
					_this1.value = 0.;
				} else {
					var f1 = v1;
					_this1.value = -f1 * _this1.step;
				}
			}
		} else {
			var v2 = 0.;
			var _this2 = this.axisModel.rz;
			_this2.trinary.set_trit(v2);
			if(_this2.trinary.changed) {
				if(v2 == 0.) {
					_this2.value = 0.;
				} else {
					var f2 = v2;
					_this2.value = -f2 * _this2.step;
				}
			}
		}
		if(this.characterInput.tabDown) {
			var v3 = -1.;
			var _this3 = this.axisModel.ty;
			_this3.trinary.set_trit(v3);
			if(_this3.trinary.changed) {
				if(v3 == 0.) {
					_this3.value = 0.;
				} else {
					var f3 = v3;
					_this3.value = -f3 * _this3.step;
				}
			}
		} else if(this.characterInput.shiftDown) {
			var v4 = 1.;
			var _this4 = this.axisModel.ty;
			_this4.trinary.set_trit(v4);
			if(_this4.trinary.changed) {
				if(v4 == 0.) {
					_this4.value = 0.;
				} else {
					var f4 = v4;
					_this4.value = -f4 * _this4.step;
				}
			}
		} else {
			var v5 = 0.;
			var _this5 = this.axisModel.ty;
			_this5.trinary.set_trit(v5);
			if(_this5.trinary.changed) {
				if(v5 == 0.) {
					_this5.value = 0.;
				} else {
					var f5 = v5;
					_this5.value = -f5 * _this5.step;
				}
			}
		}
		if(this.characterInput.spaceDown) {
			var v6 = -1.;
			var _this6 = this.axisModel.tx;
			_this6.trinary.set_trit(v6);
			if(_this6.trinary.changed) {
				if(v6 == 0.) {
					_this6.value = 0.;
				} else {
					var f6 = v6;
					_this6.value = -f6 * _this6.step;
				}
			}
		} else if(this.characterInput.controlDown) {
			var v7 = 1.;
			var _this7 = this.axisModel.tx;
			_this7.trinary.set_trit(v7);
			if(_this7.trinary.changed) {
				if(v7 == 0.) {
					_this7.value = 0.;
				} else {
					var f7 = v7;
					_this7.value = -f7 * _this7.step;
				}
			}
		} else {
			var v8 = 0.;
			var _this8 = this.axisModel.tx;
			_this8.trinary.set_trit(v8);
			if(_this8.trinary.changed) {
				if(v8 == 0.) {
					_this8.value = 0.;
				} else {
					var f8 = v8;
					_this8.value = -f8 * _this8.step;
				}
			}
		}
		if(this.characterInput.deleteDown) {
			var v9 = -1.;
			var _this9 = this.axisModel.tz;
			_this9.trinary.set_trit(v9);
			if(_this9.trinary.changed) {
				if(v9 == 0.) {
					_this9.value = 0.;
				} else {
					var f9 = v9;
					_this9.value = -f9 * _this9.step;
				}
			}
		} else if(this.characterInput.enterDown) {
			var v10 = 1.;
			var _this10 = this.axisModel.tz;
			_this10.trinary.set_trit(v10);
			if(_this10.trinary.changed) {
				if(v10 == 0.) {
					_this10.value = 0.;
				} else {
					var f10 = v10;
					_this10.value = -f10 * _this10.step;
				}
			}
		} else {
			var v11 = 0.;
			var _this11 = this.axisModel.tz;
			_this11.trinary.set_trit(v11);
			if(_this11.trinary.changed) {
				if(v11 == 0.) {
					_this11.value = 0.;
				} else {
					var f11 = v11;
					_this11.value = -f11 * _this11.step;
				}
			}
		}
		if(this.showTrace) {
			haxe_Log.trace(this.characterInput.commandDown(),{ fileName : "src/dice/helpers/AxisKeys.hx", lineNumber : 46, className : "dice.helpers.AxisKeys", methodName : "commandDown"});
		}
	}
	,navDown: function() {
		if(this.showTrace) {
			haxe_Log.trace(this.characterInput.navDown(),{ fileName : "src/dice/helpers/AxisKeys.hx", lineNumber : 50, className : "dice.helpers.AxisKeys", methodName : "navDown"});
		}
		if(this.characterInput.leftDown) {
			var v = -1.;
			var _this = this.axisModel.ry;
			_this.trinary.set_trit(v);
			if(_this.trinary.changed) {
				if(v == 0.) {
					_this.value = 0.;
				} else {
					var f = v;
					_this.value = -f * _this.step;
				}
			}
		} else if(this.characterInput.rightDown) {
			var v1 = 1.;
			var _this1 = this.axisModel.ry;
			_this1.trinary.set_trit(v1);
			if(_this1.trinary.changed) {
				if(v1 == 0.) {
					_this1.value = 0.;
				} else {
					var f1 = v1;
					_this1.value = -f1 * _this1.step;
				}
			}
		} else {
			var v2 = 0.;
			var _this2 = this.axisModel.ry;
			_this2.trinary.set_trit(v2);
			if(_this2.trinary.changed) {
				if(v2 == 0.) {
					_this2.value = 0.;
				} else {
					var f2 = v2;
					_this2.value = -f2 * _this2.step;
				}
			}
		}
		if(this.characterInput.upDown) {
			var v3 = -1.;
			var _this3 = this.axisModel.rx;
			_this3.trinary.set_trit(v3);
			if(_this3.trinary.changed) {
				if(v3 == 0.) {
					_this3.value = 0.;
				} else {
					var f3 = v3;
					_this3.value = -f3 * _this3.step;
				}
			}
		} else if(this.characterInput.downDown) {
			var v4 = 1.;
			var _this4 = this.axisModel.rx;
			_this4.trinary.set_trit(v4);
			if(_this4.trinary.changed) {
				if(v4 == 0.) {
					_this4.value = 0.;
				} else {
					var f4 = v4;
					_this4.value = -f4 * _this4.step;
				}
			}
		} else {
			var v5 = 0.;
			var _this5 = this.axisModel.rx;
			_this5.trinary.set_trit(v5);
			if(_this5.trinary.changed) {
				if(v5 == 0.) {
					_this5.value = 0.;
				} else {
					var f5 = v5;
					_this5.value = -f5 * _this5.step;
				}
			}
		}
	}
	,letterDown: function(letter) {
		if(letter == "r" || letter == "p") {
			var _this = this.axisModel;
			_this.rx.value = 0.;
			_this.ry.value = 0.;
			_this.rz.value = 0.;
			_this.tx.value = 0.;
			_this.ty.value = 0.;
			_this.tz.value = 0.;
			if(this.showTrace) {
				haxe_Log.trace("reset",{ fileName : "src/dice/helpers/AxisKeys.hx", lineNumber : 64, className : "dice.helpers.AxisKeys", methodName : "letterDown"});
			}
			if(this.reset != null) {
				this.reset();
			}
		}
		if(letter == "a") {
			this.swapAxisModel();
		}
	}
	,swapAxisModel: function() {
		this.sceneTransform = !this.sceneTransform;
		if(this.sceneTransform) {
			this.axisModel = this.sceneModel;
		} else {
			this.axisModel = this.itemModel;
		}
	}
};
var dice_helpers_GridLines = function(pen,stageRadius) {
	this.pen = pen;
	this.stageRadius = stageRadius;
};
dice_helpers_GridLines.__name__ = true;
dice_helpers_GridLines.prototype = {
	draw: function(spacing,colorA,colorB) {
		var gap = 15;
		var len = Math.ceil((this.stageRadius * 2 - 2 * gap) / spacing);
		this.pen.currentColor = colorB;
		var sketch = new trilateral2_Sketch(this.pen,trilateral2_SketchForm.Crude,3);
		sketch.width = spacing / 4;
		var delta = 0.;
		sketch.moveTo(0,0);
		var _g = 1;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var delta1 = i * spacing;
			if(i % 10 == 0) {
				this.pen.currentColor = colorA;
			} else {
				this.pen.currentColor = colorB;
			}
			sketch.moveTo(gap,delta1 + gap);
			var x_ = this.stageRadius * 2 - gap;
			var y_ = delta1 + gap;
			var repeat = sketch.x == x_ && sketch.y == y_;
			if(!repeat) {
				if(sketch.widthFunction != null) {
					sketch.width = sketch.widthFunction(sketch.width,sketch.x,sketch.y,x_,y_);
				}
				if(sketch.colourFunction != null) {
					sketch.pen.currentColor = sketch.colourFunction(sketch.pen.currentColor,sketch.x,sketch.y,x_,y_);
				}
				sketch.line(x_,y_);
				var l = sketch.points.length;
				var p = sketch.points[l - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = sketch.dim[sketch.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				sketch.x = x_;
				sketch.y = y_;
			}
			sketch.moveTo(delta1 + gap,gap);
			var x_1 = delta1 + gap;
			var y_1 = this.stageRadius * 2 - gap;
			var repeat1 = sketch.x == x_1 && sketch.y == y_1;
			if(!repeat1) {
				if(sketch.widthFunction != null) {
					sketch.width = sketch.widthFunction(sketch.width,sketch.x,sketch.y,x_1,y_1);
				}
				if(sketch.colourFunction != null) {
					sketch.pen.currentColor = sketch.colourFunction(sketch.pen.currentColor,sketch.x,sketch.y,x_1,y_1);
				}
				sketch.line(x_1,y_1);
				var l1 = sketch.points.length;
				var p1 = sketch.points[l1 - 1];
				var l21 = p1.length;
				p1[l21] = x_1;
				p1[l21 + 1] = y_1;
				var d1 = sketch.dim[sketch.dim.length - 1];
				if(x_1 < d1.minX) {
					d1.minX = x_1;
				}
				if(x_1 > d1.maxX) {
					d1.maxX = x_1;
				}
				if(y_1 < d1.minY) {
					d1.minY = y_1;
				}
				if(y_1 > d1.maxY) {
					d1.maxY = y_1;
				}
				sketch.x = x_1;
				sketch.y = y_1;
			}
		}
	}
};
var dice_helpers_LayoutPos = function(stageRadius_) {
	this.stageRadius = stageRadius_;
	this.centre = new geom_structure_Mat1x2(this.stageRadius,this.stageRadius);
	this.quarter = this.stageRadius / 2;
	this.bottomLeft = new geom_structure_Mat1x2(this.stageRadius - this.quarter,this.stageRadius + this.quarter);
	this.bottomRight = new geom_structure_Mat1x2(this.stageRadius + this.quarter,this.stageRadius + this.quarter);
	this.topLeft = new geom_structure_Mat1x2(this.stageRadius - this.quarter,this.stageRadius - this.quarter);
	this.topRight = new geom_structure_Mat1x2(this.stageRadius + this.quarter,this.stageRadius - this.quarter);
};
dice_helpers_LayoutPos.__name__ = true;
var htmlHelper_webgl_WebGLSetup = function(width_,height_,autoChild) {
	if(autoChild == null) {
		autoChild = true;
	}
	this.colors = new Float32Array(100);
	this.indices = new Uint16Array(100);
	this.vertices = new Float32Array(100);
	this.BACK = true;
	this.CULL_FACE = true;
	this.DEPTH_TEST = true;
	this.bgAlpha = 1.;
	this.bgBlue = 1.;
	this.bgGreen = 1.;
	this.bgRed = 1.;
	haxe_Log.trace("dev htmlHelper",{ fileName : "htmlHelper/webgl/WebGLSetup.hx", lineNumber : 97, className : "htmlHelper.webgl.WebGLSetup", methodName : "new"});
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = 1.0;
	arr[1] = 0.0;
	arr[2] = 0.0;
	arr[3] = 0.0;
	arr[4] = 1.0;
	arr[5] = 0.0;
	arr[6] = 0.0;
	arr[7] = 0.0;
	arr[8] = 1.0;
	arr[9] = 0.0;
	arr[10] = 0.0;
	arr[11] = 0.0;
	arr[12] = 1.0;
	arr[13] = 0.0;
	arr[14] = 0.0;
	arr[15] = 0.0;
	this.matrix32Array = arr;
	this.setupCanvas(width_,height_,autoChild);
};
htmlHelper_webgl_WebGLSetup.__name__ = true;
htmlHelper_webgl_WebGLSetup.prototype = {
	setupCanvas: function(width_,height_,autoChild) {
		if(autoChild == null) {
			autoChild = true;
		}
		this.width = width_;
		this.height = height_;
		this.canvas = window.document.createElement("canvas");
		this.canvas.width = this.width;
		this.canvas.height = this.height;
		var dom = this.canvas;
		var style = dom.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = Std.string(0 + "px");
		style.top = Std.string(0 + "px");
		style.position = "absolute";
		if(autoChild) {
			window.document.body.appendChild(this.canvas);
		}
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
	}
	,setupProgram: function(vertexString,fragmentString) {
		var gl = this.gl;
		var shader = gl.createShader(35633);
		gl.shaderSource(shader,vertexString);
		gl.compileShader(shader);
		var vertex = shader;
		var gl1 = this.gl;
		var shader1 = gl1.createShader(35632);
		gl1.shaderSource(shader1,fragmentString);
		gl1.compileShader(shader1);
		var fragment = shader1;
		var gl2 = this.gl;
		var program = gl2.createProgram();
		gl2.attachShader(program,vertex);
		gl2.attachShader(program,fragment);
		gl2.linkProgram(program);
		gl2.useProgram(program);
		this.program = program;
		return this.program;
	}
	,render: function() {
		this.gl.clearColor(this.bgRed,this.bgGreen,this.bgBlue,this.bgAlpha);
		if(this.DEPTH_TEST) {
			this.gl.enable(2929);
		}
		if(this.CULL_FACE) {
			this.gl.enable(2884);
		}
		if(this.BACK) {
			this.gl.cullFace(1029);
		}
		this.gl.clear(16384);
		this.gl.viewport(0,0,this.canvas.width,this.canvas.height);
		var modelViewProjectionID = this.gl.getUniformLocation(this.program,"modelViewProjection");
		this.gl.uniformMatrix4fv(modelViewProjectionID,false,this.matrix32Array);
		this.gl.drawArrays(4,0,this.indices.length);
	}
};
var dice_helpers_ViewGL = function() {
	var qReal = new geom_structure_Mat1x4(0.,0.,Math.sin(0.),Math.cos(0.));
	var qDual = new geom_structure_Mat1x4(0.,0.,-1.,1.);
	var currentLength = Math.sqrt(qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		qReal.x *= mul;
		qReal.y *= mul;
		qReal.z *= mul;
		qReal.w *= mul;
	}
	var real = qReal;
	var q = new geom_structure_Mat1x4(qDual.x,qDual.y,qDual.z,0.);
	q = new geom_structure_Mat1x4(q.x * 0.5,q.y * 0.5,q.z * 0.5,q.w * 0.5);
	this.offset = new geom_structure_DualQ(real,new geom_structure_Mat1x4(q.x * real.w + q.y * real.z - q.z * real.y + q.w * real.x,-q.x * real.z + q.y * real.w + q.z * real.x + q.w * real.y,q.x * real.y - q.y * real.x + q.z * real.w + q.w * real.z,-q.x * real.x - q.y * real.y - q.z * real.z + q.w * real.w));
	this.model = new geom_structure_DualQ(new geom_structure_Mat1x4(0.,0.,0.,1.),new geom_structure_Mat1x4(0.,0.,0.,0.));
	var this1 = new Int32Array(dice_helpers_ViewGL.largeEnough + 2);
	this1[0] = 0;
	this1[1] = 0;
	this.ind = this1;
	var this11 = new Float32Array(dice_helpers_ViewGL.largeEnough + 2);
	this11[0] = 0.;
	this11[1] = 0.;
	this.cols = this11;
	var this12 = new Float32Array(dice_helpers_ViewGL.largeEnough + 2);
	this12[0] = 0.;
	this12[1] = 0.;
	this.textPos = this12;
	var this13 = new Float32Array(dice_helpers_ViewGL.largeEnough + 2);
	this13[0] = 0.;
	this13[1] = 0.;
	this.verts = this13;
	this.itemModel = new geom_move_Axis3();
	this.axisModel = new geom_move_Axis3();
	htmlHelper_webgl_WebGLSetup.call(this,600,600);
	this.canvas.tabIndex = -1;
	var axisKeys = new dice_helpers_AxisKeys(this.axisModel,this.itemModel);
	axisKeys.showTrace = false;
	axisKeys.reset = $bind(this,this.resetPosition);
	this.DEPTH_TEST = false;
	this.BACK = false;
	this.darkBackground();
	this.setupProgram("attribute vec3 pos;" + "attribute vec4 color;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(pos, 1.);" + " vcol = color;" + "}","precision mediump float;" + "varying vec4 vcol;" + "void main(void) {" + " gl_FragColor = vcol;" + "}");
	var verts = this.verts;
	var cols = this.cols;
	var _e = verts;
	var _e1 = verts;
	var _e2 = verts;
	var _e3 = verts;
	var _e4 = verts;
	var _e5 = verts;
	var _e6 = verts;
	var _e7 = verts;
	var _e8 = verts;
	var _e9 = cols;
	var tmp = function(colorA,colorB,colorC) {
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e9,(colorA >> 16 & 255) / 255);
		var v = (colorA & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 2 + 2] = v;
		var v1 = (colorA >> 8 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 1 + 2] = v1;
		var v2 = (colorA >> 24 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 3 + 2] = v2;
		var pos_ = _e9[0] + 1.;
		_e9[0] = pos_;
		if(_e9[0] > _e9[1] - 1) {
			_e9[1] = _e9[0];
		}
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e9,(colorB >> 16 & 255) / 255);
		var v3 = (colorB & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 2 + 2] = v3;
		var v4 = (colorB >> 8 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 1 + 2] = v4;
		var v5 = (colorB >> 24 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 3 + 2] = v5;
		var pos_1 = _e9[0] + 1.;
		_e9[0] = pos_1;
		if(_e9[0] > _e9[1] - 1) {
			_e9[1] = _e9[0];
		}
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e9,(colorC >> 16 & 255) / 255);
		var v6 = (colorC & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 2 + 2] = v6;
		var v7 = (colorC >> 8 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 1 + 2] = v7;
		var v8 = (colorC >> 24 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 3 + 2] = v8;
		var pos_2 = _e9[0] + 1.;
		_e9[0] = pos_2;
		if(_e9[0] > _e9[1] - 1) {
			_e9[1] = _e9[0];
		}
	};
	var _e10 = cols;
	var tmp1 = function(color,times) {
		var _g = 0;
		var _g1 = times;
		while(_g < _g1) {
			var i = _g++;
			geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e10,(color >> 16 & 255) / 255);
			var v9 = (color & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 2 + 2] = v9;
			var v10 = (color >> 8 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 1 + 2] = v10;
			var v11 = (color >> 24 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 3 + 2] = v11;
			var pos_3 = _e10[0] + 1.;
			_e10[0] = pos_3;
			if(_e10[0] > _e10[1] - 1) {
				_e10[1] = _e10[0];
			}
			geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e10,(color >> 16 & 255) / 255);
			var v12 = (color & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 2 + 2] = v12;
			var v13 = (color >> 8 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 1 + 2] = v13;
			var v14 = (color >> 24 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 3 + 2] = v14;
			var pos_4 = _e10[0] + 1.;
			_e10[0] = pos_4;
			if(_e10[0] > _e10[1] - 1) {
				_e10[1] = _e10[0];
			}
			geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e10,(color >> 16 & 255) / 255);
			var v15 = (color & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 2 + 2] = v15;
			var v16 = (color >> 8 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 1 + 2] = v16;
			var v17 = (color >> 24 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 3 + 2] = v17;
			var pos_5 = _e10[0] + 1.;
			_e10[0] = pos_5;
			if(_e10[0] > _e10[1] - 1) {
				_e10[1] = _e10[0];
			}
		}
	};
	var _e11 = verts;
	var _e12 = verts;
	var tmp2 = function(pos_6) {
		_e12[0] = pos_6;
		if(_e12[0] > _e12[1] - 1) {
			_e12[1] = _e12[0];
		}
		return pos_6;
	};
	var _e13 = verts;
	var tmp3 = function() {
		return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(_e13);
	};
	var _e14 = verts;
	var tmp4 = function(id) {
		return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.set_size(_e14,id);
	};
	this.pen = new trilateral2_Pen({ triangle : function(ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
		return geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.triangle(_e,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
	}, transform : function(m) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(_e1,m);
	}, transformRange : function(m1,start,end) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformRange(_e2,m1,start,end);
	}, next : function() {
		var pos_7 = _e3[0] + 1.;
		_e3[0] = pos_7;
		if(_e3[0] > _e3[1] - 1) {
			_e3[1] = _e3[0];
		}
		return _e3[0];
	}, hasNext : function() {
		return _e4[0] < geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(_e4);
	}, get_pos : function() {
		return _e5[0];
	}, set_pos : function(pos_8) {
		_e6[0] = pos_8;
		if(_e6[0] > _e6[1] - 1) {
			_e6[1] = _e6[0];
		}
		return pos_8;
	}, get_size : function() {
		return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(_e7);
	}, set_size : function(id1) {
		return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.set_size(_e8,id1);
	}},{ cornerColors : tmp, colorTriangles : tmp1, get_pos : function() {
		return _e11[0];
	}, set_pos : tmp2, get_size : tmp3, set_size : tmp4});
	this.pen.transformMatrix = this.scaleToGL();
	trilateral2_Shaper.transformMatrix = this.scaleToGL();
};
dice_helpers_ViewGL.__name__ = true;
dice_helpers_ViewGL.__super__ = htmlHelper_webgl_WebGLSetup;
dice_helpers_ViewGL.prototype = $extend(htmlHelper_webgl_WebGLSetup.prototype,{
	transform: function(m) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformAll(this.verts,m);
	}
	,transformRange: function(m,start,end) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformRange(this.verts,m,start,end);
	}
	,scaleToGL: function() {
		this.scale = 0.00166666666666666677;
		var this1 = new geom_structure_Mat1x4(this.scale,-this.scale,this.scale,1.);
		var v = this1;
		var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this3 = this2;
		var this4 = new geom_structure_Mat4x3(1.,0.,0.,-1.,0.,1.,0.,1.,0.,0.,1.,0.);
		var s = this4;
		var this5 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
		var this6 = this5;
		var this7 = new geom_structure_Mat4x3(this6.a * v.x,this6.b,this6.c,this6.d,this6.e,this6.f * v.y,this6.g,this6.h,this6.i,this6.j,this6.k * v.z,this6.l);
		return this7;
	}
	,uploadVectors: function() {
		var this1 = this.verts;
		this.vertices = this1.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) * 9 + 2);
		var this2 = this.cols;
		this.colors = this2.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this2) * 4 + 2);
		var this3 = this.textPos;
		var texs = this3.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this3) * 6 + 2);
		this.indices = this.createIndices();
		var gl = this.gl;
		var indices = this.indices;
		var indexBuffer = gl.createBuffer();
		gl.bindBuffer(34963,indexBuffer);
		gl.bufferData(34963,indices,35044);
		gl.bindBuffer(34963,null);
		var gl1 = this.gl;
		var program = this.program;
		var vertices = this.vertices;
		var colors = this.colors;
		var texture = null;
		var name = htmlHelper_webgl_WebGLSetup.posName;
		var buffer = gl1.createBuffer();
		var arrBuffer = 34962;
		gl1.bindBuffer(arrBuffer,buffer);
		gl1.bufferData(arrBuffer,vertices,35044);
		var flo = gl1.getAttribLocation(program,name);
		gl1.vertexAttribPointer(flo,3,5126,false,0,0);
		gl1.enableVertexAttribArray(flo);
		gl1.bindBuffer(arrBuffer,null);
		var name1 = htmlHelper_webgl_WebGLSetup.colorName;
		var buffer1 = gl1.createBuffer();
		var arrBuffer1 = 34962;
		gl1.bindBuffer(arrBuffer1,buffer1);
		gl1.bufferData(arrBuffer1,colors,35044);
		var flo1 = gl1.getAttribLocation(program,name1);
		gl1.vertexAttribPointer(flo1,4,5126,false,0,0);
		gl1.enableVertexAttribArray(flo1);
		gl1.bindBuffer(arrBuffer1,null);
		if(texture != null) {
			var name2 = htmlHelper_webgl_WebGLSetup.textureName;
			var buffer2 = gl1.createBuffer();
			var arrBuffer2 = 34962;
			gl1.bindBuffer(arrBuffer2,buffer2);
			gl1.bufferData(arrBuffer2,texture,35044);
			var flo2 = gl1.getAttribLocation(program,name2);
			gl1.vertexAttribPointer(flo2,2,5126,false,0,0);
			gl1.enableVertexAttribArray(flo2);
			gl1.bindBuffer(arrBuffer2,null);
		}
	}
	,resetPosition: function() {
		var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
		var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
		var this3 = new geom_structure_DualQ(this1,this2);
		this.model = this3;
	}
	,darkBackground: function() {
		var dark = 0.09375;
		this.bgRed = dark;
		this.bgGreen = dark;
		this.bgBlue = dark;
	}
	,createIndices: function() {
		var this1 = this.ind;
		this1[0] = 0;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
		var _g = 0;
		var _g1 = geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this.verts);
		while(_g < _g1) {
			var i = _g++;
			var this2 = this.ind;
			var v = i * 3;
			this2[this2[0] * 3 + 2] = v;
			var this3 = this.ind;
			var v1 = i * 3 + 1;
			this3[this3[0] * 3 + 1 + 2] = v1;
			var this4 = this.ind;
			var v2 = i * 3 + 2;
			this4[this4[0] * 3 + 2 + 2] = v2;
			var this5 = this.ind;
			var pos_ = this5[0] + 1;
			this5[0] = pos_;
			if(this5[0] > this5[1] - 1) {
				this5[1] = this5[0];
			}
		}
		var this6 = this.ind;
		var arr = this6.subarray(2,this6[1] * 3 + 2);
		return arr;
	}
	,render_: function(i) {
		if(this.update != null) {
			this.update();
		}
		this.model = this.axisModel.updateCalculate(this.model);
		var q1 = this.offset;
		var q2 = this.model;
		var q11 = q2.real;
		var q21 = q1.real;
		var this1 = new geom_structure_Mat1x4(q11.x * q21.w + q11.y * q21.z - q11.z * q21.y + q11.w * q21.x,-q11.x * q21.z + q11.y * q21.w + q11.z * q21.x + q11.w * q21.y,q11.x * q21.y - q11.y * q21.x + q11.z * q21.w + q11.w * q21.z,-q11.x * q21.x - q11.y * q21.y - q11.z * q21.z + q11.w * q21.w);
		var q12 = q2.dual;
		var q22 = q1.real;
		var this2 = new geom_structure_Mat1x4(q12.x * q22.w + q12.y * q22.z - q12.z * q22.y + q12.w * q22.x,-q12.x * q22.z + q12.y * q22.w + q12.z * q22.x + q12.w * q22.y,q12.x * q22.y - q12.y * q22.x + q12.z * q22.w + q12.w * q22.z,-q12.x * q22.x - q12.y * q22.y - q12.z * q22.z + q12.w * q22.w);
		var a = this2;
		var q13 = q1.dual;
		var q23 = q2.real;
		var this3 = new geom_structure_Mat1x4(q13.x * q23.w + q13.y * q23.z - q13.z * q23.y + q13.w * q23.x,-q13.x * q23.z + q13.y * q23.w + q13.z * q23.x + q13.w * q23.y,q13.x * q23.y - q13.y * q23.x + q13.z * q23.w + q13.w * q23.z,-q13.x * q23.x - q13.y * q23.y - q13.z * q23.z + q13.w * q23.w);
		var b = this3;
		var this4 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
		var this5 = new geom_structure_DualQ(this1,this4);
		var this6 = this5;
		var a1 = this6.real;
		var b1 = this6.real;
		var mag = a1.x * b1.x + a1.y * b1.y + a1.z * b1.z + a1.w * b1.w;
		var this7;
		if(mag < 0) {
			this7 = null;
		} else {
			var oneOver = 1 / mag;
			var a2 = this6.real;
			var this8 = new geom_structure_Mat1x4(a2.x * oneOver,a2.y * oneOver,a2.z * oneOver,a2.w * oneOver);
			var a3 = this6.dual;
			var this9 = new geom_structure_Mat1x4(a3.x * oneOver,a3.y * oneOver,a3.z * oneOver,a3.w * oneOver);
			var this10 = new geom_structure_DualQ(this8,this9);
			this7 = this10;
		}
		var a4 = this7.real;
		var b2 = this7.real;
		var mag1 = a4.x * b2.x + a4.y * b2.y + a4.z * b2.z + a4.w * b2.w;
		var q;
		if(mag1 < 0) {
			q = null;
		} else {
			var oneOver1 = 1 / mag1;
			var a5 = this7.real;
			var this11 = new geom_structure_Mat1x4(a5.x * oneOver1,a5.y * oneOver1,a5.z * oneOver1,a5.w * oneOver1);
			var a6 = this7.dual;
			var this12 = new geom_structure_Mat1x4(a6.x * oneOver1,a6.y * oneOver1,a6.z * oneOver1,a6.w * oneOver1);
			var this13 = new geom_structure_DualQ(this11,this12);
			q = this13;
		}
		var this14 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var m = this14;
		var w = q.real.w;
		var x = q.real.x;
		var y = q.real.y;
		var z = q.real.z;
		m.a = w * w + x * x - y * y - z * z;
		m.e = 2 * x * y + 2 * w * z;
		m.i = 2 * x * z - 2 * w * y;
		m.b = 2 * x * y - 2 * w * z;
		m.f = w * w + y * y - x * x - z * z;
		m.j = 2 * y * z + 2 * w * x;
		m.c = 2 * x * z + 2 * w * y;
		m.g = 2 * y * z - 2 * w * x;
		m.k = w * w + z * z - x * x - y * y;
		var a7 = q.dual;
		var this15 = new geom_structure_Mat1x4(a7.x * 2.,a7.y * 2.,a7.z * 2.,a7.w * 2.);
		var q3 = this15;
		var a8 = q.real;
		var this16 = new geom_structure_Mat1x4(-a8.x,-a8.y,-a8.z,a8.w);
		var q24 = this16;
		var this17 = new geom_structure_Mat1x4(q3.x * q24.w + q3.y * q24.z - q3.z * q24.y + q3.w * q24.x,-q3.x * q24.z + q3.y * q24.w + q3.z * q24.x + q3.w * q24.y,q3.x * q24.y - q3.y * q24.x + q3.z * q24.w + q3.w * q24.z,-q3.x * q24.x - q3.y * q24.y - q3.z * q24.z + q3.w * q24.w);
		q3 = this17;
		var this18 = new geom_structure_Mat1x4(q3.x,q3.y,q3.z,1.);
		var t = this18;
		m.d = t.x;
		m.h = t.y;
		m.l = t.z;
		var trans = m;
		var scale = 1 / Math.tan(0.785398163395);
		var dif = 99.9;
		var this19 = new geom_structure_Mat4x4(scale,0.,0.,0.,0.,scale,0.,0.,0.,0.,-100. / dif,-10. / dif,0.,0.,-1.,0.);
		var r = this19;
		var this20 = new geom_structure_Mat4x4(trans.a,trans.b,trans.c,trans.d,trans.e,trans.f,trans.g,trans.h,trans.i,trans.j,trans.k,trans.l,0.,0.,0.,1.);
		var s = this20;
		var this21 = new geom_structure_Mat4x4(r.a * s.a + r.b * s.e + r.c * s.i + r.d * s.m,r.a * s.b + r.b * s.f + r.c * s.j + r.d * s.n,r.a * s.c + r.b * s.g + r.c * s.k + r.d * s.o,r.a * s.d + r.b * s.h + r.c * s.l + r.d * s.p,r.e * s.a + r.f * s.e + r.g * s.i + r.h * s.m,r.e * s.b + r.f * s.f + r.g * s.j + r.h * s.n,r.e * s.c + r.f * s.g + r.g * s.k + r.h * s.o,r.e * s.d + r.f * s.h + r.g * s.l + r.h * s.p,r.i * s.a + r.j * s.e + r.k * s.i + r.l * s.m,r.i * s.b + r.j * s.f + r.k * s.j + r.l * s.n,r.i * s.c + r.j * s.g + r.k * s.k + r.l * s.o,r.i * s.d + r.j * s.h + r.k * s.l + r.l * s.p,r.m * s.a + r.n * s.e + r.o * s.i + r.p * s.m,r.m * s.b + r.n * s.f + r.o * s.j + r.p * s.n,r.m + s.c + r.n * s.g + r.o * s.k + r.p * s.o,r.m * s.d + r.n * s.h + r.o * s.l + r.p * s.p);
		var arr = this.matrix32Array;
		var here = this21;
		arr[0] = here.a;
		arr[1] = here.e;
		arr[2] = here.i;
		arr[3] = here.m;
		arr[4] = here.b;
		arr[5] = here.f;
		arr[6] = here.j;
		arr[7] = here.n;
		arr[8] = here.c;
		arr[9] = here.g;
		arr[10] = here.k;
		arr[11] = here.o;
		arr[12] = here.d;
		arr[13] = here.h;
		arr[14] = here.l;
		arr[15] = here.p;
		this.render();
	}
});
var dice_view_Die = function(pen) {
	this.dieShape = new trilateral2_RegularShape(0.,0.,60.,-1057030144);
	this.spotShape = new trilateral2_RegularShape(0.,0.,15.,-983041);
	this.left = false;
	this.spots = pen;
};
dice_view_Die.__name__ = true;
dice_view_Die.prototype = {
	create: function(x,y) {
		this.spotShape.x = x;
		this.spotShape.y = y;
		this.dieShape.x = x;
		this.dieShape.y = y;
		var diceRadius = this.dieShape.radius / 600;
		var layout = new geom_obj_DieLayout(diceRadius,this.left);
		var z = layout.radius;
		var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this2 = this1;
		var this3 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z);
		var s = this3;
		var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
		var t1 = this4;
		var theta = Math.PI / 2;
		var this5 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this6 = this5;
		var c = Math.cos(theta);
		var s1 = Math.sin(theta);
		var this7 = new geom_structure_Mat4x3(c,0.,s1,0.,0.,1.,0.,0.,-s1,0.,c,0.);
		var s2 = this7;
		var this8 = new geom_structure_Mat4x3(this6.a * s2.a + this6.b * s2.e + this6.c * s2.i,this6.a * s2.b + this6.b * s2.f + this6.c * s2.j,this6.a * s2.c + this6.b * s2.g + this6.c * s2.k,this6.a * s2.d + this6.b * s2.h + this6.c * s2.l + this6.d,this6.e * s2.a + this6.f * s2.e + this6.g * s2.i,this6.e * s2.b + this6.f * s2.f + this6.g * s2.j,this6.e * s2.c + this6.f * s2.g + this6.g * s2.k,this6.e * s2.d + this6.f * s2.h + this6.g * s2.l + this6.h,this6.i * s2.a + this6.j * s2.e + this6.k * s2.i,this6.i * s2.b + this6.j * s2.f + this6.k * s2.j,this6.i * s2.c + this6.j * s2.g + this6.k * s2.k,this6.i * s2.d + this6.j * s2.h + this6.k * s2.l + this6.l);
		var r = this8;
		var z1 = layout.radius;
		var this9 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this10 = this9;
		var this11 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z1);
		var s3 = this11;
		var this12 = new geom_structure_Mat4x3(this10.a * s3.a + this10.b * s3.e + this10.c * s3.i,this10.a * s3.b + this10.b * s3.f + this10.c * s3.j,this10.a * s3.c + this10.b * s3.g + this10.c * s3.k,this10.a * s3.d + this10.b * s3.h + this10.c * s3.l + this10.d,this10.e * s3.a + this10.f * s3.e + this10.g * s3.i,this10.e * s3.b + this10.f * s3.f + this10.g * s3.j,this10.e * s3.c + this10.f * s3.g + this10.g * s3.k,this10.e * s3.d + this10.f * s3.h + this10.g * s3.l + this10.h,this10.i * s3.a + this10.j * s3.e + this10.k * s3.i,this10.i * s3.b + this10.j * s3.f + this10.k * s3.j,this10.i * s3.c + this10.j * s3.g + this10.k * s3.k,this10.i * s3.d + this10.j * s3.h + this10.k * s3.l + this10.l);
		var s4 = this12;
		var this13 = new geom_structure_Mat4x3(r.a * s4.a + r.b * s4.e + r.c * s4.i,r.a * s4.b + r.b * s4.f + r.c * s4.j,r.a * s4.c + r.b * s4.g + r.c * s4.k,r.a * s4.d + r.b * s4.h + r.c * s4.l + r.d,r.e * s4.a + r.f * s4.e + r.g * s4.i,r.e * s4.b + r.f * s4.f + r.g * s4.j,r.e * s4.c + r.f * s4.g + r.g * s4.k,r.e * s4.d + r.f * s4.h + r.g * s4.l + r.h,r.i * s4.a + r.j * s4.e + r.k * s4.i,r.i * s4.b + r.j * s4.f + r.k * s4.j,r.i * s4.c + r.j * s4.g + r.k * s4.k,r.i * s4.d + r.j * s4.h + r.k * s4.l + r.l);
		var t2 = this13;
		var theta1 = Math.PI / 2;
		var this14 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this15 = this14;
		var c1 = Math.cos(theta1);
		var s5 = Math.sin(theta1);
		var this16 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c1,-s5,0.,0.,s5,c1,0.);
		var s6 = this16;
		var this17 = new geom_structure_Mat4x3(this15.a * s6.a + this15.b * s6.e + this15.c * s6.i,this15.a * s6.b + this15.b * s6.f + this15.c * s6.j,this15.a * s6.c + this15.b * s6.g + this15.c * s6.k,this15.a * s6.d + this15.b * s6.h + this15.c * s6.l + this15.d,this15.e * s6.a + this15.f * s6.e + this15.g * s6.i,this15.e * s6.b + this15.f * s6.f + this15.g * s6.j,this15.e * s6.c + this15.f * s6.g + this15.g * s6.k,this15.e * s6.d + this15.f * s6.h + this15.g * s6.l + this15.h,this15.i * s6.a + this15.j * s6.e + this15.k * s6.i,this15.i * s6.b + this15.j * s6.f + this15.k * s6.j,this15.i * s6.c + this15.j * s6.g + this15.k * s6.k,this15.i * s6.d + this15.j * s6.h + this15.k * s6.l + this15.l);
		var r1 = this17;
		var z2 = layout.radius;
		var this18 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this19 = this18;
		var this20 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z2);
		var s7 = this20;
		var this21 = new geom_structure_Mat4x3(this19.a * s7.a + this19.b * s7.e + this19.c * s7.i,this19.a * s7.b + this19.b * s7.f + this19.c * s7.j,this19.a * s7.c + this19.b * s7.g + this19.c * s7.k,this19.a * s7.d + this19.b * s7.h + this19.c * s7.l + this19.d,this19.e * s7.a + this19.f * s7.e + this19.g * s7.i,this19.e * s7.b + this19.f * s7.f + this19.g * s7.j,this19.e * s7.c + this19.f * s7.g + this19.g * s7.k,this19.e * s7.d + this19.f * s7.h + this19.g * s7.l + this19.h,this19.i * s7.a + this19.j * s7.e + this19.k * s7.i,this19.i * s7.b + this19.j * s7.f + this19.k * s7.j,this19.i * s7.c + this19.j * s7.g + this19.k * s7.k,this19.i * s7.d + this19.j * s7.h + this19.k * s7.l + this19.l);
		var s8 = this21;
		var this22 = new geom_structure_Mat4x3(r1.a * s8.a + r1.b * s8.e + r1.c * s8.i,r1.a * s8.b + r1.b * s8.f + r1.c * s8.j,r1.a * s8.c + r1.b * s8.g + r1.c * s8.k,r1.a * s8.d + r1.b * s8.h + r1.c * s8.l + r1.d,r1.e * s8.a + r1.f * s8.e + r1.g * s8.i,r1.e * s8.b + r1.f * s8.f + r1.g * s8.j,r1.e * s8.c + r1.f * s8.g + r1.g * s8.k,r1.e * s8.d + r1.f * s8.h + r1.g * s8.l + r1.h,r1.i * s8.a + r1.j * s8.e + r1.k * s8.i,r1.i * s8.b + r1.j * s8.f + r1.k * s8.j,r1.i * s8.c + r1.j * s8.g + r1.k * s8.k,r1.i * s8.d + r1.j * s8.h + r1.k * s8.l + r1.l);
		var t3 = this22;
		var theta2 = -Math.PI / 2;
		var this23 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this24 = this23;
		var c2 = Math.cos(theta2);
		var s9 = Math.sin(theta2);
		var this25 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c2,-s9,0.,0.,s9,c2,0.);
		var s10 = this25;
		var this26 = new geom_structure_Mat4x3(this24.a * s10.a + this24.b * s10.e + this24.c * s10.i,this24.a * s10.b + this24.b * s10.f + this24.c * s10.j,this24.a * s10.c + this24.b * s10.g + this24.c * s10.k,this24.a * s10.d + this24.b * s10.h + this24.c * s10.l + this24.d,this24.e * s10.a + this24.f * s10.e + this24.g * s10.i,this24.e * s10.b + this24.f * s10.f + this24.g * s10.j,this24.e * s10.c + this24.f * s10.g + this24.g * s10.k,this24.e * s10.d + this24.f * s10.h + this24.g * s10.l + this24.h,this24.i * s10.a + this24.j * s10.e + this24.k * s10.i,this24.i * s10.b + this24.j * s10.f + this24.k * s10.j,this24.i * s10.c + this24.j * s10.g + this24.k * s10.k,this24.i * s10.d + this24.j * s10.h + this24.k * s10.l + this24.l);
		var r2 = this26;
		var z3 = layout.radius;
		var this27 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this28 = this27;
		var this29 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z3);
		var s11 = this29;
		var this30 = new geom_structure_Mat4x3(this28.a * s11.a + this28.b * s11.e + this28.c * s11.i,this28.a * s11.b + this28.b * s11.f + this28.c * s11.j,this28.a * s11.c + this28.b * s11.g + this28.c * s11.k,this28.a * s11.d + this28.b * s11.h + this28.c * s11.l + this28.d,this28.e * s11.a + this28.f * s11.e + this28.g * s11.i,this28.e * s11.b + this28.f * s11.f + this28.g * s11.j,this28.e * s11.c + this28.f * s11.g + this28.g * s11.k,this28.e * s11.d + this28.f * s11.h + this28.g * s11.l + this28.h,this28.i * s11.a + this28.j * s11.e + this28.k * s11.i,this28.i * s11.b + this28.j * s11.f + this28.k * s11.j,this28.i * s11.c + this28.j * s11.g + this28.k * s11.k,this28.i * s11.d + this28.j * s11.h + this28.k * s11.l + this28.l);
		var s12 = this30;
		var this31 = new geom_structure_Mat4x3(r2.a * s12.a + r2.b * s12.e + r2.c * s12.i,r2.a * s12.b + r2.b * s12.f + r2.c * s12.j,r2.a * s12.c + r2.b * s12.g + r2.c * s12.k,r2.a * s12.d + r2.b * s12.h + r2.c * s12.l + r2.d,r2.e * s12.a + r2.f * s12.e + r2.g * s12.i,r2.e * s12.b + r2.f * s12.f + r2.g * s12.j,r2.e * s12.c + r2.f * s12.g + r2.g * s12.k,r2.e * s12.d + r2.f * s12.h + r2.g * s12.l + r2.h,r2.i * s12.a + r2.j * s12.e + r2.k * s12.i,r2.i * s12.b + r2.j * s12.f + r2.k * s12.j,r2.i * s12.c + r2.j * s12.g + r2.k * s12.k,r2.i * s12.d + r2.j * s12.h + r2.k * s12.l + r2.l);
		var t4 = this31;
		var theta3 = -Math.PI / 2;
		var this32 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this33 = this32;
		var c3 = Math.cos(theta3);
		var s13 = Math.sin(theta3);
		var this34 = new geom_structure_Mat4x3(c3,0.,s13,0.,0.,1.,0.,0.,-s13,0.,c3,0.);
		var s14 = this34;
		var this35 = new geom_structure_Mat4x3(this33.a * s14.a + this33.b * s14.e + this33.c * s14.i,this33.a * s14.b + this33.b * s14.f + this33.c * s14.j,this33.a * s14.c + this33.b * s14.g + this33.c * s14.k,this33.a * s14.d + this33.b * s14.h + this33.c * s14.l + this33.d,this33.e * s14.a + this33.f * s14.e + this33.g * s14.i,this33.e * s14.b + this33.f * s14.f + this33.g * s14.j,this33.e * s14.c + this33.f * s14.g + this33.g * s14.k,this33.e * s14.d + this33.f * s14.h + this33.g * s14.l + this33.h,this33.i * s14.a + this33.j * s14.e + this33.k * s14.i,this33.i * s14.b + this33.j * s14.f + this33.k * s14.j,this33.i * s14.c + this33.j * s14.g + this33.k * s14.k,this33.i * s14.d + this33.j * s14.h + this33.k * s14.l + this33.l);
		var r3 = this35;
		var z4 = layout.radius;
		var this36 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this37 = this36;
		var this38 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z4);
		var s15 = this38;
		var this39 = new geom_structure_Mat4x3(this37.a * s15.a + this37.b * s15.e + this37.c * s15.i,this37.a * s15.b + this37.b * s15.f + this37.c * s15.j,this37.a * s15.c + this37.b * s15.g + this37.c * s15.k,this37.a * s15.d + this37.b * s15.h + this37.c * s15.l + this37.d,this37.e * s15.a + this37.f * s15.e + this37.g * s15.i,this37.e * s15.b + this37.f * s15.f + this37.g * s15.j,this37.e * s15.c + this37.f * s15.g + this37.g * s15.k,this37.e * s15.d + this37.f * s15.h + this37.g * s15.l + this37.h,this37.i * s15.a + this37.j * s15.e + this37.k * s15.i,this37.i * s15.b + this37.j * s15.f + this37.k * s15.j,this37.i * s15.c + this37.j * s15.g + this37.k * s15.k,this37.i * s15.d + this37.j * s15.h + this37.k * s15.l + this37.l);
		var s16 = this39;
		var this40 = new geom_structure_Mat4x3(r3.a * s16.a + r3.b * s16.e + r3.c * s16.i,r3.a * s16.b + r3.b * s16.f + r3.c * s16.j,r3.a * s16.c + r3.b * s16.g + r3.c * s16.k,r3.a * s16.d + r3.b * s16.h + r3.c * s16.l + r3.d,r3.e * s16.a + r3.f * s16.e + r3.g * s16.i,r3.e * s16.b + r3.f * s16.f + r3.g * s16.j,r3.e * s16.c + r3.f * s16.g + r3.g * s16.k,r3.e * s16.d + r3.f * s16.h + r3.g * s16.l + r3.h,r3.i * s16.a + r3.j * s16.e + r3.k * s16.i,r3.i * s16.b + r3.j * s16.f + r3.k * s16.j,r3.i * s16.c + r3.j * s16.g + r3.k * s16.k,r3.i * s16.d + r3.j * s16.h + r3.k * s16.l + r3.l);
		var t5 = this40;
		var theta4 = Math.PI;
		var this41 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this42 = this41;
		var c4 = Math.cos(theta4);
		var s17 = Math.sin(theta4);
		var this43 = new geom_structure_Mat4x3(c4,0.,s17,0.,0.,1.,0.,0.,-s17,0.,c4,0.);
		var s18 = this43;
		var this44 = new geom_structure_Mat4x3(this42.a * s18.a + this42.b * s18.e + this42.c * s18.i,this42.a * s18.b + this42.b * s18.f + this42.c * s18.j,this42.a * s18.c + this42.b * s18.g + this42.c * s18.k,this42.a * s18.d + this42.b * s18.h + this42.c * s18.l + this42.d,this42.e * s18.a + this42.f * s18.e + this42.g * s18.i,this42.e * s18.b + this42.f * s18.f + this42.g * s18.j,this42.e * s18.c + this42.f * s18.g + this42.g * s18.k,this42.e * s18.d + this42.f * s18.h + this42.g * s18.l + this42.h,this42.i * s18.a + this42.j * s18.e + this42.k * s18.i,this42.i * s18.b + this42.j * s18.f + this42.k * s18.j,this42.i * s18.c + this42.j * s18.g + this42.k * s18.k,this42.i * s18.d + this42.j * s18.h + this42.k * s18.l + this42.l);
		var r4 = this44;
		var z5 = layout.radius;
		var this45 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this46 = this45;
		var this47 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z5);
		var s19 = this47;
		var this48 = new geom_structure_Mat4x3(this46.a * s19.a + this46.b * s19.e + this46.c * s19.i,this46.a * s19.b + this46.b * s19.f + this46.c * s19.j,this46.a * s19.c + this46.b * s19.g + this46.c * s19.k,this46.a * s19.d + this46.b * s19.h + this46.c * s19.l + this46.d,this46.e * s19.a + this46.f * s19.e + this46.g * s19.i,this46.e * s19.b + this46.f * s19.f + this46.g * s19.j,this46.e * s19.c + this46.f * s19.g + this46.g * s19.k,this46.e * s19.d + this46.f * s19.h + this46.g * s19.l + this46.h,this46.i * s19.a + this46.j * s19.e + this46.k * s19.i,this46.i * s19.b + this46.j * s19.f + this46.k * s19.j,this46.i * s19.c + this46.j * s19.g + this46.k * s19.k,this46.i * s19.d + this46.j * s19.h + this46.k * s19.l + this46.l);
		var s20 = this48;
		var this49 = new geom_structure_Mat4x3(r4.a * s20.a + r4.b * s20.e + r4.c * s20.i,r4.a * s20.b + r4.b * s20.f + r4.c * s20.j,r4.a * s20.c + r4.b * s20.g + r4.c * s20.k,r4.a * s20.d + r4.b * s20.h + r4.c * s20.l + r4.d,r4.e * s20.a + r4.f * s20.e + r4.g * s20.i,r4.e * s20.b + r4.f * s20.f + r4.g * s20.j,r4.e * s20.c + r4.f * s20.g + r4.g * s20.k,r4.e * s20.d + r4.f * s20.h + r4.g * s20.l + r4.h,r4.i * s20.a + r4.j * s20.e + r4.k * s20.i,r4.i * s20.b + r4.j * s20.f + r4.k * s20.j,r4.i * s20.c + r4.j * s20.g + r4.k * s20.k,r4.i * s20.d + r4.j * s20.h + r4.k * s20.l + r4.l);
		var t6 = this49;
		var tt2 = layout.isLeft == true ? t3 : t2;
		var tt3 = layout.isLeft == true ? t2 : t3;
		var tt4 = layout.isLeft == true ? t5 : t4;
		var tt5 = layout.isLeft == true ? t4 : t5;
		var trans_0 = t1;
		var trans_1 = tt2;
		var trans_2 = tt3;
		var trans_3 = tt4;
		var trans_4 = tt5;
		var trans_5 = t6;
		var this50 = this.spots;
		var rs = this.dieShape;
		var start = this50.drawType.get_size();
		var drawType = this50.drawType;
		var x1 = rs.x - rs.radius;
		var y1 = rs.y - rs.radius;
		var width = rs.radius * 2;
		var height = rs.radius * 2;
		var radius = this50.rounded;
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var ax = x1 + radius;
		var ay = y1 + radius;
		var bx = x1 + width - radius;
		var by = y1 + radius;
		var cx = bx;
		var cy = y1 + height - radius;
		var dx = ax;
		var dy = cy;
		var count = 0;
		var ax1 = ax;
		var ay1 = y1;
		var bx1 = ax + (width - radius * 2);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + height;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType.transform(m1);
		}
		drawType.next();
		count += 2;
		var dimY = height - 2 * radius;
		var ax2 = x1;
		var ay2 = ay;
		var bx2 = x1 + radius;
		var by2 = ay2;
		var cx2 = bx2;
		var cy2 = ay2 + dimY;
		var dx2 = x1;
		var dy2 = cy2;
		drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType.transform(m3);
		}
		drawType.next();
		count += 2;
		var ax3 = bx;
		var ay3 = by;
		var bx3 = bx + radius;
		var by3 = ay3;
		var cx3 = bx3;
		var cy3 = ay3 + dimY;
		var dx3 = bx;
		var dy3 = cy3;
		drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType.transform(m4);
		}
		drawType.next();
		drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType.transform(m5);
		}
		drawType.next();
		count += 2;
		var beta = -pi;
		var gamma = -pi_2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this51 = f;
			var za = this51;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this52 = f1;
			var zb = this52;
			var fa = za;
			var fb = zb;
			var theta5 = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta5 : -theta5;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this53 = f2;
			var za1 = this53;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this54 = f3;
			var zb1 = this54;
			var fa1 = za1;
			var fb1 = zb1;
			var theta6 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta6 : -theta6;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this55 = f4;
			var za2 = this55;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this56 = f5;
			var zb2 = this56;
			var fa2 = za2;
			var fb2 = zb2;
			var theta7 = Math.abs(fa2 - fb2);
			var smallest = theta7 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta7 : -theta7;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this57 = f6;
			var za3 = this57;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this58 = f7;
			var zb3 = this58;
			var fa3 = za3;
			var fb3 = zb3;
			var theta8 = Math.abs(fa3 - fb3);
			var largest = theta8 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta8 : -theta8;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx4;
		var cy4;
		var bx4 = 0;
		var by4 = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx4 = ax + radius * Math.sin(angle);
			cy4 = ay + radius * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
				var m6 = trilateral2_Shaper.transformMatrix;
				if(m6 != null) {
					drawType.transform(m6);
				}
				drawType.next();
			}
			angle += step1;
			bx4 = cx4;
			by4 = cy4;
		}
		count += totalSteps;
		var pi2 = Math.PI;
		var step2 = pi2 * 2 / 36;
		var dif5;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f8;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f8 = pi_2;
			} else {
				var a8 = pi_2 % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
			}
			var this59 = f8;
			var za4 = this59;
			var f9;
			if(pi >= 0 && pi > Math.PI) {
				f9 = pi;
			} else {
				var a9 = pi % (2 * Math.PI);
				f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
			}
			var this60 = f9;
			var zb4 = this60;
			var fa4 = za4;
			var fb4 = zb4;
			var theta9 = Math.abs(fa4 - fb4);
			var clockwise4 = fa4 < fb4;
			var dif6 = clockwise4 ? theta9 : -theta9;
			dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
			break;
		case 1:
			var f10;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f10 = pi_2;
			} else {
				var a10 = pi_2 % (2 * Math.PI);
				f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
			}
			var this61 = f10;
			var za5 = this61;
			var f11;
			if(pi >= 0 && pi > Math.PI) {
				f11 = pi;
			} else {
				var a11 = pi % (2 * Math.PI);
				f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
			}
			var this62 = f11;
			var zb5 = this62;
			var fa5 = za5;
			var fb5 = zb5;
			var theta10 = Math.abs(fa5 - fb5);
			var clockwise5 = fa5 < fb5;
			var dif7 = clockwise5 ? theta10 : -theta10;
			dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
			break;
		case 2:
			var f12;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f12 = pi_2;
			} else {
				var a12 = pi_2 % (2 * Math.PI);
				f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
			}
			var this63 = f12;
			var za6 = this63;
			var f13;
			if(pi >= 0 && pi > Math.PI) {
				f13 = pi;
			} else {
				var a13 = pi % (2 * Math.PI);
				f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
			}
			var this64 = f13;
			var zb6 = this64;
			var fa6 = za6;
			var fb6 = zb6;
			var theta11 = Math.abs(fa6 - fb6);
			var smallest1 = theta11 <= Math.PI;
			var clockwise6 = fa6 < fb6;
			var dif8 = clockwise6 ? theta11 : -theta11;
			dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
			break;
		case 3:
			var f14;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f14 = pi_2;
			} else {
				var a14 = pi_2 % (2 * Math.PI);
				f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
			}
			var this65 = f14;
			var za7 = this65;
			var f15;
			if(pi >= 0 && pi > Math.PI) {
				f15 = pi;
			} else {
				var a15 = pi % (2 * Math.PI);
				f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
			}
			var this66 = f15;
			var zb7 = this66;
			var fa7 = za7;
			var fb7 = zb7;
			var theta12 = Math.abs(fa7 - fb7);
			var largest1 = theta12 > Math.PI;
			var clockwise7 = fa7 < fb7;
			var dif9 = clockwise7 ? theta12 : -theta12;
			dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta12) : 2 * Math.PI - theta12;
			break;
		}
		var positive1 = dif5 >= 0;
		var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
		var step3 = dif5 / totalSteps1;
		var angle1 = pi_2;
		var cx5;
		var cy5;
		var bx5 = 0;
		var by5 = 0;
		var _g2 = 0;
		var _g11 = totalSteps1 + 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			cx5 = bx + radius * Math.sin(angle1);
			cy5 = by + radius * Math.cos(angle1);
			if(i1 != 0) {
				drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
				var m7 = trilateral2_Shaper.transformMatrix;
				if(m7 != null) {
					drawType.transform(m7);
				}
				drawType.next();
			}
			angle1 += step3;
			bx5 = cx5;
			by5 = cy5;
		}
		count += totalSteps1;
		var pi3 = Math.PI;
		var step4 = pi3 * 2 / 36;
		var dif10;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f16;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f16 = pi_2;
			} else {
				var a16 = pi_2 % (2 * Math.PI);
				f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
			}
			var this67 = f16;
			var za8 = this67;
			var f17;
			if(0 > Math.PI) {
				f17 = 0;
			} else {
				var a17 = 0 % (2 * Math.PI);
				f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
			}
			var this68 = f17;
			var zb8 = this68;
			var fa8 = za8;
			var fb8 = zb8;
			var theta13 = Math.abs(fa8 - fb8);
			var clockwise8 = fa8 < fb8;
			var dif11 = clockwise8 ? theta13 : -theta13;
			dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
			break;
		case 1:
			var f18;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f18 = pi_2;
			} else {
				var a18 = pi_2 % (2 * Math.PI);
				f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
			}
			var this69 = f18;
			var za9 = this69;
			var f19;
			if(0 > Math.PI) {
				f19 = 0;
			} else {
				var a19 = 0 % (2 * Math.PI);
				f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
			}
			var this70 = f19;
			var zb9 = this70;
			var fa9 = za9;
			var fb9 = zb9;
			var theta14 = Math.abs(fa9 - fb9);
			var clockwise9 = fa9 < fb9;
			var dif12 = clockwise9 ? theta14 : -theta14;
			dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
			break;
		case 2:
			var f20;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f20 = pi_2;
			} else {
				var a20 = pi_2 % (2 * Math.PI);
				f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
			}
			var this71 = f20;
			var za10 = this71;
			var f21;
			if(0 > Math.PI) {
				f21 = 0;
			} else {
				var a21 = 0 % (2 * Math.PI);
				f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
			}
			var this72 = f21;
			var zb10 = this72;
			var fa10 = za10;
			var fb10 = zb10;
			var theta15 = Math.abs(fa10 - fb10);
			var smallest2 = theta15 <= Math.PI;
			var clockwise10 = fa10 < fb10;
			var dif13 = clockwise10 ? theta15 : -theta15;
			dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
			break;
		case 3:
			var f22;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f22 = pi_2;
			} else {
				var a22 = pi_2 % (2 * Math.PI);
				f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
			}
			var this73 = f22;
			var za11 = this73;
			var f23;
			if(0 > Math.PI) {
				f23 = 0;
			} else {
				var a23 = 0 % (2 * Math.PI);
				f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
			}
			var this74 = f23;
			var zb11 = this74;
			var fa11 = za11;
			var fb11 = zb11;
			var theta16 = Math.abs(fa11 - fb11);
			var largest2 = theta16 > Math.PI;
			var clockwise11 = fa11 < fb11;
			var dif14 = clockwise11 ? theta16 : -theta16;
			dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta16) : 2 * Math.PI - theta16;
			break;
		}
		var positive2 = dif10 >= 0;
		var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
		var step5 = dif10 / totalSteps2;
		var angle2 = pi_2;
		var cx6;
		var cy6;
		var bx6 = 0;
		var by6 = 0;
		var _g3 = 0;
		var _g12 = totalSteps2 + 1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			cx6 = cx + radius * Math.sin(angle2);
			cy6 = cy + radius * Math.cos(angle2);
			if(i2 != 0) {
				drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
				var m8 = trilateral2_Shaper.transformMatrix;
				if(m8 != null) {
					drawType.transform(m8);
				}
				drawType.next();
			}
			angle2 += step5;
			bx6 = cx6;
			by6 = cy6;
		}
		count += totalSteps2;
		var gamma1 = -pi_2;
		var pi4 = Math.PI;
		var step6 = pi4 * 2 / 36;
		var dif15;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f24;
			if(0 > Math.PI) {
				f24 = 0;
			} else {
				var a24 = 0 % (2 * Math.PI);
				f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
			}
			var this75 = f24;
			var za12 = this75;
			var f25;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f25 = gamma1;
			} else {
				var a25 = gamma1 % (2 * Math.PI);
				f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
			}
			var this76 = f25;
			var zb12 = this76;
			var fa12 = za12;
			var fb12 = zb12;
			var theta17 = Math.abs(fa12 - fb12);
			var clockwise12 = fa12 < fb12;
			var dif16 = clockwise12 ? theta17 : -theta17;
			dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
			break;
		case 1:
			var f26;
			if(0 > Math.PI) {
				f26 = 0;
			} else {
				var a26 = 0 % (2 * Math.PI);
				f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
			}
			var this77 = f26;
			var za13 = this77;
			var f27;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f27 = gamma1;
			} else {
				var a27 = gamma1 % (2 * Math.PI);
				f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
			}
			var this78 = f27;
			var zb13 = this78;
			var fa13 = za13;
			var fb13 = zb13;
			var theta18 = Math.abs(fa13 - fb13);
			var clockwise13 = fa13 < fb13;
			var dif17 = clockwise13 ? theta18 : -theta18;
			dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
			break;
		case 2:
			var f28;
			if(0 > Math.PI) {
				f28 = 0;
			} else {
				var a28 = 0 % (2 * Math.PI);
				f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
			}
			var this79 = f28;
			var za14 = this79;
			var f29;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f29 = gamma1;
			} else {
				var a29 = gamma1 % (2 * Math.PI);
				f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
			}
			var this80 = f29;
			var zb14 = this80;
			var fa14 = za14;
			var fb14 = zb14;
			var theta19 = Math.abs(fa14 - fb14);
			var smallest3 = theta19 <= Math.PI;
			var clockwise14 = fa14 < fb14;
			var dif18 = clockwise14 ? theta19 : -theta19;
			dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta19) : 2 * Math.PI - theta19;
			break;
		case 3:
			var f30;
			if(0 > Math.PI) {
				f30 = 0;
			} else {
				var a30 = 0 % (2 * Math.PI);
				f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
			}
			var this81 = f30;
			var za15 = this81;
			var f31;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f31 = gamma1;
			} else {
				var a31 = gamma1 % (2 * Math.PI);
				f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
			}
			var this82 = f31;
			var zb15 = this82;
			var fa15 = za15;
			var fb15 = zb15;
			var theta20 = Math.abs(fa15 - fb15);
			var largest3 = theta20 > Math.PI;
			var clockwise15 = fa15 < fb15;
			var dif19 = clockwise15 ? theta20 : -theta20;
			dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta20) : 2 * Math.PI - theta20;
			break;
		}
		var positive3 = dif15 >= 0;
		var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
		var step7 = dif15 / totalSteps3;
		var angle3 = 0;
		var cx7;
		var cy7;
		var bx7 = 0;
		var by7 = 0;
		var _g4 = 0;
		var _g13 = totalSteps3 + 1;
		while(_g4 < _g13) {
			var i3 = _g4++;
			cx7 = dx + radius * Math.sin(angle3);
			cy7 = dy + radius * Math.cos(angle3);
			if(i3 != 0) {
				drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
				var m9 = trilateral2_Shaper.transformMatrix;
				if(m9 != null) {
					drawType.transform(m9);
				}
				drawType.next();
			}
			angle3 += step7;
			bx7 = cx7;
			by7 = cy7;
		}
		var len = count += totalSteps3;
		var color = rs.color;
		if(color == -1) {
			color = this50.currentColor;
		}
		this50.colorType.colorTriangles(color,len);
		var end = start + len - 1;
		var s0 = new trilateral2_IndexRange(start,end);
		var this83 = this.spots;
		var this84 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this85 = this84;
		var this86 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this83.dz / 2);
		var s21 = this86;
		var this87 = new geom_structure_Mat4x3(this85.a * s21.a + this85.b * s21.e + this85.c * s21.i,this85.a * s21.b + this85.b * s21.f + this85.c * s21.j,this85.a * s21.c + this85.b * s21.g + this85.c * s21.k,this85.a * s21.d + this85.b * s21.h + this85.c * s21.l + this85.d,this85.e * s21.a + this85.f * s21.e + this85.g * s21.i,this85.e * s21.b + this85.f * s21.f + this85.g * s21.j,this85.e * s21.c + this85.f * s21.g + this85.g * s21.k,this85.e * s21.d + this85.f * s21.h + this85.g * s21.l + this85.h,this85.i * s21.a + this85.j * s21.e + this85.k * s21.i,this85.i * s21.b + this85.j * s21.f + this85.k * s21.j,this85.i * s21.c + this85.j * s21.g + this85.k * s21.k,this85.i * s21.d + this85.j * s21.h + this85.k * s21.l + this85.l);
		var trans = this87;
		this83.drawType.transformRange(trans,s0.start,s0.end);
		var this88 = this.spots;
		var rs1 = this.spotShape;
		var s01 = rs1.clone();
		s01.x -= 25;
		s01.y -= 35;
		var arr = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx = -0.25;
		var ry = 0.25;
		var sides = 47;
		if(sides == null) {
			sides = 36;
		}
		if(ry == null) {
			ry = 0;
		}
		if(rx == null) {
			rx = 0;
		}
		var start1 = this88.drawType.get_size();
		var drawType1 = this88.drawType;
		var x2 = s01.x;
		var y2 = s01.y;
		var radius1 = s01.radius;
		var len1;
		if((sides & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx1 = rx;
			var ry1 = ry;
			var sides1 = sides;
			var omega = 0.;
			if(omega == null) {
				omega = 0.;
			}
			if(sides1 == null) {
				sides1 = 36;
			}
			var pi5 = Math.PI;
			var theta21 = pi5 / 2 + omega;
			var step8 = pi5 * 2 / sides1;
			var bx8;
			var by8;
			var cx8;
			var cy8;
			if(rx1 > 1.) {
				rx1 = 1;
			}
			if(rx1 < -1.) {
				rx1 = -1;
			}
			if(ry1 > 1.) {
				ry1 = 1;
			}
			if(ry1 < -1.) {
				ry1 = -1;
			}
			var mx = x2 + rx1 * radius1;
			var my = y2 - ry1 * radius1;
			var _g5 = 0;
			var _g14 = sides1;
			while(_g5 < _g14) {
				var i4 = _g5++;
				bx8 = x2 + radius1 * Math.sin(theta21);
				by8 = y2 + radius1 * Math.cos(theta21);
				theta21 += step8;
				cx8 = x2 + radius1 * Math.sin(theta21);
				cy8 = y2 + radius1 * Math.cos(theta21);
				drawType1.triangle(mx,my,0,bx8,by8,0,cx8,cy8,0);
				var m10 = trilateral2_Shaper.transformMatrix;
				if(m10 != null) {
					drawType1.transform(m10);
				}
				drawType1.next();
			}
			len1 = sides1;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx2 = rx;
			var ry2 = ry;
			var sides2 = sides;
			var omega1 = 0.;
			if(omega1 == null) {
				omega1 = 0.;
			}
			if(sides2 == null) {
				sides2 = 36;
			}
			var pi6 = Math.PI;
			var theta22 = pi6 / 2;
			var step9 = pi6 * 2 / sides2;
			theta22 -= step9 / 2 + omega1;
			var bx9 = 0;
			var by9 = 0;
			var cx9 = 0;
			var cy9 = 0;
			if(rx2 > 1.) {
				rx2 = 1;
			}
			if(rx2 < -1.) {
				rx2 = -1;
			}
			if(ry2 > 1.) {
				ry2 = 1;
			}
			if(ry2 < -1.) {
				ry2 = -1;
			}
			var mx1 = x2 + rx2 * radius1;
			var my1 = y2 - ry2 * radius1;
			var dx4 = x2 + radius1 * Math.sin(theta22);
			var dy4 = y2 + radius1 * Math.cos(theta22);
			var _g6 = 0;
			var _g15 = sides2 - 1;
			while(_g6 < _g15) {
				var i5 = _g6++;
				bx9 = x2 + radius1 * Math.sin(theta22);
				by9 = y2 + radius1 * Math.cos(theta22);
				theta22 += step9;
				cx9 = x2 + radius1 * Math.sin(theta22);
				cy9 = y2 + radius1 * Math.cos(theta22);
				drawType1.triangle(mx1,my1,0,bx9,by9,0,cx9,cy9,0);
				var m11 = trilateral2_Shaper.transformMatrix;
				if(m11 != null) {
					drawType1.transform(m11);
				}
				drawType1.next();
			}
			drawType1.triangle(mx1,my1,0,cx9,cy9,0,dx4,dy4,0);
			var m12 = trilateral2_Shaper.transformMatrix;
			if(m12 != null) {
				drawType1.transform(m12);
			}
			drawType1.next();
			len1 = sides2;
		}
		var k = 1;
		var arrEnd = arr.length - 1;
		var end1 = start1 + len1 - 1;
		var arr_ = arr.slice();
		var _g7 = 0;
		var _g16 = len1 - 1;
		while(_g7 < _g16) {
			var j = _g7++;
			this88.colorType.cornerColors(s01.color,arr_[k - 1],arr_[k]);
			++k;
			if(k > arrEnd) {
				k = 1;
				arr_.reverse();
			}
		}
		this88.colorType.cornerColors(s01.color,arr_[k - 1],arr[0]);
		var startEnd = new trilateral2_IndexRange(start1,end1);
		var c0 = startEnd;
		var s110 = rs1.clone();
		s110.x += 25;
		s110.y -= 35;
		var arr1 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx3 = -0.25;
		var ry3 = 0.25;
		var sides3 = 47;
		if(sides3 == null) {
			sides3 = 36;
		}
		if(ry3 == null) {
			ry3 = 0;
		}
		if(rx3 == null) {
			rx3 = 0;
		}
		var start2 = this88.drawType.get_size();
		var drawType2 = this88.drawType;
		var x3 = s110.x;
		var y3 = s110.y;
		var radius2 = s110.radius;
		var len2;
		if((sides3 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx4 = rx3;
			var ry4 = ry3;
			var sides4 = sides3;
			var omega2 = 0.;
			if(omega2 == null) {
				omega2 = 0.;
			}
			if(sides4 == null) {
				sides4 = 36;
			}
			var pi7 = Math.PI;
			var theta23 = pi7 / 2 + omega2;
			var step10 = pi7 * 2 / sides4;
			var bx10;
			var by10;
			var cx10;
			var cy10;
			if(rx4 > 1.) {
				rx4 = 1;
			}
			if(rx4 < -1.) {
				rx4 = -1;
			}
			if(ry4 > 1.) {
				ry4 = 1;
			}
			if(ry4 < -1.) {
				ry4 = -1;
			}
			var mx2 = x3 + rx4 * radius2;
			var my2 = y3 - ry4 * radius2;
			var _g8 = 0;
			var _g17 = sides4;
			while(_g8 < _g17) {
				var i6 = _g8++;
				bx10 = x3 + radius2 * Math.sin(theta23);
				by10 = y3 + radius2 * Math.cos(theta23);
				theta23 += step10;
				cx10 = x3 + radius2 * Math.sin(theta23);
				cy10 = y3 + radius2 * Math.cos(theta23);
				drawType2.triangle(mx2,my2,0,bx10,by10,0,cx10,cy10,0);
				var m13 = trilateral2_Shaper.transformMatrix;
				if(m13 != null) {
					drawType2.transform(m13);
				}
				drawType2.next();
			}
			len2 = sides4;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides3 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx5 = rx3;
			var ry5 = ry3;
			var sides5 = sides3;
			var omega3 = 0.;
			if(omega3 == null) {
				omega3 = 0.;
			}
			if(sides5 == null) {
				sides5 = 36;
			}
			var pi8 = Math.PI;
			var theta24 = pi8 / 2;
			var step11 = pi8 * 2 / sides5;
			theta24 -= step11 / 2 + omega3;
			var bx11 = 0;
			var by11 = 0;
			var cx11 = 0;
			var cy11 = 0;
			if(rx5 > 1.) {
				rx5 = 1;
			}
			if(rx5 < -1.) {
				rx5 = -1;
			}
			if(ry5 > 1.) {
				ry5 = 1;
			}
			if(ry5 < -1.) {
				ry5 = -1;
			}
			var mx3 = x3 + rx5 * radius2;
			var my3 = y3 - ry5 * radius2;
			var dx5 = x3 + radius2 * Math.sin(theta24);
			var dy5 = y3 + radius2 * Math.cos(theta24);
			var _g9 = 0;
			var _g18 = sides5 - 1;
			while(_g9 < _g18) {
				var i7 = _g9++;
				bx11 = x3 + radius2 * Math.sin(theta24);
				by11 = y3 + radius2 * Math.cos(theta24);
				theta24 += step11;
				cx11 = x3 + radius2 * Math.sin(theta24);
				cy11 = y3 + radius2 * Math.cos(theta24);
				drawType2.triangle(mx3,my3,0,bx11,by11,0,cx11,cy11,0);
				var m14 = trilateral2_Shaper.transformMatrix;
				if(m14 != null) {
					drawType2.transform(m14);
				}
				drawType2.next();
			}
			drawType2.triangle(mx3,my3,0,cx11,cy11,0,dx5,dy5,0);
			var m15 = trilateral2_Shaper.transformMatrix;
			if(m15 != null) {
				drawType2.transform(m15);
			}
			drawType2.next();
			len2 = sides5;
		}
		var k1 = 1;
		var arrEnd1 = arr1.length - 1;
		var end2 = start2 + len2 - 1;
		var arr_1 = arr1.slice();
		var _g10 = 0;
		var _g19 = len2 - 1;
		while(_g10 < _g19) {
			var j1 = _g10++;
			this88.colorType.cornerColors(s110.color,arr_1[k1 - 1],arr_1[k1]);
			++k1;
			if(k1 > arrEnd1) {
				k1 = 1;
				arr_1.reverse();
			}
		}
		this88.colorType.cornerColors(s110.color,arr_1[k1 - 1],arr1[0]);
		var startEnd1 = new trilateral2_IndexRange(start2,end2);
		var c11 = startEnd1;
		var s22 = rs1.clone();
		s22.x -= 25;
		s22.y += 35;
		var arr2 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx6 = -0.25;
		var ry6 = 0.25;
		var sides6 = 47;
		if(sides6 == null) {
			sides6 = 36;
		}
		if(ry6 == null) {
			ry6 = 0;
		}
		if(rx6 == null) {
			rx6 = 0;
		}
		var start3 = this88.drawType.get_size();
		var drawType3 = this88.drawType;
		var x4 = s22.x;
		var y4 = s22.y;
		var radius3 = s22.radius;
		var len3;
		if((sides6 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx7 = rx6;
			var ry7 = ry6;
			var sides7 = sides6;
			var omega4 = 0.;
			if(omega4 == null) {
				omega4 = 0.;
			}
			if(sides7 == null) {
				sides7 = 36;
			}
			var pi9 = Math.PI;
			var theta25 = pi9 / 2 + omega4;
			var step12 = pi9 * 2 / sides7;
			var bx12;
			var by12;
			var cx12;
			var cy12;
			if(rx7 > 1.) {
				rx7 = 1;
			}
			if(rx7 < -1.) {
				rx7 = -1;
			}
			if(ry7 > 1.) {
				ry7 = 1;
			}
			if(ry7 < -1.) {
				ry7 = -1;
			}
			var mx4 = x4 + rx7 * radius3;
			var my4 = y4 - ry7 * radius3;
			var _g20 = 0;
			var _g110 = sides7;
			while(_g20 < _g110) {
				var i8 = _g20++;
				bx12 = x4 + radius3 * Math.sin(theta25);
				by12 = y4 + radius3 * Math.cos(theta25);
				theta25 += step12;
				cx12 = x4 + radius3 * Math.sin(theta25);
				cy12 = y4 + radius3 * Math.cos(theta25);
				drawType3.triangle(mx4,my4,0,bx12,by12,0,cx12,cy12,0);
				var m16 = trilateral2_Shaper.transformMatrix;
				if(m16 != null) {
					drawType3.transform(m16);
				}
				drawType3.next();
			}
			len3 = sides7;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides6 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx8 = rx6;
			var ry8 = ry6;
			var sides8 = sides6;
			var omega5 = 0.;
			if(omega5 == null) {
				omega5 = 0.;
			}
			if(sides8 == null) {
				sides8 = 36;
			}
			var pi10 = Math.PI;
			var theta26 = pi10 / 2;
			var step13 = pi10 * 2 / sides8;
			theta26 -= step13 / 2 + omega5;
			var bx13 = 0;
			var by13 = 0;
			var cx13 = 0;
			var cy13 = 0;
			if(rx8 > 1.) {
				rx8 = 1;
			}
			if(rx8 < -1.) {
				rx8 = -1;
			}
			if(ry8 > 1.) {
				ry8 = 1;
			}
			if(ry8 < -1.) {
				ry8 = -1;
			}
			var mx5 = x4 + rx8 * radius3;
			var my5 = y4 - ry8 * radius3;
			var dx6 = x4 + radius3 * Math.sin(theta26);
			var dy6 = y4 + radius3 * Math.cos(theta26);
			var _g21 = 0;
			var _g111 = sides8 - 1;
			while(_g21 < _g111) {
				var i9 = _g21++;
				bx13 = x4 + radius3 * Math.sin(theta26);
				by13 = y4 + radius3 * Math.cos(theta26);
				theta26 += step13;
				cx13 = x4 + radius3 * Math.sin(theta26);
				cy13 = y4 + radius3 * Math.cos(theta26);
				drawType3.triangle(mx5,my5,0,bx13,by13,0,cx13,cy13,0);
				var m17 = trilateral2_Shaper.transformMatrix;
				if(m17 != null) {
					drawType3.transform(m17);
				}
				drawType3.next();
			}
			drawType3.triangle(mx5,my5,0,cx13,cy13,0,dx6,dy6,0);
			var m18 = trilateral2_Shaper.transformMatrix;
			if(m18 != null) {
				drawType3.transform(m18);
			}
			drawType3.next();
			len3 = sides8;
		}
		var k2 = 1;
		var arrEnd2 = arr2.length - 1;
		var end3 = start3 + len3 - 1;
		var arr_2 = arr2.slice();
		var _g22 = 0;
		var _g112 = len3 - 1;
		while(_g22 < _g112) {
			var j2 = _g22++;
			this88.colorType.cornerColors(s22.color,arr_2[k2 - 1],arr_2[k2]);
			++k2;
			if(k2 > arrEnd2) {
				k2 = 1;
				arr_2.reverse();
			}
		}
		this88.colorType.cornerColors(s22.color,arr_2[k2 - 1],arr2[0]);
		var startEnd2 = new trilateral2_IndexRange(start3,end3);
		var c21 = startEnd2;
		var s31 = rs1.clone();
		s31.x += 25;
		s31.y += 35;
		var arr3 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx9 = -0.25;
		var ry9 = 0.25;
		var sides9 = 47;
		if(sides9 == null) {
			sides9 = 36;
		}
		if(ry9 == null) {
			ry9 = 0;
		}
		if(rx9 == null) {
			rx9 = 0;
		}
		var start4 = this88.drawType.get_size();
		var drawType4 = this88.drawType;
		var x5 = s31.x;
		var y5 = s31.y;
		var radius4 = s31.radius;
		var len4;
		if((sides9 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx10 = rx9;
			var ry10 = ry9;
			var sides10 = sides9;
			var omega6 = 0.;
			if(omega6 == null) {
				omega6 = 0.;
			}
			if(sides10 == null) {
				sides10 = 36;
			}
			var pi11 = Math.PI;
			var theta27 = pi11 / 2 + omega6;
			var step14 = pi11 * 2 / sides10;
			var bx14;
			var by14;
			var cx14;
			var cy14;
			if(rx10 > 1.) {
				rx10 = 1;
			}
			if(rx10 < -1.) {
				rx10 = -1;
			}
			if(ry10 > 1.) {
				ry10 = 1;
			}
			if(ry10 < -1.) {
				ry10 = -1;
			}
			var mx6 = x5 + rx10 * radius4;
			var my6 = y5 - ry10 * radius4;
			var _g23 = 0;
			var _g113 = sides10;
			while(_g23 < _g113) {
				var i10 = _g23++;
				bx14 = x5 + radius4 * Math.sin(theta27);
				by14 = y5 + radius4 * Math.cos(theta27);
				theta27 += step14;
				cx14 = x5 + radius4 * Math.sin(theta27);
				cy14 = y5 + radius4 * Math.cos(theta27);
				drawType4.triangle(mx6,my6,0,bx14,by14,0,cx14,cy14,0);
				var m19 = trilateral2_Shaper.transformMatrix;
				if(m19 != null) {
					drawType4.transform(m19);
				}
				drawType4.next();
			}
			len4 = sides10;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides9 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx11 = rx9;
			var ry11 = ry9;
			var sides11 = sides9;
			var omega7 = 0.;
			if(omega7 == null) {
				omega7 = 0.;
			}
			if(sides11 == null) {
				sides11 = 36;
			}
			var pi12 = Math.PI;
			var theta28 = pi12 / 2;
			var step15 = pi12 * 2 / sides11;
			theta28 -= step15 / 2 + omega7;
			var bx15 = 0;
			var by15 = 0;
			var cx15 = 0;
			var cy15 = 0;
			if(rx11 > 1.) {
				rx11 = 1;
			}
			if(rx11 < -1.) {
				rx11 = -1;
			}
			if(ry11 > 1.) {
				ry11 = 1;
			}
			if(ry11 < -1.) {
				ry11 = -1;
			}
			var mx7 = x5 + rx11 * radius4;
			var my7 = y5 - ry11 * radius4;
			var dx7 = x5 + radius4 * Math.sin(theta28);
			var dy7 = y5 + radius4 * Math.cos(theta28);
			var _g24 = 0;
			var _g114 = sides11 - 1;
			while(_g24 < _g114) {
				var i11 = _g24++;
				bx15 = x5 + radius4 * Math.sin(theta28);
				by15 = y5 + radius4 * Math.cos(theta28);
				theta28 += step15;
				cx15 = x5 + radius4 * Math.sin(theta28);
				cy15 = y5 + radius4 * Math.cos(theta28);
				drawType4.triangle(mx7,my7,0,bx15,by15,0,cx15,cy15,0);
				var m20 = trilateral2_Shaper.transformMatrix;
				if(m20 != null) {
					drawType4.transform(m20);
				}
				drawType4.next();
			}
			drawType4.triangle(mx7,my7,0,cx15,cy15,0,dx7,dy7,0);
			var m21 = trilateral2_Shaper.transformMatrix;
			if(m21 != null) {
				drawType4.transform(m21);
			}
			drawType4.next();
			len4 = sides11;
		}
		var k3 = 1;
		var arrEnd3 = arr3.length - 1;
		var end4 = start4 + len4 - 1;
		var arr_3 = arr3.slice();
		var _g25 = 0;
		var _g115 = len4 - 1;
		while(_g25 < _g115) {
			var j3 = _g25++;
			this88.colorType.cornerColors(s31.color,arr_3[k3 - 1],arr_3[k3]);
			++k3;
			if(k3 > arrEnd3) {
				k3 = 1;
				arr_3.reverse();
			}
		}
		this88.colorType.cornerColors(s31.color,arr_3[k3 - 1],arr3[0]);
		var startEnd3 = new trilateral2_IndexRange(start4,end4);
		var c31 = startEnd3;
		var s41 = rs1.clone();
		s41.x -= 25;
		var arr4 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx12 = -0.25;
		var ry12 = 0.25;
		var sides12 = 47;
		if(sides12 == null) {
			sides12 = 36;
		}
		if(ry12 == null) {
			ry12 = 0;
		}
		if(rx12 == null) {
			rx12 = 0;
		}
		var start5 = this88.drawType.get_size();
		var drawType5 = this88.drawType;
		var x6 = s41.x;
		var y6 = s41.y;
		var radius5 = s41.radius;
		var len5;
		if((sides12 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx13 = rx12;
			var ry13 = ry12;
			var sides13 = sides12;
			var omega8 = 0.;
			if(omega8 == null) {
				omega8 = 0.;
			}
			if(sides13 == null) {
				sides13 = 36;
			}
			var pi13 = Math.PI;
			var theta29 = pi13 / 2 + omega8;
			var step16 = pi13 * 2 / sides13;
			var bx16;
			var by16;
			var cx16;
			var cy16;
			if(rx13 > 1.) {
				rx13 = 1;
			}
			if(rx13 < -1.) {
				rx13 = -1;
			}
			if(ry13 > 1.) {
				ry13 = 1;
			}
			if(ry13 < -1.) {
				ry13 = -1;
			}
			var mx8 = x6 + rx13 * radius5;
			var my8 = y6 - ry13 * radius5;
			var _g26 = 0;
			var _g116 = sides13;
			while(_g26 < _g116) {
				var i12 = _g26++;
				bx16 = x6 + radius5 * Math.sin(theta29);
				by16 = y6 + radius5 * Math.cos(theta29);
				theta29 += step16;
				cx16 = x6 + radius5 * Math.sin(theta29);
				cy16 = y6 + radius5 * Math.cos(theta29);
				drawType5.triangle(mx8,my8,0,bx16,by16,0,cx16,cy16,0);
				var m22 = trilateral2_Shaper.transformMatrix;
				if(m22 != null) {
					drawType5.transform(m22);
				}
				drawType5.next();
			}
			len5 = sides13;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides12 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx14 = rx12;
			var ry14 = ry12;
			var sides14 = sides12;
			var omega9 = 0.;
			if(omega9 == null) {
				omega9 = 0.;
			}
			if(sides14 == null) {
				sides14 = 36;
			}
			var pi14 = Math.PI;
			var theta30 = pi14 / 2;
			var step17 = pi14 * 2 / sides14;
			theta30 -= step17 / 2 + omega9;
			var bx17 = 0;
			var by17 = 0;
			var cx17 = 0;
			var cy17 = 0;
			if(rx14 > 1.) {
				rx14 = 1;
			}
			if(rx14 < -1.) {
				rx14 = -1;
			}
			if(ry14 > 1.) {
				ry14 = 1;
			}
			if(ry14 < -1.) {
				ry14 = -1;
			}
			var mx9 = x6 + rx14 * radius5;
			var my9 = y6 - ry14 * radius5;
			var dx8 = x6 + radius5 * Math.sin(theta30);
			var dy8 = y6 + radius5 * Math.cos(theta30);
			var _g27 = 0;
			var _g117 = sides14 - 1;
			while(_g27 < _g117) {
				var i13 = _g27++;
				bx17 = x6 + radius5 * Math.sin(theta30);
				by17 = y6 + radius5 * Math.cos(theta30);
				theta30 += step17;
				cx17 = x6 + radius5 * Math.sin(theta30);
				cy17 = y6 + radius5 * Math.cos(theta30);
				drawType5.triangle(mx9,my9,0,bx17,by17,0,cx17,cy17,0);
				var m23 = trilateral2_Shaper.transformMatrix;
				if(m23 != null) {
					drawType5.transform(m23);
				}
				drawType5.next();
			}
			drawType5.triangle(mx9,my9,0,cx17,cy17,0,dx8,dy8,0);
			var m24 = trilateral2_Shaper.transformMatrix;
			if(m24 != null) {
				drawType5.transform(m24);
			}
			drawType5.next();
			len5 = sides14;
		}
		var k4 = 1;
		var arrEnd4 = arr4.length - 1;
		var end5 = start5 + len5 - 1;
		var arr_4 = arr4.slice();
		var _g28 = 0;
		var _g118 = len5 - 1;
		while(_g28 < _g118) {
			var j4 = _g28++;
			this88.colorType.cornerColors(s41.color,arr_4[k4 - 1],arr_4[k4]);
			++k4;
			if(k4 > arrEnd4) {
				k4 = 1;
				arr_4.reverse();
			}
		}
		this88.colorType.cornerColors(s41.color,arr_4[k4 - 1],arr4[0]);
		var startEnd4 = new trilateral2_IndexRange(start5,end5);
		var c41 = startEnd4;
		var s51 = rs1.clone();
		s51.x += 25;
		var arr5 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx15 = -0.25;
		var ry15 = 0.25;
		var sides15 = 47;
		if(sides15 == null) {
			sides15 = 36;
		}
		if(ry15 == null) {
			ry15 = 0;
		}
		if(rx15 == null) {
			rx15 = 0;
		}
		var start6 = this88.drawType.get_size();
		var drawType6 = this88.drawType;
		var x7 = s51.x;
		var y7 = s51.y;
		var radius6 = s51.radius;
		var len6;
		if((sides15 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx16 = rx15;
			var ry16 = ry15;
			var sides16 = sides15;
			var omega10 = 0.;
			if(omega10 == null) {
				omega10 = 0.;
			}
			if(sides16 == null) {
				sides16 = 36;
			}
			var pi15 = Math.PI;
			var theta31 = pi15 / 2 + omega10;
			var step18 = pi15 * 2 / sides16;
			var bx18;
			var by18;
			var cx18;
			var cy18;
			if(rx16 > 1.) {
				rx16 = 1;
			}
			if(rx16 < -1.) {
				rx16 = -1;
			}
			if(ry16 > 1.) {
				ry16 = 1;
			}
			if(ry16 < -1.) {
				ry16 = -1;
			}
			var mx10 = x7 + rx16 * radius6;
			var my10 = y7 - ry16 * radius6;
			var _g29 = 0;
			var _g119 = sides16;
			while(_g29 < _g119) {
				var i14 = _g29++;
				bx18 = x7 + radius6 * Math.sin(theta31);
				by18 = y7 + radius6 * Math.cos(theta31);
				theta31 += step18;
				cx18 = x7 + radius6 * Math.sin(theta31);
				cy18 = y7 + radius6 * Math.cos(theta31);
				drawType6.triangle(mx10,my10,0,bx18,by18,0,cx18,cy18,0);
				var m25 = trilateral2_Shaper.transformMatrix;
				if(m25 != null) {
					drawType6.transform(m25);
				}
				drawType6.next();
			}
			len6 = sides16;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides15 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx17 = rx15;
			var ry17 = ry15;
			var sides17 = sides15;
			var omega11 = 0.;
			if(omega11 == null) {
				omega11 = 0.;
			}
			if(sides17 == null) {
				sides17 = 36;
			}
			var pi16 = Math.PI;
			var theta32 = pi16 / 2;
			var step19 = pi16 * 2 / sides17;
			theta32 -= step19 / 2 + omega11;
			var bx19 = 0;
			var by19 = 0;
			var cx19 = 0;
			var cy19 = 0;
			if(rx17 > 1.) {
				rx17 = 1;
			}
			if(rx17 < -1.) {
				rx17 = -1;
			}
			if(ry17 > 1.) {
				ry17 = 1;
			}
			if(ry17 < -1.) {
				ry17 = -1;
			}
			var mx11 = x7 + rx17 * radius6;
			var my11 = y7 - ry17 * radius6;
			var dx9 = x7 + radius6 * Math.sin(theta32);
			var dy9 = y7 + radius6 * Math.cos(theta32);
			var _g30 = 0;
			var _g120 = sides17 - 1;
			while(_g30 < _g120) {
				var i15 = _g30++;
				bx19 = x7 + radius6 * Math.sin(theta32);
				by19 = y7 + radius6 * Math.cos(theta32);
				theta32 += step19;
				cx19 = x7 + radius6 * Math.sin(theta32);
				cy19 = y7 + radius6 * Math.cos(theta32);
				drawType6.triangle(mx11,my11,0,bx19,by19,0,cx19,cy19,0);
				var m26 = trilateral2_Shaper.transformMatrix;
				if(m26 != null) {
					drawType6.transform(m26);
				}
				drawType6.next();
			}
			drawType6.triangle(mx11,my11,0,cx19,cy19,0,dx9,dy9,0);
			var m27 = trilateral2_Shaper.transformMatrix;
			if(m27 != null) {
				drawType6.transform(m27);
			}
			drawType6.next();
			len6 = sides17;
		}
		var k5 = 1;
		var arrEnd5 = arr5.length - 1;
		var end6 = start6 + len6 - 1;
		var arr_5 = arr5.slice();
		var _g31 = 0;
		var _g121 = len6 - 1;
		while(_g31 < _g121) {
			var j5 = _g31++;
			this88.colorType.cornerColors(s51.color,arr_5[k5 - 1],arr_5[k5]);
			++k5;
			if(k5 > arrEnd5) {
				k5 = 1;
				arr_5.reverse();
			}
		}
		this88.colorType.cornerColors(s51.color,arr_5[k5 - 1],arr5[0]);
		var startEnd5 = new trilateral2_IndexRange(start6,end6);
		var c5 = startEnd5;
		var s111 = new trilateral2_IndexRange(c0.start,c5.end);
		var s23 = new trilateral2_IndexRange(s0.start,s111.end);
		this.spots.drawType.transformRange(trans_5,s23.start,s23.end);
		var s61 = s23;
		var this89 = this.spots;
		var rs2 = this.dieShape;
		var start7 = this89.drawType.get_size();
		var drawType7 = this89.drawType;
		var x8 = rs2.x - rs2.radius;
		var y8 = rs2.y - rs2.radius;
		var width1 = rs2.radius * 2;
		var height1 = rs2.radius * 2;
		var radius7 = this89.rounded;
		var pi17 = Math.PI;
		var pi_21 = Math.PI / 2;
		var ax4 = x8 + radius7;
		var ay4 = y8 + radius7;
		var bx20 = x8 + width1 - radius7;
		var by20 = y8 + radius7;
		var cx20 = bx20;
		var cy20 = y8 + height1 - radius7;
		var dx10 = ax4;
		var dy10 = cy20;
		var count1 = 0;
		var ax5 = ax4;
		var ay5 = y8;
		var bx21 = ax4 + (width1 - radius7 * 2);
		var by21 = ay5;
		var cx21 = bx21;
		var cy21 = ay5 + height1;
		var dx11 = ax4;
		var dy11 = cy21;
		drawType7.triangle(ax5,ay5,0,bx21,by21,0,dx11,dy11,0);
		var m28 = trilateral2_Shaper.transformMatrix;
		if(m28 != null) {
			drawType7.transform(m28);
		}
		drawType7.next();
		drawType7.triangle(bx21,by21,0,cx21,cy21,0,dx11,dy11,0);
		var m29 = trilateral2_Shaper.transformMatrix;
		if(m29 != null) {
			drawType7.transform(m29);
		}
		drawType7.next();
		count1 += 2;
		var dimY1 = height1 - 2 * radius7;
		var ax6 = x8;
		var ay6 = ay4;
		var bx22 = x8 + radius7;
		var by22 = ay6;
		var cx22 = bx22;
		var cy22 = ay6 + dimY1;
		var dx12 = x8;
		var dy12 = cy22;
		drawType7.triangle(ax6,ay6,0,bx22,by22,0,dx12,dy12,0);
		var m30 = trilateral2_Shaper.transformMatrix;
		if(m30 != null) {
			drawType7.transform(m30);
		}
		drawType7.next();
		drawType7.triangle(bx22,by22,0,cx22,cy22,0,dx12,dy12,0);
		var m31 = trilateral2_Shaper.transformMatrix;
		if(m31 != null) {
			drawType7.transform(m31);
		}
		drawType7.next();
		count1 += 2;
		var ax7 = bx20;
		var ay7 = by20;
		var bx23 = bx20 + radius7;
		var by23 = ay7;
		var cx23 = bx23;
		var cy23 = ay7 + dimY1;
		var dx13 = bx20;
		var dy13 = cy23;
		drawType7.triangle(ax7,ay7,0,bx23,by23,0,dx13,dy13,0);
		var m32 = trilateral2_Shaper.transformMatrix;
		if(m32 != null) {
			drawType7.transform(m32);
		}
		drawType7.next();
		drawType7.triangle(bx23,by23,0,cx23,cy23,0,dx13,dy13,0);
		var m33 = trilateral2_Shaper.transformMatrix;
		if(m33 != null) {
			drawType7.transform(m33);
		}
		drawType7.next();
		count1 += 2;
		var beta1 = -pi17;
		var gamma2 = -pi_21;
		var pi18 = Math.PI;
		var step20 = pi18 * 2 / 36;
		var dif20;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f32;
			if(beta1 >= 0 && beta1 > Math.PI) {
				f32 = beta1;
			} else {
				var a32 = beta1 % (2 * Math.PI);
				f32 = a32 >= 0 ? a32 : a32 + 2 * Math.PI;
			}
			var this90 = f32;
			var za16 = this90;
			var f33;
			if(gamma2 >= 0 && gamma2 > Math.PI) {
				f33 = gamma2;
			} else {
				var a33 = gamma2 % (2 * Math.PI);
				f33 = a33 >= 0 ? a33 : a33 + 2 * Math.PI;
			}
			var this91 = f33;
			var zb16 = this91;
			var fa16 = za16;
			var fb16 = zb16;
			var theta33 = Math.abs(fa16 - fb16);
			var clockwise16 = fa16 < fb16;
			var dif21 = clockwise16 ? theta33 : -theta33;
			dif20 = dif21 > 0 ? dif21 : 2 * Math.PI + dif21;
			break;
		case 1:
			var f34;
			if(beta1 >= 0 && beta1 > Math.PI) {
				f34 = beta1;
			} else {
				var a34 = beta1 % (2 * Math.PI);
				f34 = a34 >= 0 ? a34 : a34 + 2 * Math.PI;
			}
			var this92 = f34;
			var za17 = this92;
			var f35;
			if(gamma2 >= 0 && gamma2 > Math.PI) {
				f35 = gamma2;
			} else {
				var a35 = gamma2 % (2 * Math.PI);
				f35 = a35 >= 0 ? a35 : a35 + 2 * Math.PI;
			}
			var this93 = f35;
			var zb17 = this93;
			var fa17 = za17;
			var fb17 = zb17;
			var theta34 = Math.abs(fa17 - fb17);
			var clockwise17 = fa17 < fb17;
			var dif22 = clockwise17 ? theta34 : -theta34;
			dif20 = dif22 < 0 ? dif22 : -2 * Math.PI + dif22;
			break;
		case 2:
			var f36;
			if(beta1 >= 0 && beta1 > Math.PI) {
				f36 = beta1;
			} else {
				var a36 = beta1 % (2 * Math.PI);
				f36 = a36 >= 0 ? a36 : a36 + 2 * Math.PI;
			}
			var this94 = f36;
			var za18 = this94;
			var f37;
			if(gamma2 >= 0 && gamma2 > Math.PI) {
				f37 = gamma2;
			} else {
				var a37 = gamma2 % (2 * Math.PI);
				f37 = a37 >= 0 ? a37 : a37 + 2 * Math.PI;
			}
			var this95 = f37;
			var zb18 = this95;
			var fa18 = za18;
			var fb18 = zb18;
			var theta35 = Math.abs(fa18 - fb18);
			var smallest4 = theta35 <= Math.PI;
			var clockwise18 = fa18 < fb18;
			var dif23 = clockwise18 ? theta35 : -theta35;
			dif20 = smallest4 ? dif23 : clockwise18 ? -(2 * Math.PI - theta35) : 2 * Math.PI - theta35;
			break;
		case 3:
			var f38;
			if(beta1 >= 0 && beta1 > Math.PI) {
				f38 = beta1;
			} else {
				var a38 = beta1 % (2 * Math.PI);
				f38 = a38 >= 0 ? a38 : a38 + 2 * Math.PI;
			}
			var this96 = f38;
			var za19 = this96;
			var f39;
			if(gamma2 >= 0 && gamma2 > Math.PI) {
				f39 = gamma2;
			} else {
				var a39 = gamma2 % (2 * Math.PI);
				f39 = a39 >= 0 ? a39 : a39 + 2 * Math.PI;
			}
			var this97 = f39;
			var zb19 = this97;
			var fa19 = za19;
			var fb19 = zb19;
			var theta36 = Math.abs(fa19 - fb19);
			var largest4 = theta36 > Math.PI;
			var clockwise19 = fa19 < fb19;
			var dif24 = clockwise19 ? theta36 : -theta36;
			dif20 = largest4 ? dif24 : clockwise19 ? -(2 * Math.PI - theta36) : 2 * Math.PI - theta36;
			break;
		}
		var positive4 = dif20 >= 0;
		var totalSteps4 = Math.ceil(Math.abs(dif20) / step20);
		var step21 = dif20 / totalSteps4;
		var angle4 = beta1;
		var cx24;
		var cy24;
		var bx24 = 0;
		var by24 = 0;
		var _g32 = 0;
		var _g122 = totalSteps4 + 1;
		while(_g32 < _g122) {
			var i16 = _g32++;
			cx24 = ax4 + radius7 * Math.sin(angle4);
			cy24 = ay4 + radius7 * Math.cos(angle4);
			if(i16 != 0) {
				drawType7.triangle(ax4,ay4,0,bx24,by24,0,cx24,cy24,0);
				var m34 = trilateral2_Shaper.transformMatrix;
				if(m34 != null) {
					drawType7.transform(m34);
				}
				drawType7.next();
			}
			angle4 += step21;
			bx24 = cx24;
			by24 = cy24;
		}
		count1 += totalSteps4;
		var pi19 = Math.PI;
		var step22 = pi19 * 2 / 36;
		var dif25;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f40;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f40 = pi_21;
			} else {
				var a40 = pi_21 % (2 * Math.PI);
				f40 = a40 >= 0 ? a40 : a40 + 2 * Math.PI;
			}
			var this98 = f40;
			var za20 = this98;
			var f41;
			if(pi17 >= 0 && pi17 > Math.PI) {
				f41 = pi17;
			} else {
				var a41 = pi17 % (2 * Math.PI);
				f41 = a41 >= 0 ? a41 : a41 + 2 * Math.PI;
			}
			var this99 = f41;
			var zb20 = this99;
			var fa20 = za20;
			var fb20 = zb20;
			var theta37 = Math.abs(fa20 - fb20);
			var clockwise20 = fa20 < fb20;
			var dif26 = clockwise20 ? theta37 : -theta37;
			dif25 = dif26 > 0 ? dif26 : 2 * Math.PI + dif26;
			break;
		case 1:
			var f42;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f42 = pi_21;
			} else {
				var a42 = pi_21 % (2 * Math.PI);
				f42 = a42 >= 0 ? a42 : a42 + 2 * Math.PI;
			}
			var this100 = f42;
			var za21 = this100;
			var f43;
			if(pi17 >= 0 && pi17 > Math.PI) {
				f43 = pi17;
			} else {
				var a43 = pi17 % (2 * Math.PI);
				f43 = a43 >= 0 ? a43 : a43 + 2 * Math.PI;
			}
			var this101 = f43;
			var zb21 = this101;
			var fa21 = za21;
			var fb21 = zb21;
			var theta38 = Math.abs(fa21 - fb21);
			var clockwise21 = fa21 < fb21;
			var dif27 = clockwise21 ? theta38 : -theta38;
			dif25 = dif27 < 0 ? dif27 : -2 * Math.PI + dif27;
			break;
		case 2:
			var f44;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f44 = pi_21;
			} else {
				var a44 = pi_21 % (2 * Math.PI);
				f44 = a44 >= 0 ? a44 : a44 + 2 * Math.PI;
			}
			var this102 = f44;
			var za22 = this102;
			var f45;
			if(pi17 >= 0 && pi17 > Math.PI) {
				f45 = pi17;
			} else {
				var a45 = pi17 % (2 * Math.PI);
				f45 = a45 >= 0 ? a45 : a45 + 2 * Math.PI;
			}
			var this103 = f45;
			var zb22 = this103;
			var fa22 = za22;
			var fb22 = zb22;
			var theta39 = Math.abs(fa22 - fb22);
			var smallest5 = theta39 <= Math.PI;
			var clockwise22 = fa22 < fb22;
			var dif28 = clockwise22 ? theta39 : -theta39;
			dif25 = smallest5 ? dif28 : clockwise22 ? -(2 * Math.PI - theta39) : 2 * Math.PI - theta39;
			break;
		case 3:
			var f46;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f46 = pi_21;
			} else {
				var a46 = pi_21 % (2 * Math.PI);
				f46 = a46 >= 0 ? a46 : a46 + 2 * Math.PI;
			}
			var this104 = f46;
			var za23 = this104;
			var f47;
			if(pi17 >= 0 && pi17 > Math.PI) {
				f47 = pi17;
			} else {
				var a47 = pi17 % (2 * Math.PI);
				f47 = a47 >= 0 ? a47 : a47 + 2 * Math.PI;
			}
			var this105 = f47;
			var zb23 = this105;
			var fa23 = za23;
			var fb23 = zb23;
			var theta40 = Math.abs(fa23 - fb23);
			var largest5 = theta40 > Math.PI;
			var clockwise23 = fa23 < fb23;
			var dif29 = clockwise23 ? theta40 : -theta40;
			dif25 = largest5 ? dif29 : clockwise23 ? -(2 * Math.PI - theta40) : 2 * Math.PI - theta40;
			break;
		}
		var positive5 = dif25 >= 0;
		var totalSteps5 = Math.ceil(Math.abs(dif25) / step22);
		var step23 = dif25 / totalSteps5;
		var angle5 = pi_21;
		var cx25;
		var cy25;
		var bx25 = 0;
		var by25 = 0;
		var _g33 = 0;
		var _g123 = totalSteps5 + 1;
		while(_g33 < _g123) {
			var i17 = _g33++;
			cx25 = bx20 + radius7 * Math.sin(angle5);
			cy25 = by20 + radius7 * Math.cos(angle5);
			if(i17 != 0) {
				drawType7.triangle(bx20,by20,0,bx25,by25,0,cx25,cy25,0);
				var m35 = trilateral2_Shaper.transformMatrix;
				if(m35 != null) {
					drawType7.transform(m35);
				}
				drawType7.next();
			}
			angle5 += step23;
			bx25 = cx25;
			by25 = cy25;
		}
		count1 += totalSteps5;
		var pi20 = Math.PI;
		var step24 = pi20 * 2 / 36;
		var dif30;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f48;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f48 = pi_21;
			} else {
				var a48 = pi_21 % (2 * Math.PI);
				f48 = a48 >= 0 ? a48 : a48 + 2 * Math.PI;
			}
			var this106 = f48;
			var za24 = this106;
			var f49;
			if(0 > Math.PI) {
				f49 = 0;
			} else {
				var a49 = 0 % (2 * Math.PI);
				f49 = a49 >= 0 ? a49 : a49 + 2 * Math.PI;
			}
			var this107 = f49;
			var zb24 = this107;
			var fa24 = za24;
			var fb24 = zb24;
			var theta41 = Math.abs(fa24 - fb24);
			var clockwise24 = fa24 < fb24;
			var dif31 = clockwise24 ? theta41 : -theta41;
			dif30 = dif31 > 0 ? dif31 : 2 * Math.PI + dif31;
			break;
		case 1:
			var f50;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f50 = pi_21;
			} else {
				var a50 = pi_21 % (2 * Math.PI);
				f50 = a50 >= 0 ? a50 : a50 + 2 * Math.PI;
			}
			var this108 = f50;
			var za25 = this108;
			var f51;
			if(0 > Math.PI) {
				f51 = 0;
			} else {
				var a51 = 0 % (2 * Math.PI);
				f51 = a51 >= 0 ? a51 : a51 + 2 * Math.PI;
			}
			var this109 = f51;
			var zb25 = this109;
			var fa25 = za25;
			var fb25 = zb25;
			var theta42 = Math.abs(fa25 - fb25);
			var clockwise25 = fa25 < fb25;
			var dif32 = clockwise25 ? theta42 : -theta42;
			dif30 = dif32 < 0 ? dif32 : -2 * Math.PI + dif32;
			break;
		case 2:
			var f52;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f52 = pi_21;
			} else {
				var a52 = pi_21 % (2 * Math.PI);
				f52 = a52 >= 0 ? a52 : a52 + 2 * Math.PI;
			}
			var this110 = f52;
			var za26 = this110;
			var f53;
			if(0 > Math.PI) {
				f53 = 0;
			} else {
				var a53 = 0 % (2 * Math.PI);
				f53 = a53 >= 0 ? a53 : a53 + 2 * Math.PI;
			}
			var this111 = f53;
			var zb26 = this111;
			var fa26 = za26;
			var fb26 = zb26;
			var theta43 = Math.abs(fa26 - fb26);
			var smallest6 = theta43 <= Math.PI;
			var clockwise26 = fa26 < fb26;
			var dif33 = clockwise26 ? theta43 : -theta43;
			dif30 = smallest6 ? dif33 : clockwise26 ? -(2 * Math.PI - theta43) : 2 * Math.PI - theta43;
			break;
		case 3:
			var f54;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f54 = pi_21;
			} else {
				var a54 = pi_21 % (2 * Math.PI);
				f54 = a54 >= 0 ? a54 : a54 + 2 * Math.PI;
			}
			var this112 = f54;
			var za27 = this112;
			var f55;
			if(0 > Math.PI) {
				f55 = 0;
			} else {
				var a55 = 0 % (2 * Math.PI);
				f55 = a55 >= 0 ? a55 : a55 + 2 * Math.PI;
			}
			var this113 = f55;
			var zb27 = this113;
			var fa27 = za27;
			var fb27 = zb27;
			var theta44 = Math.abs(fa27 - fb27);
			var largest6 = theta44 > Math.PI;
			var clockwise27 = fa27 < fb27;
			var dif34 = clockwise27 ? theta44 : -theta44;
			dif30 = largest6 ? dif34 : clockwise27 ? -(2 * Math.PI - theta44) : 2 * Math.PI - theta44;
			break;
		}
		var positive6 = dif30 >= 0;
		var totalSteps6 = Math.ceil(Math.abs(dif30) / step24);
		var step25 = dif30 / totalSteps6;
		var angle6 = pi_21;
		var cx26;
		var cy26;
		var bx26 = 0;
		var by26 = 0;
		var _g34 = 0;
		var _g124 = totalSteps6 + 1;
		while(_g34 < _g124) {
			var i18 = _g34++;
			cx26 = cx20 + radius7 * Math.sin(angle6);
			cy26 = cy20 + radius7 * Math.cos(angle6);
			if(i18 != 0) {
				drawType7.triangle(cx20,cy20,0,bx26,by26,0,cx26,cy26,0);
				var m36 = trilateral2_Shaper.transformMatrix;
				if(m36 != null) {
					drawType7.transform(m36);
				}
				drawType7.next();
			}
			angle6 += step25;
			bx26 = cx26;
			by26 = cy26;
		}
		count1 += totalSteps6;
		var gamma3 = -pi_21;
		var pi21 = Math.PI;
		var step26 = pi21 * 2 / 36;
		var dif35;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f56;
			if(0 > Math.PI) {
				f56 = 0;
			} else {
				var a56 = 0 % (2 * Math.PI);
				f56 = a56 >= 0 ? a56 : a56 + 2 * Math.PI;
			}
			var this114 = f56;
			var za28 = this114;
			var f57;
			if(gamma3 >= 0 && gamma3 > Math.PI) {
				f57 = gamma3;
			} else {
				var a57 = gamma3 % (2 * Math.PI);
				f57 = a57 >= 0 ? a57 : a57 + 2 * Math.PI;
			}
			var this115 = f57;
			var zb28 = this115;
			var fa28 = za28;
			var fb28 = zb28;
			var theta45 = Math.abs(fa28 - fb28);
			var clockwise28 = fa28 < fb28;
			var dif36 = clockwise28 ? theta45 : -theta45;
			dif35 = dif36 > 0 ? dif36 : 2 * Math.PI + dif36;
			break;
		case 1:
			var f58;
			if(0 > Math.PI) {
				f58 = 0;
			} else {
				var a58 = 0 % (2 * Math.PI);
				f58 = a58 >= 0 ? a58 : a58 + 2 * Math.PI;
			}
			var this116 = f58;
			var za29 = this116;
			var f59;
			if(gamma3 >= 0 && gamma3 > Math.PI) {
				f59 = gamma3;
			} else {
				var a59 = gamma3 % (2 * Math.PI);
				f59 = a59 >= 0 ? a59 : a59 + 2 * Math.PI;
			}
			var this117 = f59;
			var zb29 = this117;
			var fa29 = za29;
			var fb29 = zb29;
			var theta46 = Math.abs(fa29 - fb29);
			var clockwise29 = fa29 < fb29;
			var dif37 = clockwise29 ? theta46 : -theta46;
			dif35 = dif37 < 0 ? dif37 : -2 * Math.PI + dif37;
			break;
		case 2:
			var f60;
			if(0 > Math.PI) {
				f60 = 0;
			} else {
				var a60 = 0 % (2 * Math.PI);
				f60 = a60 >= 0 ? a60 : a60 + 2 * Math.PI;
			}
			var this118 = f60;
			var za30 = this118;
			var f61;
			if(gamma3 >= 0 && gamma3 > Math.PI) {
				f61 = gamma3;
			} else {
				var a61 = gamma3 % (2 * Math.PI);
				f61 = a61 >= 0 ? a61 : a61 + 2 * Math.PI;
			}
			var this119 = f61;
			var zb30 = this119;
			var fa30 = za30;
			var fb30 = zb30;
			var theta47 = Math.abs(fa30 - fb30);
			var smallest7 = theta47 <= Math.PI;
			var clockwise30 = fa30 < fb30;
			var dif38 = clockwise30 ? theta47 : -theta47;
			dif35 = smallest7 ? dif38 : clockwise30 ? -(2 * Math.PI - theta47) : 2 * Math.PI - theta47;
			break;
		case 3:
			var f62;
			if(0 > Math.PI) {
				f62 = 0;
			} else {
				var a62 = 0 % (2 * Math.PI);
				f62 = a62 >= 0 ? a62 : a62 + 2 * Math.PI;
			}
			var this120 = f62;
			var za31 = this120;
			var f63;
			if(gamma3 >= 0 && gamma3 > Math.PI) {
				f63 = gamma3;
			} else {
				var a63 = gamma3 % (2 * Math.PI);
				f63 = a63 >= 0 ? a63 : a63 + 2 * Math.PI;
			}
			var this121 = f63;
			var zb31 = this121;
			var fa31 = za31;
			var fb31 = zb31;
			var theta48 = Math.abs(fa31 - fb31);
			var largest7 = theta48 > Math.PI;
			var clockwise31 = fa31 < fb31;
			var dif39 = clockwise31 ? theta48 : -theta48;
			dif35 = largest7 ? dif39 : clockwise31 ? -(2 * Math.PI - theta48) : 2 * Math.PI - theta48;
			break;
		}
		var positive7 = dif35 >= 0;
		var totalSteps7 = Math.ceil(Math.abs(dif35) / step26);
		var step27 = dif35 / totalSteps7;
		var angle7 = 0;
		var cx27;
		var cy27;
		var bx27 = 0;
		var by27 = 0;
		var _g35 = 0;
		var _g125 = totalSteps7 + 1;
		while(_g35 < _g125) {
			var i19 = _g35++;
			cx27 = dx10 + radius7 * Math.sin(angle7);
			cy27 = dy10 + radius7 * Math.cos(angle7);
			if(i19 != 0) {
				drawType7.triangle(dx10,dy10,0,bx27,by27,0,cx27,cy27,0);
				var m37 = trilateral2_Shaper.transformMatrix;
				if(m37 != null) {
					drawType7.transform(m37);
				}
				drawType7.next();
			}
			angle7 += step27;
			bx27 = cx27;
			by27 = cy27;
		}
		var len7 = count1 += totalSteps7;
		var color1 = rs2.color;
		if(color1 == -1) {
			color1 = this89.currentColor;
		}
		this89.colorType.colorTriangles(color1,len7);
		var end7 = start7 + len7 - 1;
		var s02 = new trilateral2_IndexRange(start7,end7);
		var this122 = this.spots;
		var this123 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this124 = this123;
		var this125 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this122.dz / 2);
		var s24 = this125;
		var this126 = new geom_structure_Mat4x3(this124.a * s24.a + this124.b * s24.e + this124.c * s24.i,this124.a * s24.b + this124.b * s24.f + this124.c * s24.j,this124.a * s24.c + this124.b * s24.g + this124.c * s24.k,this124.a * s24.d + this124.b * s24.h + this124.c * s24.l + this124.d,this124.e * s24.a + this124.f * s24.e + this124.g * s24.i,this124.e * s24.b + this124.f * s24.f + this124.g * s24.j,this124.e * s24.c + this124.f * s24.g + this124.g * s24.k,this124.e * s24.d + this124.f * s24.h + this124.g * s24.l + this124.h,this124.i * s24.a + this124.j * s24.e + this124.k * s24.i,this124.i * s24.b + this124.j * s24.f + this124.k * s24.j,this124.i * s24.c + this124.j * s24.g + this124.k * s24.k,this124.i * s24.d + this124.j * s24.h + this124.k * s24.l + this124.l);
		var trans1 = this126;
		this122.drawType.transformRange(trans1,s02.start,s02.end);
		var this127 = this.spots;
		var rs3 = this.spotShape;
		var s03 = rs3.clone();
		s03.x += 20;
		s03.y -= 20;
		var start8 = this127.drawType.get_size();
		var drawType8 = this127.drawType;
		var ax8 = s03.x;
		var ay8 = s03.y;
		var radius8 = s03.radius;
		var sides18 = 36;
		if(sides18 == null) {
			sides18 = 36;
		}
		var pi22 = Math.PI;
		var theta49 = pi22 / 2;
		var step28 = pi22 * 2 / sides18;
		var bx28;
		var by28;
		var cx28;
		var cy28;
		var _g36 = 0;
		var _g126 = sides18;
		while(_g36 < _g126) {
			var i20 = _g36++;
			bx28 = ax8 + radius8 * Math.sin(theta49);
			by28 = ay8 + radius8 * Math.cos(theta49);
			theta49 += step28;
			cx28 = ax8 + radius8 * Math.sin(theta49);
			cy28 = ay8 + radius8 * Math.cos(theta49);
			drawType8.triangle(ax8,ay8,0,bx28,by28,0,cx28,cy28,0);
			var m38 = trilateral2_Shaper.transformMatrix;
			if(m38 != null) {
				drawType8.transform(m38);
			}
			drawType8.next();
		}
		var len8 = sides18;
		var color2 = s03.color;
		if(color2 == -1) {
			color2 = this127.currentColor;
		}
		this127.colorType.colorTriangles(color2,len8);
		var end8 = start8 + len8 - 1;
		var startEnd6 = new trilateral2_IndexRange(start8,end8);
		var c01 = startEnd6;
		var s112 = rs3.clone();
		s112.x -= 20;
		s112.y += 20;
		var start9 = this127.drawType.get_size();
		var drawType9 = this127.drawType;
		var ax9 = s112.x;
		var ay9 = s112.y;
		var radius9 = s112.radius;
		var sides19 = 36;
		if(sides19 == null) {
			sides19 = 36;
		}
		var pi23 = Math.PI;
		var theta50 = pi23 / 2;
		var step29 = pi23 * 2 / sides19;
		var bx29;
		var by29;
		var cx29;
		var cy29;
		var _g37 = 0;
		var _g127 = sides19;
		while(_g37 < _g127) {
			var i21 = _g37++;
			bx29 = ax9 + radius9 * Math.sin(theta50);
			by29 = ay9 + radius9 * Math.cos(theta50);
			theta50 += step29;
			cx29 = ax9 + radius9 * Math.sin(theta50);
			cy29 = ay9 + radius9 * Math.cos(theta50);
			drawType9.triangle(ax9,ay9,0,bx29,by29,0,cx29,cy29,0);
			var m39 = trilateral2_Shaper.transformMatrix;
			if(m39 != null) {
				drawType9.transform(m39);
			}
			drawType9.next();
		}
		var len9 = sides19;
		var color3 = s112.color;
		if(color3 == -1) {
			color3 = this127.currentColor;
		}
		this127.colorType.colorTriangles(color3,len9);
		var end9 = start9 + len9 - 1;
		var startEnd7 = new trilateral2_IndexRange(start9,end9);
		var c12 = startEnd7;
		var s113 = new trilateral2_IndexRange(c01.start,c12.end);
		var s25 = new trilateral2_IndexRange(s02.start,s113.end);
		this.spots.drawType.transformRange(trans_1,s25.start,s25.end);
		var s26 = s25;
		var this128 = this.spots;
		var rs4 = this.dieShape;
		var start10 = this128.drawType.get_size();
		var drawType10 = this128.drawType;
		var x9 = rs4.x - rs4.radius;
		var y9 = rs4.y - rs4.radius;
		var width2 = rs4.radius * 2;
		var height2 = rs4.radius * 2;
		var radius10 = this128.rounded;
		var pi24 = Math.PI;
		var pi_22 = Math.PI / 2;
		var ax10 = x9 + radius10;
		var ay10 = y9 + radius10;
		var bx30 = x9 + width2 - radius10;
		var by30 = y9 + radius10;
		var cx30 = bx30;
		var cy30 = y9 + height2 - radius10;
		var dx14 = ax10;
		var dy14 = cy30;
		var count2 = 0;
		var ax11 = ax10;
		var ay11 = y9;
		var bx31 = ax10 + (width2 - radius10 * 2);
		var by31 = ay11;
		var cx31 = bx31;
		var cy31 = ay11 + height2;
		var dx15 = ax10;
		var dy15 = cy31;
		drawType10.triangle(ax11,ay11,0,bx31,by31,0,dx15,dy15,0);
		var m40 = trilateral2_Shaper.transformMatrix;
		if(m40 != null) {
			drawType10.transform(m40);
		}
		drawType10.next();
		drawType10.triangle(bx31,by31,0,cx31,cy31,0,dx15,dy15,0);
		var m41 = trilateral2_Shaper.transformMatrix;
		if(m41 != null) {
			drawType10.transform(m41);
		}
		drawType10.next();
		count2 += 2;
		var dimY2 = height2 - 2 * radius10;
		var ax12 = x9;
		var ay12 = ay10;
		var bx32 = x9 + radius10;
		var by32 = ay12;
		var cx32 = bx32;
		var cy32 = ay12 + dimY2;
		var dx16 = x9;
		var dy16 = cy32;
		drawType10.triangle(ax12,ay12,0,bx32,by32,0,dx16,dy16,0);
		var m42 = trilateral2_Shaper.transformMatrix;
		if(m42 != null) {
			drawType10.transform(m42);
		}
		drawType10.next();
		drawType10.triangle(bx32,by32,0,cx32,cy32,0,dx16,dy16,0);
		var m43 = trilateral2_Shaper.transformMatrix;
		if(m43 != null) {
			drawType10.transform(m43);
		}
		drawType10.next();
		count2 += 2;
		var ax13 = bx30;
		var ay13 = by30;
		var bx33 = bx30 + radius10;
		var by33 = ay13;
		var cx33 = bx33;
		var cy33 = ay13 + dimY2;
		var dx17 = bx30;
		var dy17 = cy33;
		drawType10.triangle(ax13,ay13,0,bx33,by33,0,dx17,dy17,0);
		var m44 = trilateral2_Shaper.transformMatrix;
		if(m44 != null) {
			drawType10.transform(m44);
		}
		drawType10.next();
		drawType10.triangle(bx33,by33,0,cx33,cy33,0,dx17,dy17,0);
		var m45 = trilateral2_Shaper.transformMatrix;
		if(m45 != null) {
			drawType10.transform(m45);
		}
		drawType10.next();
		count2 += 2;
		var beta2 = -pi24;
		var gamma4 = -pi_22;
		var pi25 = Math.PI;
		var step30 = pi25 * 2 / 36;
		var dif40;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f64;
			if(beta2 >= 0 && beta2 > Math.PI) {
				f64 = beta2;
			} else {
				var a64 = beta2 % (2 * Math.PI);
				f64 = a64 >= 0 ? a64 : a64 + 2 * Math.PI;
			}
			var this129 = f64;
			var za32 = this129;
			var f65;
			if(gamma4 >= 0 && gamma4 > Math.PI) {
				f65 = gamma4;
			} else {
				var a65 = gamma4 % (2 * Math.PI);
				f65 = a65 >= 0 ? a65 : a65 + 2 * Math.PI;
			}
			var this130 = f65;
			var zb32 = this130;
			var fa32 = za32;
			var fb32 = zb32;
			var theta51 = Math.abs(fa32 - fb32);
			var clockwise32 = fa32 < fb32;
			var dif41 = clockwise32 ? theta51 : -theta51;
			dif40 = dif41 > 0 ? dif41 : 2 * Math.PI + dif41;
			break;
		case 1:
			var f66;
			if(beta2 >= 0 && beta2 > Math.PI) {
				f66 = beta2;
			} else {
				var a66 = beta2 % (2 * Math.PI);
				f66 = a66 >= 0 ? a66 : a66 + 2 * Math.PI;
			}
			var this131 = f66;
			var za33 = this131;
			var f67;
			if(gamma4 >= 0 && gamma4 > Math.PI) {
				f67 = gamma4;
			} else {
				var a67 = gamma4 % (2 * Math.PI);
				f67 = a67 >= 0 ? a67 : a67 + 2 * Math.PI;
			}
			var this132 = f67;
			var zb33 = this132;
			var fa33 = za33;
			var fb33 = zb33;
			var theta52 = Math.abs(fa33 - fb33);
			var clockwise33 = fa33 < fb33;
			var dif42 = clockwise33 ? theta52 : -theta52;
			dif40 = dif42 < 0 ? dif42 : -2 * Math.PI + dif42;
			break;
		case 2:
			var f68;
			if(beta2 >= 0 && beta2 > Math.PI) {
				f68 = beta2;
			} else {
				var a68 = beta2 % (2 * Math.PI);
				f68 = a68 >= 0 ? a68 : a68 + 2 * Math.PI;
			}
			var this133 = f68;
			var za34 = this133;
			var f69;
			if(gamma4 >= 0 && gamma4 > Math.PI) {
				f69 = gamma4;
			} else {
				var a69 = gamma4 % (2 * Math.PI);
				f69 = a69 >= 0 ? a69 : a69 + 2 * Math.PI;
			}
			var this134 = f69;
			var zb34 = this134;
			var fa34 = za34;
			var fb34 = zb34;
			var theta53 = Math.abs(fa34 - fb34);
			var smallest8 = theta53 <= Math.PI;
			var clockwise34 = fa34 < fb34;
			var dif43 = clockwise34 ? theta53 : -theta53;
			dif40 = smallest8 ? dif43 : clockwise34 ? -(2 * Math.PI - theta53) : 2 * Math.PI - theta53;
			break;
		case 3:
			var f70;
			if(beta2 >= 0 && beta2 > Math.PI) {
				f70 = beta2;
			} else {
				var a70 = beta2 % (2 * Math.PI);
				f70 = a70 >= 0 ? a70 : a70 + 2 * Math.PI;
			}
			var this135 = f70;
			var za35 = this135;
			var f71;
			if(gamma4 >= 0 && gamma4 > Math.PI) {
				f71 = gamma4;
			} else {
				var a71 = gamma4 % (2 * Math.PI);
				f71 = a71 >= 0 ? a71 : a71 + 2 * Math.PI;
			}
			var this136 = f71;
			var zb35 = this136;
			var fa35 = za35;
			var fb35 = zb35;
			var theta54 = Math.abs(fa35 - fb35);
			var largest8 = theta54 > Math.PI;
			var clockwise35 = fa35 < fb35;
			var dif44 = clockwise35 ? theta54 : -theta54;
			dif40 = largest8 ? dif44 : clockwise35 ? -(2 * Math.PI - theta54) : 2 * Math.PI - theta54;
			break;
		}
		var positive8 = dif40 >= 0;
		var totalSteps8 = Math.ceil(Math.abs(dif40) / step30);
		var step31 = dif40 / totalSteps8;
		var angle8 = beta2;
		var cx34;
		var cy34;
		var bx34 = 0;
		var by34 = 0;
		var _g38 = 0;
		var _g128 = totalSteps8 + 1;
		while(_g38 < _g128) {
			var i22 = _g38++;
			cx34 = ax10 + radius10 * Math.sin(angle8);
			cy34 = ay10 + radius10 * Math.cos(angle8);
			if(i22 != 0) {
				drawType10.triangle(ax10,ay10,0,bx34,by34,0,cx34,cy34,0);
				var m46 = trilateral2_Shaper.transformMatrix;
				if(m46 != null) {
					drawType10.transform(m46);
				}
				drawType10.next();
			}
			angle8 += step31;
			bx34 = cx34;
			by34 = cy34;
		}
		count2 += totalSteps8;
		var pi26 = Math.PI;
		var step32 = pi26 * 2 / 36;
		var dif45;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f72;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f72 = pi_22;
			} else {
				var a72 = pi_22 % (2 * Math.PI);
				f72 = a72 >= 0 ? a72 : a72 + 2 * Math.PI;
			}
			var this137 = f72;
			var za36 = this137;
			var f73;
			if(pi24 >= 0 && pi24 > Math.PI) {
				f73 = pi24;
			} else {
				var a73 = pi24 % (2 * Math.PI);
				f73 = a73 >= 0 ? a73 : a73 + 2 * Math.PI;
			}
			var this138 = f73;
			var zb36 = this138;
			var fa36 = za36;
			var fb36 = zb36;
			var theta55 = Math.abs(fa36 - fb36);
			var clockwise36 = fa36 < fb36;
			var dif46 = clockwise36 ? theta55 : -theta55;
			dif45 = dif46 > 0 ? dif46 : 2 * Math.PI + dif46;
			break;
		case 1:
			var f74;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f74 = pi_22;
			} else {
				var a74 = pi_22 % (2 * Math.PI);
				f74 = a74 >= 0 ? a74 : a74 + 2 * Math.PI;
			}
			var this139 = f74;
			var za37 = this139;
			var f75;
			if(pi24 >= 0 && pi24 > Math.PI) {
				f75 = pi24;
			} else {
				var a75 = pi24 % (2 * Math.PI);
				f75 = a75 >= 0 ? a75 : a75 + 2 * Math.PI;
			}
			var this140 = f75;
			var zb37 = this140;
			var fa37 = za37;
			var fb37 = zb37;
			var theta56 = Math.abs(fa37 - fb37);
			var clockwise37 = fa37 < fb37;
			var dif47 = clockwise37 ? theta56 : -theta56;
			dif45 = dif47 < 0 ? dif47 : -2 * Math.PI + dif47;
			break;
		case 2:
			var f76;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f76 = pi_22;
			} else {
				var a76 = pi_22 % (2 * Math.PI);
				f76 = a76 >= 0 ? a76 : a76 + 2 * Math.PI;
			}
			var this141 = f76;
			var za38 = this141;
			var f77;
			if(pi24 >= 0 && pi24 > Math.PI) {
				f77 = pi24;
			} else {
				var a77 = pi24 % (2 * Math.PI);
				f77 = a77 >= 0 ? a77 : a77 + 2 * Math.PI;
			}
			var this142 = f77;
			var zb38 = this142;
			var fa38 = za38;
			var fb38 = zb38;
			var theta57 = Math.abs(fa38 - fb38);
			var smallest9 = theta57 <= Math.PI;
			var clockwise38 = fa38 < fb38;
			var dif48 = clockwise38 ? theta57 : -theta57;
			dif45 = smallest9 ? dif48 : clockwise38 ? -(2 * Math.PI - theta57) : 2 * Math.PI - theta57;
			break;
		case 3:
			var f78;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f78 = pi_22;
			} else {
				var a78 = pi_22 % (2 * Math.PI);
				f78 = a78 >= 0 ? a78 : a78 + 2 * Math.PI;
			}
			var this143 = f78;
			var za39 = this143;
			var f79;
			if(pi24 >= 0 && pi24 > Math.PI) {
				f79 = pi24;
			} else {
				var a79 = pi24 % (2 * Math.PI);
				f79 = a79 >= 0 ? a79 : a79 + 2 * Math.PI;
			}
			var this144 = f79;
			var zb39 = this144;
			var fa39 = za39;
			var fb39 = zb39;
			var theta58 = Math.abs(fa39 - fb39);
			var largest9 = theta58 > Math.PI;
			var clockwise39 = fa39 < fb39;
			var dif49 = clockwise39 ? theta58 : -theta58;
			dif45 = largest9 ? dif49 : clockwise39 ? -(2 * Math.PI - theta58) : 2 * Math.PI - theta58;
			break;
		}
		var positive9 = dif45 >= 0;
		var totalSteps9 = Math.ceil(Math.abs(dif45) / step32);
		var step33 = dif45 / totalSteps9;
		var angle9 = pi_22;
		var cx35;
		var cy35;
		var bx35 = 0;
		var by35 = 0;
		var _g39 = 0;
		var _g129 = totalSteps9 + 1;
		while(_g39 < _g129) {
			var i23 = _g39++;
			cx35 = bx30 + radius10 * Math.sin(angle9);
			cy35 = by30 + radius10 * Math.cos(angle9);
			if(i23 != 0) {
				drawType10.triangle(bx30,by30,0,bx35,by35,0,cx35,cy35,0);
				var m47 = trilateral2_Shaper.transformMatrix;
				if(m47 != null) {
					drawType10.transform(m47);
				}
				drawType10.next();
			}
			angle9 += step33;
			bx35 = cx35;
			by35 = cy35;
		}
		count2 += totalSteps9;
		var pi27 = Math.PI;
		var step34 = pi27 * 2 / 36;
		var dif50;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f80;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f80 = pi_22;
			} else {
				var a80 = pi_22 % (2 * Math.PI);
				f80 = a80 >= 0 ? a80 : a80 + 2 * Math.PI;
			}
			var this145 = f80;
			var za40 = this145;
			var f81;
			if(0 > Math.PI) {
				f81 = 0;
			} else {
				var a81 = 0 % (2 * Math.PI);
				f81 = a81 >= 0 ? a81 : a81 + 2 * Math.PI;
			}
			var this146 = f81;
			var zb40 = this146;
			var fa40 = za40;
			var fb40 = zb40;
			var theta59 = Math.abs(fa40 - fb40);
			var clockwise40 = fa40 < fb40;
			var dif51 = clockwise40 ? theta59 : -theta59;
			dif50 = dif51 > 0 ? dif51 : 2 * Math.PI + dif51;
			break;
		case 1:
			var f82;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f82 = pi_22;
			} else {
				var a82 = pi_22 % (2 * Math.PI);
				f82 = a82 >= 0 ? a82 : a82 + 2 * Math.PI;
			}
			var this147 = f82;
			var za41 = this147;
			var f83;
			if(0 > Math.PI) {
				f83 = 0;
			} else {
				var a83 = 0 % (2 * Math.PI);
				f83 = a83 >= 0 ? a83 : a83 + 2 * Math.PI;
			}
			var this148 = f83;
			var zb41 = this148;
			var fa41 = za41;
			var fb41 = zb41;
			var theta60 = Math.abs(fa41 - fb41);
			var clockwise41 = fa41 < fb41;
			var dif52 = clockwise41 ? theta60 : -theta60;
			dif50 = dif52 < 0 ? dif52 : -2 * Math.PI + dif52;
			break;
		case 2:
			var f84;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f84 = pi_22;
			} else {
				var a84 = pi_22 % (2 * Math.PI);
				f84 = a84 >= 0 ? a84 : a84 + 2 * Math.PI;
			}
			var this149 = f84;
			var za42 = this149;
			var f85;
			if(0 > Math.PI) {
				f85 = 0;
			} else {
				var a85 = 0 % (2 * Math.PI);
				f85 = a85 >= 0 ? a85 : a85 + 2 * Math.PI;
			}
			var this150 = f85;
			var zb42 = this150;
			var fa42 = za42;
			var fb42 = zb42;
			var theta61 = Math.abs(fa42 - fb42);
			var smallest10 = theta61 <= Math.PI;
			var clockwise42 = fa42 < fb42;
			var dif53 = clockwise42 ? theta61 : -theta61;
			dif50 = smallest10 ? dif53 : clockwise42 ? -(2 * Math.PI - theta61) : 2 * Math.PI - theta61;
			break;
		case 3:
			var f86;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f86 = pi_22;
			} else {
				var a86 = pi_22 % (2 * Math.PI);
				f86 = a86 >= 0 ? a86 : a86 + 2 * Math.PI;
			}
			var this151 = f86;
			var za43 = this151;
			var f87;
			if(0 > Math.PI) {
				f87 = 0;
			} else {
				var a87 = 0 % (2 * Math.PI);
				f87 = a87 >= 0 ? a87 : a87 + 2 * Math.PI;
			}
			var this152 = f87;
			var zb43 = this152;
			var fa43 = za43;
			var fb43 = zb43;
			var theta62 = Math.abs(fa43 - fb43);
			var largest10 = theta62 > Math.PI;
			var clockwise43 = fa43 < fb43;
			var dif54 = clockwise43 ? theta62 : -theta62;
			dif50 = largest10 ? dif54 : clockwise43 ? -(2 * Math.PI - theta62) : 2 * Math.PI - theta62;
			break;
		}
		var positive10 = dif50 >= 0;
		var totalSteps10 = Math.ceil(Math.abs(dif50) / step34);
		var step35 = dif50 / totalSteps10;
		var angle10 = pi_22;
		var cx36;
		var cy36;
		var bx36 = 0;
		var by36 = 0;
		var _g40 = 0;
		var _g130 = totalSteps10 + 1;
		while(_g40 < _g130) {
			var i24 = _g40++;
			cx36 = cx30 + radius10 * Math.sin(angle10);
			cy36 = cy30 + radius10 * Math.cos(angle10);
			if(i24 != 0) {
				drawType10.triangle(cx30,cy30,0,bx36,by36,0,cx36,cy36,0);
				var m48 = trilateral2_Shaper.transformMatrix;
				if(m48 != null) {
					drawType10.transform(m48);
				}
				drawType10.next();
			}
			angle10 += step35;
			bx36 = cx36;
			by36 = cy36;
		}
		count2 += totalSteps10;
		var gamma5 = -pi_22;
		var pi28 = Math.PI;
		var step36 = pi28 * 2 / 36;
		var dif55;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f88;
			if(0 > Math.PI) {
				f88 = 0;
			} else {
				var a88 = 0 % (2 * Math.PI);
				f88 = a88 >= 0 ? a88 : a88 + 2 * Math.PI;
			}
			var this153 = f88;
			var za44 = this153;
			var f89;
			if(gamma5 >= 0 && gamma5 > Math.PI) {
				f89 = gamma5;
			} else {
				var a89 = gamma5 % (2 * Math.PI);
				f89 = a89 >= 0 ? a89 : a89 + 2 * Math.PI;
			}
			var this154 = f89;
			var zb44 = this154;
			var fa44 = za44;
			var fb44 = zb44;
			var theta63 = Math.abs(fa44 - fb44);
			var clockwise44 = fa44 < fb44;
			var dif56 = clockwise44 ? theta63 : -theta63;
			dif55 = dif56 > 0 ? dif56 : 2 * Math.PI + dif56;
			break;
		case 1:
			var f90;
			if(0 > Math.PI) {
				f90 = 0;
			} else {
				var a90 = 0 % (2 * Math.PI);
				f90 = a90 >= 0 ? a90 : a90 + 2 * Math.PI;
			}
			var this155 = f90;
			var za45 = this155;
			var f91;
			if(gamma5 >= 0 && gamma5 > Math.PI) {
				f91 = gamma5;
			} else {
				var a91 = gamma5 % (2 * Math.PI);
				f91 = a91 >= 0 ? a91 : a91 + 2 * Math.PI;
			}
			var this156 = f91;
			var zb45 = this156;
			var fa45 = za45;
			var fb45 = zb45;
			var theta64 = Math.abs(fa45 - fb45);
			var clockwise45 = fa45 < fb45;
			var dif57 = clockwise45 ? theta64 : -theta64;
			dif55 = dif57 < 0 ? dif57 : -2 * Math.PI + dif57;
			break;
		case 2:
			var f92;
			if(0 > Math.PI) {
				f92 = 0;
			} else {
				var a92 = 0 % (2 * Math.PI);
				f92 = a92 >= 0 ? a92 : a92 + 2 * Math.PI;
			}
			var this157 = f92;
			var za46 = this157;
			var f93;
			if(gamma5 >= 0 && gamma5 > Math.PI) {
				f93 = gamma5;
			} else {
				var a93 = gamma5 % (2 * Math.PI);
				f93 = a93 >= 0 ? a93 : a93 + 2 * Math.PI;
			}
			var this158 = f93;
			var zb46 = this158;
			var fa46 = za46;
			var fb46 = zb46;
			var theta65 = Math.abs(fa46 - fb46);
			var smallest11 = theta65 <= Math.PI;
			var clockwise46 = fa46 < fb46;
			var dif58 = clockwise46 ? theta65 : -theta65;
			dif55 = smallest11 ? dif58 : clockwise46 ? -(2 * Math.PI - theta65) : 2 * Math.PI - theta65;
			break;
		case 3:
			var f94;
			if(0 > Math.PI) {
				f94 = 0;
			} else {
				var a94 = 0 % (2 * Math.PI);
				f94 = a94 >= 0 ? a94 : a94 + 2 * Math.PI;
			}
			var this159 = f94;
			var za47 = this159;
			var f95;
			if(gamma5 >= 0 && gamma5 > Math.PI) {
				f95 = gamma5;
			} else {
				var a95 = gamma5 % (2 * Math.PI);
				f95 = a95 >= 0 ? a95 : a95 + 2 * Math.PI;
			}
			var this160 = f95;
			var zb47 = this160;
			var fa47 = za47;
			var fb47 = zb47;
			var theta66 = Math.abs(fa47 - fb47);
			var largest11 = theta66 > Math.PI;
			var clockwise47 = fa47 < fb47;
			var dif59 = clockwise47 ? theta66 : -theta66;
			dif55 = largest11 ? dif59 : clockwise47 ? -(2 * Math.PI - theta66) : 2 * Math.PI - theta66;
			break;
		}
		var positive11 = dif55 >= 0;
		var totalSteps11 = Math.ceil(Math.abs(dif55) / step36);
		var step37 = dif55 / totalSteps11;
		var angle11 = 0;
		var cx37;
		var cy37;
		var bx37 = 0;
		var by37 = 0;
		var _g41 = 0;
		var _g131 = totalSteps11 + 1;
		while(_g41 < _g131) {
			var i25 = _g41++;
			cx37 = dx14 + radius10 * Math.sin(angle11);
			cy37 = dy14 + radius10 * Math.cos(angle11);
			if(i25 != 0) {
				drawType10.triangle(dx14,dy14,0,bx37,by37,0,cx37,cy37,0);
				var m49 = trilateral2_Shaper.transformMatrix;
				if(m49 != null) {
					drawType10.transform(m49);
				}
				drawType10.next();
			}
			angle11 += step37;
			bx37 = cx37;
			by37 = cy37;
		}
		var len10 = count2 += totalSteps11;
		var color4 = rs4.color;
		if(color4 == -1) {
			color4 = this128.currentColor;
		}
		this128.colorType.colorTriangles(color4,len10);
		var end10 = start10 + len10 - 1;
		var s04 = new trilateral2_IndexRange(start10,end10);
		var this161 = this.spots;
		var this162 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this163 = this162;
		var this164 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this161.dz / 2);
		var s27 = this164;
		var this165 = new geom_structure_Mat4x3(this163.a * s27.a + this163.b * s27.e + this163.c * s27.i,this163.a * s27.b + this163.b * s27.f + this163.c * s27.j,this163.a * s27.c + this163.b * s27.g + this163.c * s27.k,this163.a * s27.d + this163.b * s27.h + this163.c * s27.l + this163.d,this163.e * s27.a + this163.f * s27.e + this163.g * s27.i,this163.e * s27.b + this163.f * s27.f + this163.g * s27.j,this163.e * s27.c + this163.f * s27.g + this163.g * s27.k,this163.e * s27.d + this163.f * s27.h + this163.g * s27.l + this163.h,this163.i * s27.a + this163.j * s27.e + this163.k * s27.i,this163.i * s27.b + this163.j * s27.f + this163.k * s27.j,this163.i * s27.c + this163.j * s27.g + this163.k * s27.k,this163.i * s27.d + this163.j * s27.h + this163.k * s27.l + this163.l);
		var trans2 = this165;
		this161.drawType.transformRange(trans2,s04.start,s04.end);
		var this166 = this.spots;
		var rs5 = this.spotShape;
		var s05 = rs5.clone();
		s05.x += 25;
		s05.y -= 25;
		var start11 = this166.drawType.get_size();
		var drawType11 = this166.drawType;
		var ax14 = s05.x;
		var ay14 = s05.y;
		var radius11 = s05.radius;
		var sides20 = 36;
		if(sides20 == null) {
			sides20 = 36;
		}
		var pi29 = Math.PI;
		var theta67 = pi29 / 2;
		var step38 = pi29 * 2 / sides20;
		var bx38;
		var by38;
		var cx38;
		var cy38;
		var _g42 = 0;
		var _g132 = sides20;
		while(_g42 < _g132) {
			var i26 = _g42++;
			bx38 = ax14 + radius11 * Math.sin(theta67);
			by38 = ay14 + radius11 * Math.cos(theta67);
			theta67 += step38;
			cx38 = ax14 + radius11 * Math.sin(theta67);
			cy38 = ay14 + radius11 * Math.cos(theta67);
			drawType11.triangle(ax14,ay14,0,bx38,by38,0,cx38,cy38,0);
			var m50 = trilateral2_Shaper.transformMatrix;
			if(m50 != null) {
				drawType11.transform(m50);
			}
			drawType11.next();
		}
		var len11 = sides20;
		var color5 = s05.color;
		if(color5 == -1) {
			color5 = this166.currentColor;
		}
		this166.colorType.colorTriangles(color5,len11);
		var end11 = start11 + len11 - 1;
		var startEnd8 = new trilateral2_IndexRange(start11,end11);
		var c02 = startEnd8;
		var s114 = rs5.clone();
		s114.x -= 25;
		s114.y += 25;
		var start12 = this166.drawType.get_size();
		var drawType12 = this166.drawType;
		var ax15 = s114.x;
		var ay15 = s114.y;
		var radius12 = s114.radius;
		var sides21 = 36;
		if(sides21 == null) {
			sides21 = 36;
		}
		var pi30 = Math.PI;
		var theta68 = pi30 / 2;
		var step39 = pi30 * 2 / sides21;
		var bx39;
		var by39;
		var cx39;
		var cy39;
		var _g43 = 0;
		var _g133 = sides21;
		while(_g43 < _g133) {
			var i27 = _g43++;
			bx39 = ax15 + radius12 * Math.sin(theta68);
			by39 = ay15 + radius12 * Math.cos(theta68);
			theta68 += step39;
			cx39 = ax15 + radius12 * Math.sin(theta68);
			cy39 = ay15 + radius12 * Math.cos(theta68);
			drawType12.triangle(ax15,ay15,0,bx39,by39,0,cx39,cy39,0);
			var m51 = trilateral2_Shaper.transformMatrix;
			if(m51 != null) {
				drawType12.transform(m51);
			}
			drawType12.next();
		}
		var len12 = sides21;
		var color6 = s114.color;
		if(color6 == -1) {
			color6 = this166.currentColor;
		}
		this166.colorType.colorTriangles(color6,len12);
		var end12 = start12 + len12 - 1;
		var startEnd9 = new trilateral2_IndexRange(start12,end12);
		var c13 = startEnd9;
		var s28 = rs5.clone();
		var start13 = this166.drawType.get_size();
		var drawType13 = this166.drawType;
		var ax16 = s28.x;
		var ay16 = s28.y;
		var radius13 = s28.radius;
		var sides22 = 36;
		if(sides22 == null) {
			sides22 = 36;
		}
		var pi31 = Math.PI;
		var theta69 = pi31 / 2;
		var step40 = pi31 * 2 / sides22;
		var bx40;
		var by40;
		var cx40;
		var cy40;
		var _g44 = 0;
		var _g134 = sides22;
		while(_g44 < _g134) {
			var i28 = _g44++;
			bx40 = ax16 + radius13 * Math.sin(theta69);
			by40 = ay16 + radius13 * Math.cos(theta69);
			theta69 += step40;
			cx40 = ax16 + radius13 * Math.sin(theta69);
			cy40 = ay16 + radius13 * Math.cos(theta69);
			drawType13.triangle(ax16,ay16,0,bx40,by40,0,cx40,cy40,0);
			var m52 = trilateral2_Shaper.transformMatrix;
			if(m52 != null) {
				drawType13.transform(m52);
			}
			drawType13.next();
		}
		var len13 = sides22;
		var color7 = s28.color;
		if(color7 == -1) {
			color7 = this166.currentColor;
		}
		this166.colorType.colorTriangles(color7,len13);
		var end13 = start13 + len13 - 1;
		var startEnd10 = new trilateral2_IndexRange(start13,end13);
		var c22 = startEnd10;
		var s115 = new trilateral2_IndexRange(c02.start,c22.end);
		var s29 = new trilateral2_IndexRange(s04.start,s115.end);
		this.spots.drawType.transformRange(trans_2,s29.start,s29.end);
		var s32 = s29;
		var this167 = this.spots;
		var rs6 = this.dieShape;
		var start14 = this167.drawType.get_size();
		var drawType14 = this167.drawType;
		var x10 = rs6.x - rs6.radius;
		var y10 = rs6.y - rs6.radius;
		var width3 = rs6.radius * 2;
		var height3 = rs6.radius * 2;
		var radius14 = this167.rounded;
		var pi32 = Math.PI;
		var pi_23 = Math.PI / 2;
		var ax17 = x10 + radius14;
		var ay17 = y10 + radius14;
		var bx41 = x10 + width3 - radius14;
		var by41 = y10 + radius14;
		var cx41 = bx41;
		var cy41 = y10 + height3 - radius14;
		var dx18 = ax17;
		var dy18 = cy41;
		var count3 = 0;
		var ax18 = ax17;
		var ay18 = y10;
		var bx42 = ax17 + (width3 - radius14 * 2);
		var by42 = ay18;
		var cx42 = bx42;
		var cy42 = ay18 + height3;
		var dx19 = ax17;
		var dy19 = cy42;
		drawType14.triangle(ax18,ay18,0,bx42,by42,0,dx19,dy19,0);
		var m53 = trilateral2_Shaper.transformMatrix;
		if(m53 != null) {
			drawType14.transform(m53);
		}
		drawType14.next();
		drawType14.triangle(bx42,by42,0,cx42,cy42,0,dx19,dy19,0);
		var m54 = trilateral2_Shaper.transformMatrix;
		if(m54 != null) {
			drawType14.transform(m54);
		}
		drawType14.next();
		count3 += 2;
		var dimY3 = height3 - 2 * radius14;
		var ax19 = x10;
		var ay19 = ay17;
		var bx43 = x10 + radius14;
		var by43 = ay19;
		var cx43 = bx43;
		var cy43 = ay19 + dimY3;
		var dx20 = x10;
		var dy20 = cy43;
		drawType14.triangle(ax19,ay19,0,bx43,by43,0,dx20,dy20,0);
		var m55 = trilateral2_Shaper.transformMatrix;
		if(m55 != null) {
			drawType14.transform(m55);
		}
		drawType14.next();
		drawType14.triangle(bx43,by43,0,cx43,cy43,0,dx20,dy20,0);
		var m56 = trilateral2_Shaper.transformMatrix;
		if(m56 != null) {
			drawType14.transform(m56);
		}
		drawType14.next();
		count3 += 2;
		var ax20 = bx41;
		var ay20 = by41;
		var bx44 = bx41 + radius14;
		var by44 = ay20;
		var cx44 = bx44;
		var cy44 = ay20 + dimY3;
		var dx21 = bx41;
		var dy21 = cy44;
		drawType14.triangle(ax20,ay20,0,bx44,by44,0,dx21,dy21,0);
		var m57 = trilateral2_Shaper.transformMatrix;
		if(m57 != null) {
			drawType14.transform(m57);
		}
		drawType14.next();
		drawType14.triangle(bx44,by44,0,cx44,cy44,0,dx21,dy21,0);
		var m58 = trilateral2_Shaper.transformMatrix;
		if(m58 != null) {
			drawType14.transform(m58);
		}
		drawType14.next();
		count3 += 2;
		var beta3 = -pi32;
		var gamma6 = -pi_23;
		var pi33 = Math.PI;
		var step41 = pi33 * 2 / 36;
		var dif60;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f96;
			if(beta3 >= 0 && beta3 > Math.PI) {
				f96 = beta3;
			} else {
				var a96 = beta3 % (2 * Math.PI);
				f96 = a96 >= 0 ? a96 : a96 + 2 * Math.PI;
			}
			var this168 = f96;
			var za48 = this168;
			var f97;
			if(gamma6 >= 0 && gamma6 > Math.PI) {
				f97 = gamma6;
			} else {
				var a97 = gamma6 % (2 * Math.PI);
				f97 = a97 >= 0 ? a97 : a97 + 2 * Math.PI;
			}
			var this169 = f97;
			var zb48 = this169;
			var fa48 = za48;
			var fb48 = zb48;
			var theta70 = Math.abs(fa48 - fb48);
			var clockwise48 = fa48 < fb48;
			var dif61 = clockwise48 ? theta70 : -theta70;
			dif60 = dif61 > 0 ? dif61 : 2 * Math.PI + dif61;
			break;
		case 1:
			var f98;
			if(beta3 >= 0 && beta3 > Math.PI) {
				f98 = beta3;
			} else {
				var a98 = beta3 % (2 * Math.PI);
				f98 = a98 >= 0 ? a98 : a98 + 2 * Math.PI;
			}
			var this170 = f98;
			var za49 = this170;
			var f99;
			if(gamma6 >= 0 && gamma6 > Math.PI) {
				f99 = gamma6;
			} else {
				var a99 = gamma6 % (2 * Math.PI);
				f99 = a99 >= 0 ? a99 : a99 + 2 * Math.PI;
			}
			var this171 = f99;
			var zb49 = this171;
			var fa49 = za49;
			var fb49 = zb49;
			var theta71 = Math.abs(fa49 - fb49);
			var clockwise49 = fa49 < fb49;
			var dif62 = clockwise49 ? theta71 : -theta71;
			dif60 = dif62 < 0 ? dif62 : -2 * Math.PI + dif62;
			break;
		case 2:
			var f100;
			if(beta3 >= 0 && beta3 > Math.PI) {
				f100 = beta3;
			} else {
				var a100 = beta3 % (2 * Math.PI);
				f100 = a100 >= 0 ? a100 : a100 + 2 * Math.PI;
			}
			var this172 = f100;
			var za50 = this172;
			var f101;
			if(gamma6 >= 0 && gamma6 > Math.PI) {
				f101 = gamma6;
			} else {
				var a101 = gamma6 % (2 * Math.PI);
				f101 = a101 >= 0 ? a101 : a101 + 2 * Math.PI;
			}
			var this173 = f101;
			var zb50 = this173;
			var fa50 = za50;
			var fb50 = zb50;
			var theta72 = Math.abs(fa50 - fb50);
			var smallest12 = theta72 <= Math.PI;
			var clockwise50 = fa50 < fb50;
			var dif63 = clockwise50 ? theta72 : -theta72;
			dif60 = smallest12 ? dif63 : clockwise50 ? -(2 * Math.PI - theta72) : 2 * Math.PI - theta72;
			break;
		case 3:
			var f102;
			if(beta3 >= 0 && beta3 > Math.PI) {
				f102 = beta3;
			} else {
				var a102 = beta3 % (2 * Math.PI);
				f102 = a102 >= 0 ? a102 : a102 + 2 * Math.PI;
			}
			var this174 = f102;
			var za51 = this174;
			var f103;
			if(gamma6 >= 0 && gamma6 > Math.PI) {
				f103 = gamma6;
			} else {
				var a103 = gamma6 % (2 * Math.PI);
				f103 = a103 >= 0 ? a103 : a103 + 2 * Math.PI;
			}
			var this175 = f103;
			var zb51 = this175;
			var fa51 = za51;
			var fb51 = zb51;
			var theta73 = Math.abs(fa51 - fb51);
			var largest12 = theta73 > Math.PI;
			var clockwise51 = fa51 < fb51;
			var dif64 = clockwise51 ? theta73 : -theta73;
			dif60 = largest12 ? dif64 : clockwise51 ? -(2 * Math.PI - theta73) : 2 * Math.PI - theta73;
			break;
		}
		var positive12 = dif60 >= 0;
		var totalSteps12 = Math.ceil(Math.abs(dif60) / step41);
		var step42 = dif60 / totalSteps12;
		var angle12 = beta3;
		var cx45;
		var cy45;
		var bx45 = 0;
		var by45 = 0;
		var _g45 = 0;
		var _g135 = totalSteps12 + 1;
		while(_g45 < _g135) {
			var i29 = _g45++;
			cx45 = ax17 + radius14 * Math.sin(angle12);
			cy45 = ay17 + radius14 * Math.cos(angle12);
			if(i29 != 0) {
				drawType14.triangle(ax17,ay17,0,bx45,by45,0,cx45,cy45,0);
				var m59 = trilateral2_Shaper.transformMatrix;
				if(m59 != null) {
					drawType14.transform(m59);
				}
				drawType14.next();
			}
			angle12 += step42;
			bx45 = cx45;
			by45 = cy45;
		}
		count3 += totalSteps12;
		var pi34 = Math.PI;
		var step43 = pi34 * 2 / 36;
		var dif65;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f104;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f104 = pi_23;
			} else {
				var a104 = pi_23 % (2 * Math.PI);
				f104 = a104 >= 0 ? a104 : a104 + 2 * Math.PI;
			}
			var this176 = f104;
			var za52 = this176;
			var f105;
			if(pi32 >= 0 && pi32 > Math.PI) {
				f105 = pi32;
			} else {
				var a105 = pi32 % (2 * Math.PI);
				f105 = a105 >= 0 ? a105 : a105 + 2 * Math.PI;
			}
			var this177 = f105;
			var zb52 = this177;
			var fa52 = za52;
			var fb52 = zb52;
			var theta74 = Math.abs(fa52 - fb52);
			var clockwise52 = fa52 < fb52;
			var dif66 = clockwise52 ? theta74 : -theta74;
			dif65 = dif66 > 0 ? dif66 : 2 * Math.PI + dif66;
			break;
		case 1:
			var f106;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f106 = pi_23;
			} else {
				var a106 = pi_23 % (2 * Math.PI);
				f106 = a106 >= 0 ? a106 : a106 + 2 * Math.PI;
			}
			var this178 = f106;
			var za53 = this178;
			var f107;
			if(pi32 >= 0 && pi32 > Math.PI) {
				f107 = pi32;
			} else {
				var a107 = pi32 % (2 * Math.PI);
				f107 = a107 >= 0 ? a107 : a107 + 2 * Math.PI;
			}
			var this179 = f107;
			var zb53 = this179;
			var fa53 = za53;
			var fb53 = zb53;
			var theta75 = Math.abs(fa53 - fb53);
			var clockwise53 = fa53 < fb53;
			var dif67 = clockwise53 ? theta75 : -theta75;
			dif65 = dif67 < 0 ? dif67 : -2 * Math.PI + dif67;
			break;
		case 2:
			var f108;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f108 = pi_23;
			} else {
				var a108 = pi_23 % (2 * Math.PI);
				f108 = a108 >= 0 ? a108 : a108 + 2 * Math.PI;
			}
			var this180 = f108;
			var za54 = this180;
			var f109;
			if(pi32 >= 0 && pi32 > Math.PI) {
				f109 = pi32;
			} else {
				var a109 = pi32 % (2 * Math.PI);
				f109 = a109 >= 0 ? a109 : a109 + 2 * Math.PI;
			}
			var this181 = f109;
			var zb54 = this181;
			var fa54 = za54;
			var fb54 = zb54;
			var theta76 = Math.abs(fa54 - fb54);
			var smallest13 = theta76 <= Math.PI;
			var clockwise54 = fa54 < fb54;
			var dif68 = clockwise54 ? theta76 : -theta76;
			dif65 = smallest13 ? dif68 : clockwise54 ? -(2 * Math.PI - theta76) : 2 * Math.PI - theta76;
			break;
		case 3:
			var f110;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f110 = pi_23;
			} else {
				var a110 = pi_23 % (2 * Math.PI);
				f110 = a110 >= 0 ? a110 : a110 + 2 * Math.PI;
			}
			var this182 = f110;
			var za55 = this182;
			var f111;
			if(pi32 >= 0 && pi32 > Math.PI) {
				f111 = pi32;
			} else {
				var a111 = pi32 % (2 * Math.PI);
				f111 = a111 >= 0 ? a111 : a111 + 2 * Math.PI;
			}
			var this183 = f111;
			var zb55 = this183;
			var fa55 = za55;
			var fb55 = zb55;
			var theta77 = Math.abs(fa55 - fb55);
			var largest13 = theta77 > Math.PI;
			var clockwise55 = fa55 < fb55;
			var dif69 = clockwise55 ? theta77 : -theta77;
			dif65 = largest13 ? dif69 : clockwise55 ? -(2 * Math.PI - theta77) : 2 * Math.PI - theta77;
			break;
		}
		var positive13 = dif65 >= 0;
		var totalSteps13 = Math.ceil(Math.abs(dif65) / step43);
		var step44 = dif65 / totalSteps13;
		var angle13 = pi_23;
		var cx46;
		var cy46;
		var bx46 = 0;
		var by46 = 0;
		var _g46 = 0;
		var _g136 = totalSteps13 + 1;
		while(_g46 < _g136) {
			var i30 = _g46++;
			cx46 = bx41 + radius14 * Math.sin(angle13);
			cy46 = by41 + radius14 * Math.cos(angle13);
			if(i30 != 0) {
				drawType14.triangle(bx41,by41,0,bx46,by46,0,cx46,cy46,0);
				var m60 = trilateral2_Shaper.transformMatrix;
				if(m60 != null) {
					drawType14.transform(m60);
				}
				drawType14.next();
			}
			angle13 += step44;
			bx46 = cx46;
			by46 = cy46;
		}
		count3 += totalSteps13;
		var pi35 = Math.PI;
		var step45 = pi35 * 2 / 36;
		var dif70;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f112;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f112 = pi_23;
			} else {
				var a112 = pi_23 % (2 * Math.PI);
				f112 = a112 >= 0 ? a112 : a112 + 2 * Math.PI;
			}
			var this184 = f112;
			var za56 = this184;
			var f113;
			if(0 > Math.PI) {
				f113 = 0;
			} else {
				var a113 = 0 % (2 * Math.PI);
				f113 = a113 >= 0 ? a113 : a113 + 2 * Math.PI;
			}
			var this185 = f113;
			var zb56 = this185;
			var fa56 = za56;
			var fb56 = zb56;
			var theta78 = Math.abs(fa56 - fb56);
			var clockwise56 = fa56 < fb56;
			var dif71 = clockwise56 ? theta78 : -theta78;
			dif70 = dif71 > 0 ? dif71 : 2 * Math.PI + dif71;
			break;
		case 1:
			var f114;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f114 = pi_23;
			} else {
				var a114 = pi_23 % (2 * Math.PI);
				f114 = a114 >= 0 ? a114 : a114 + 2 * Math.PI;
			}
			var this186 = f114;
			var za57 = this186;
			var f115;
			if(0 > Math.PI) {
				f115 = 0;
			} else {
				var a115 = 0 % (2 * Math.PI);
				f115 = a115 >= 0 ? a115 : a115 + 2 * Math.PI;
			}
			var this187 = f115;
			var zb57 = this187;
			var fa57 = za57;
			var fb57 = zb57;
			var theta79 = Math.abs(fa57 - fb57);
			var clockwise57 = fa57 < fb57;
			var dif72 = clockwise57 ? theta79 : -theta79;
			dif70 = dif72 < 0 ? dif72 : -2 * Math.PI + dif72;
			break;
		case 2:
			var f116;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f116 = pi_23;
			} else {
				var a116 = pi_23 % (2 * Math.PI);
				f116 = a116 >= 0 ? a116 : a116 + 2 * Math.PI;
			}
			var this188 = f116;
			var za58 = this188;
			var f117;
			if(0 > Math.PI) {
				f117 = 0;
			} else {
				var a117 = 0 % (2 * Math.PI);
				f117 = a117 >= 0 ? a117 : a117 + 2 * Math.PI;
			}
			var this189 = f117;
			var zb58 = this189;
			var fa58 = za58;
			var fb58 = zb58;
			var theta80 = Math.abs(fa58 - fb58);
			var smallest14 = theta80 <= Math.PI;
			var clockwise58 = fa58 < fb58;
			var dif73 = clockwise58 ? theta80 : -theta80;
			dif70 = smallest14 ? dif73 : clockwise58 ? -(2 * Math.PI - theta80) : 2 * Math.PI - theta80;
			break;
		case 3:
			var f118;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f118 = pi_23;
			} else {
				var a118 = pi_23 % (2 * Math.PI);
				f118 = a118 >= 0 ? a118 : a118 + 2 * Math.PI;
			}
			var this190 = f118;
			var za59 = this190;
			var f119;
			if(0 > Math.PI) {
				f119 = 0;
			} else {
				var a119 = 0 % (2 * Math.PI);
				f119 = a119 >= 0 ? a119 : a119 + 2 * Math.PI;
			}
			var this191 = f119;
			var zb59 = this191;
			var fa59 = za59;
			var fb59 = zb59;
			var theta81 = Math.abs(fa59 - fb59);
			var largest14 = theta81 > Math.PI;
			var clockwise59 = fa59 < fb59;
			var dif74 = clockwise59 ? theta81 : -theta81;
			dif70 = largest14 ? dif74 : clockwise59 ? -(2 * Math.PI - theta81) : 2 * Math.PI - theta81;
			break;
		}
		var positive14 = dif70 >= 0;
		var totalSteps14 = Math.ceil(Math.abs(dif70) / step45);
		var step46 = dif70 / totalSteps14;
		var angle14 = pi_23;
		var cx47;
		var cy47;
		var bx47 = 0;
		var by47 = 0;
		var _g47 = 0;
		var _g137 = totalSteps14 + 1;
		while(_g47 < _g137) {
			var i31 = _g47++;
			cx47 = cx41 + radius14 * Math.sin(angle14);
			cy47 = cy41 + radius14 * Math.cos(angle14);
			if(i31 != 0) {
				drawType14.triangle(cx41,cy41,0,bx47,by47,0,cx47,cy47,0);
				var m61 = trilateral2_Shaper.transformMatrix;
				if(m61 != null) {
					drawType14.transform(m61);
				}
				drawType14.next();
			}
			angle14 += step46;
			bx47 = cx47;
			by47 = cy47;
		}
		count3 += totalSteps14;
		var gamma7 = -pi_23;
		var pi36 = Math.PI;
		var step47 = pi36 * 2 / 36;
		var dif75;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f120;
			if(0 > Math.PI) {
				f120 = 0;
			} else {
				var a120 = 0 % (2 * Math.PI);
				f120 = a120 >= 0 ? a120 : a120 + 2 * Math.PI;
			}
			var this192 = f120;
			var za60 = this192;
			var f121;
			if(gamma7 >= 0 && gamma7 > Math.PI) {
				f121 = gamma7;
			} else {
				var a121 = gamma7 % (2 * Math.PI);
				f121 = a121 >= 0 ? a121 : a121 + 2 * Math.PI;
			}
			var this193 = f121;
			var zb60 = this193;
			var fa60 = za60;
			var fb60 = zb60;
			var theta82 = Math.abs(fa60 - fb60);
			var clockwise60 = fa60 < fb60;
			var dif76 = clockwise60 ? theta82 : -theta82;
			dif75 = dif76 > 0 ? dif76 : 2 * Math.PI + dif76;
			break;
		case 1:
			var f122;
			if(0 > Math.PI) {
				f122 = 0;
			} else {
				var a122 = 0 % (2 * Math.PI);
				f122 = a122 >= 0 ? a122 : a122 + 2 * Math.PI;
			}
			var this194 = f122;
			var za61 = this194;
			var f123;
			if(gamma7 >= 0 && gamma7 > Math.PI) {
				f123 = gamma7;
			} else {
				var a123 = gamma7 % (2 * Math.PI);
				f123 = a123 >= 0 ? a123 : a123 + 2 * Math.PI;
			}
			var this195 = f123;
			var zb61 = this195;
			var fa61 = za61;
			var fb61 = zb61;
			var theta83 = Math.abs(fa61 - fb61);
			var clockwise61 = fa61 < fb61;
			var dif77 = clockwise61 ? theta83 : -theta83;
			dif75 = dif77 < 0 ? dif77 : -2 * Math.PI + dif77;
			break;
		case 2:
			var f124;
			if(0 > Math.PI) {
				f124 = 0;
			} else {
				var a124 = 0 % (2 * Math.PI);
				f124 = a124 >= 0 ? a124 : a124 + 2 * Math.PI;
			}
			var this196 = f124;
			var za62 = this196;
			var f125;
			if(gamma7 >= 0 && gamma7 > Math.PI) {
				f125 = gamma7;
			} else {
				var a125 = gamma7 % (2 * Math.PI);
				f125 = a125 >= 0 ? a125 : a125 + 2 * Math.PI;
			}
			var this197 = f125;
			var zb62 = this197;
			var fa62 = za62;
			var fb62 = zb62;
			var theta84 = Math.abs(fa62 - fb62);
			var smallest15 = theta84 <= Math.PI;
			var clockwise62 = fa62 < fb62;
			var dif78 = clockwise62 ? theta84 : -theta84;
			dif75 = smallest15 ? dif78 : clockwise62 ? -(2 * Math.PI - theta84) : 2 * Math.PI - theta84;
			break;
		case 3:
			var f126;
			if(0 > Math.PI) {
				f126 = 0;
			} else {
				var a126 = 0 % (2 * Math.PI);
				f126 = a126 >= 0 ? a126 : a126 + 2 * Math.PI;
			}
			var this198 = f126;
			var za63 = this198;
			var f127;
			if(gamma7 >= 0 && gamma7 > Math.PI) {
				f127 = gamma7;
			} else {
				var a127 = gamma7 % (2 * Math.PI);
				f127 = a127 >= 0 ? a127 : a127 + 2 * Math.PI;
			}
			var this199 = f127;
			var zb63 = this199;
			var fa63 = za63;
			var fb63 = zb63;
			var theta85 = Math.abs(fa63 - fb63);
			var largest15 = theta85 > Math.PI;
			var clockwise63 = fa63 < fb63;
			var dif79 = clockwise63 ? theta85 : -theta85;
			dif75 = largest15 ? dif79 : clockwise63 ? -(2 * Math.PI - theta85) : 2 * Math.PI - theta85;
			break;
		}
		var positive15 = dif75 >= 0;
		var totalSteps15 = Math.ceil(Math.abs(dif75) / step47);
		var step48 = dif75 / totalSteps15;
		var angle15 = 0;
		var cx48;
		var cy48;
		var bx48 = 0;
		var by48 = 0;
		var _g48 = 0;
		var _g138 = totalSteps15 + 1;
		while(_g48 < _g138) {
			var i32 = _g48++;
			cx48 = dx18 + radius14 * Math.sin(angle15);
			cy48 = dy18 + radius14 * Math.cos(angle15);
			if(i32 != 0) {
				drawType14.triangle(dx18,dy18,0,bx48,by48,0,cx48,cy48,0);
				var m62 = trilateral2_Shaper.transformMatrix;
				if(m62 != null) {
					drawType14.transform(m62);
				}
				drawType14.next();
			}
			angle15 += step48;
			bx48 = cx48;
			by48 = cy48;
		}
		var len14 = count3 += totalSteps15;
		var color8 = rs6.color;
		if(color8 == -1) {
			color8 = this167.currentColor;
		}
		this167.colorType.colorTriangles(color8,len14);
		var end14 = start14 + len14 - 1;
		var s06 = new trilateral2_IndexRange(start14,end14);
		var this200 = this.spots;
		var this201 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this202 = this201;
		var this203 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this200.dz / 2);
		var s30 = this203;
		var this204 = new geom_structure_Mat4x3(this202.a * s30.a + this202.b * s30.e + this202.c * s30.i,this202.a * s30.b + this202.b * s30.f + this202.c * s30.j,this202.a * s30.c + this202.b * s30.g + this202.c * s30.k,this202.a * s30.d + this202.b * s30.h + this202.c * s30.l + this202.d,this202.e * s30.a + this202.f * s30.e + this202.g * s30.i,this202.e * s30.b + this202.f * s30.f + this202.g * s30.j,this202.e * s30.c + this202.f * s30.g + this202.g * s30.k,this202.e * s30.d + this202.f * s30.h + this202.g * s30.l + this202.h,this202.i * s30.a + this202.j * s30.e + this202.k * s30.i,this202.i * s30.b + this202.j * s30.f + this202.k * s30.j,this202.i * s30.c + this202.j * s30.g + this202.k * s30.k,this202.i * s30.d + this202.j * s30.h + this202.k * s30.l + this202.l);
		var trans3 = this204;
		this200.drawType.transformRange(trans3,s06.start,s06.end);
		var this205 = this.spots;
		var rs7 = this.spotShape;
		var s07 = rs7.clone();
		s07.x -= 30;
		s07.y -= 30;
		var start15 = this205.drawType.get_size();
		var drawType15 = this205.drawType;
		var ax21 = s07.x;
		var ay21 = s07.y;
		var radius15 = s07.radius;
		var sides23 = 36;
		if(sides23 == null) {
			sides23 = 36;
		}
		var pi37 = Math.PI;
		var theta86 = pi37 / 2;
		var step49 = pi37 * 2 / sides23;
		var bx49;
		var by49;
		var cx49;
		var cy49;
		var _g49 = 0;
		var _g139 = sides23;
		while(_g49 < _g139) {
			var i33 = _g49++;
			bx49 = ax21 + radius15 * Math.sin(theta86);
			by49 = ay21 + radius15 * Math.cos(theta86);
			theta86 += step49;
			cx49 = ax21 + radius15 * Math.sin(theta86);
			cy49 = ay21 + radius15 * Math.cos(theta86);
			drawType15.triangle(ax21,ay21,0,bx49,by49,0,cx49,cy49,0);
			var m63 = trilateral2_Shaper.transformMatrix;
			if(m63 != null) {
				drawType15.transform(m63);
			}
			drawType15.next();
		}
		var len15 = sides23;
		var color9 = s07.color;
		if(color9 == -1) {
			color9 = this205.currentColor;
		}
		this205.colorType.colorTriangles(color9,len15);
		var end15 = start15 + len15 - 1;
		var startEnd11 = new trilateral2_IndexRange(start15,end15);
		var c03 = startEnd11;
		var s116 = rs7.clone();
		s116.x += 30;
		s116.y -= 30;
		var start16 = this205.drawType.get_size();
		var drawType16 = this205.drawType;
		var ax22 = s116.x;
		var ay22 = s116.y;
		var radius16 = s116.radius;
		var sides24 = 36;
		if(sides24 == null) {
			sides24 = 36;
		}
		var pi38 = Math.PI;
		var theta87 = pi38 / 2;
		var step50 = pi38 * 2 / sides24;
		var bx50;
		var by50;
		var cx50;
		var cy50;
		var _g50 = 0;
		var _g140 = sides24;
		while(_g50 < _g140) {
			var i34 = _g50++;
			bx50 = ax22 + radius16 * Math.sin(theta87);
			by50 = ay22 + radius16 * Math.cos(theta87);
			theta87 += step50;
			cx50 = ax22 + radius16 * Math.sin(theta87);
			cy50 = ay22 + radius16 * Math.cos(theta87);
			drawType16.triangle(ax22,ay22,0,bx50,by50,0,cx50,cy50,0);
			var m64 = trilateral2_Shaper.transformMatrix;
			if(m64 != null) {
				drawType16.transform(m64);
			}
			drawType16.next();
		}
		var len16 = sides24;
		var color10 = s116.color;
		if(color10 == -1) {
			color10 = this205.currentColor;
		}
		this205.colorType.colorTriangles(color10,len16);
		var end16 = start16 + len16 - 1;
		var startEnd12 = new trilateral2_IndexRange(start16,end16);
		var c14 = startEnd12;
		var s210 = rs7.clone();
		s210.x -= 30;
		s210.y += 30;
		var start17 = this205.drawType.get_size();
		var drawType17 = this205.drawType;
		var ax23 = s210.x;
		var ay23 = s210.y;
		var radius17 = s210.radius;
		var sides25 = 36;
		if(sides25 == null) {
			sides25 = 36;
		}
		var pi39 = Math.PI;
		var theta88 = pi39 / 2;
		var step51 = pi39 * 2 / sides25;
		var bx51;
		var by51;
		var cx51;
		var cy51;
		var _g51 = 0;
		var _g141 = sides25;
		while(_g51 < _g141) {
			var i35 = _g51++;
			bx51 = ax23 + radius17 * Math.sin(theta88);
			by51 = ay23 + radius17 * Math.cos(theta88);
			theta88 += step51;
			cx51 = ax23 + radius17 * Math.sin(theta88);
			cy51 = ay23 + radius17 * Math.cos(theta88);
			drawType17.triangle(ax23,ay23,0,bx51,by51,0,cx51,cy51,0);
			var m65 = trilateral2_Shaper.transformMatrix;
			if(m65 != null) {
				drawType17.transform(m65);
			}
			drawType17.next();
		}
		var len17 = sides25;
		var color11 = s210.color;
		if(color11 == -1) {
			color11 = this205.currentColor;
		}
		this205.colorType.colorTriangles(color11,len17);
		var end17 = start17 + len17 - 1;
		var startEnd13 = new trilateral2_IndexRange(start17,end17);
		var c23 = startEnd13;
		var s33 = rs7.clone();
		s33.x += 30;
		s33.y += 30;
		var start18 = this205.drawType.get_size();
		var drawType18 = this205.drawType;
		var ax24 = s33.x;
		var ay24 = s33.y;
		var radius18 = s33.radius;
		var sides26 = 36;
		if(sides26 == null) {
			sides26 = 36;
		}
		var pi40 = Math.PI;
		var theta89 = pi40 / 2;
		var step52 = pi40 * 2 / sides26;
		var bx52;
		var by52;
		var cx52;
		var cy52;
		var _g52 = 0;
		var _g142 = sides26;
		while(_g52 < _g142) {
			var i36 = _g52++;
			bx52 = ax24 + radius18 * Math.sin(theta89);
			by52 = ay24 + radius18 * Math.cos(theta89);
			theta89 += step52;
			cx52 = ax24 + radius18 * Math.sin(theta89);
			cy52 = ay24 + radius18 * Math.cos(theta89);
			drawType18.triangle(ax24,ay24,0,bx52,by52,0,cx52,cy52,0);
			var m66 = trilateral2_Shaper.transformMatrix;
			if(m66 != null) {
				drawType18.transform(m66);
			}
			drawType18.next();
		}
		var len18 = sides26;
		var color12 = s33.color;
		if(color12 == -1) {
			color12 = this205.currentColor;
		}
		this205.colorType.colorTriangles(color12,len18);
		var end18 = start18 + len18 - 1;
		var startEnd14 = new trilateral2_IndexRange(start18,end18);
		var c32 = startEnd14;
		var s117 = new trilateral2_IndexRange(c03.start,c32.end);
		var s211 = new trilateral2_IndexRange(s06.start,s117.end);
		this.spots.drawType.transformRange(trans_3,s211.start,s211.end);
		var s42 = s211;
		var this206 = this.spots;
		var rs8 = this.dieShape;
		var start19 = this206.drawType.get_size();
		var drawType19 = this206.drawType;
		var x11 = rs8.x - rs8.radius;
		var y11 = rs8.y - rs8.radius;
		var width4 = rs8.radius * 2;
		var height4 = rs8.radius * 2;
		var radius19 = this206.rounded;
		var pi41 = Math.PI;
		var pi_24 = Math.PI / 2;
		var ax25 = x11 + radius19;
		var ay25 = y11 + radius19;
		var bx53 = x11 + width4 - radius19;
		var by53 = y11 + radius19;
		var cx53 = bx53;
		var cy53 = y11 + height4 - radius19;
		var dx22 = ax25;
		var dy22 = cy53;
		var count4 = 0;
		var ax26 = ax25;
		var ay26 = y11;
		var bx54 = ax25 + (width4 - radius19 * 2);
		var by54 = ay26;
		var cx54 = bx54;
		var cy54 = ay26 + height4;
		var dx23 = ax25;
		var dy23 = cy54;
		drawType19.triangle(ax26,ay26,0,bx54,by54,0,dx23,dy23,0);
		var m67 = trilateral2_Shaper.transformMatrix;
		if(m67 != null) {
			drawType19.transform(m67);
		}
		drawType19.next();
		drawType19.triangle(bx54,by54,0,cx54,cy54,0,dx23,dy23,0);
		var m68 = trilateral2_Shaper.transformMatrix;
		if(m68 != null) {
			drawType19.transform(m68);
		}
		drawType19.next();
		count4 += 2;
		var dimY4 = height4 - 2 * radius19;
		var ax27 = x11;
		var ay27 = ay25;
		var bx55 = x11 + radius19;
		var by55 = ay27;
		var cx55 = bx55;
		var cy55 = ay27 + dimY4;
		var dx24 = x11;
		var dy24 = cy55;
		drawType19.triangle(ax27,ay27,0,bx55,by55,0,dx24,dy24,0);
		var m69 = trilateral2_Shaper.transformMatrix;
		if(m69 != null) {
			drawType19.transform(m69);
		}
		drawType19.next();
		drawType19.triangle(bx55,by55,0,cx55,cy55,0,dx24,dy24,0);
		var m70 = trilateral2_Shaper.transformMatrix;
		if(m70 != null) {
			drawType19.transform(m70);
		}
		drawType19.next();
		count4 += 2;
		var ax28 = bx53;
		var ay28 = by53;
		var bx56 = bx53 + radius19;
		var by56 = ay28;
		var cx56 = bx56;
		var cy56 = ay28 + dimY4;
		var dx25 = bx53;
		var dy25 = cy56;
		drawType19.triangle(ax28,ay28,0,bx56,by56,0,dx25,dy25,0);
		var m71 = trilateral2_Shaper.transformMatrix;
		if(m71 != null) {
			drawType19.transform(m71);
		}
		drawType19.next();
		drawType19.triangle(bx56,by56,0,cx56,cy56,0,dx25,dy25,0);
		var m72 = trilateral2_Shaper.transformMatrix;
		if(m72 != null) {
			drawType19.transform(m72);
		}
		drawType19.next();
		count4 += 2;
		var beta4 = -pi41;
		var gamma8 = -pi_24;
		var pi42 = Math.PI;
		var step53 = pi42 * 2 / 36;
		var dif80;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f128;
			if(beta4 >= 0 && beta4 > Math.PI) {
				f128 = beta4;
			} else {
				var a128 = beta4 % (2 * Math.PI);
				f128 = a128 >= 0 ? a128 : a128 + 2 * Math.PI;
			}
			var this207 = f128;
			var za64 = this207;
			var f129;
			if(gamma8 >= 0 && gamma8 > Math.PI) {
				f129 = gamma8;
			} else {
				var a129 = gamma8 % (2 * Math.PI);
				f129 = a129 >= 0 ? a129 : a129 + 2 * Math.PI;
			}
			var this208 = f129;
			var zb64 = this208;
			var fa64 = za64;
			var fb64 = zb64;
			var theta90 = Math.abs(fa64 - fb64);
			var clockwise64 = fa64 < fb64;
			var dif81 = clockwise64 ? theta90 : -theta90;
			dif80 = dif81 > 0 ? dif81 : 2 * Math.PI + dif81;
			break;
		case 1:
			var f130;
			if(beta4 >= 0 && beta4 > Math.PI) {
				f130 = beta4;
			} else {
				var a130 = beta4 % (2 * Math.PI);
				f130 = a130 >= 0 ? a130 : a130 + 2 * Math.PI;
			}
			var this209 = f130;
			var za65 = this209;
			var f131;
			if(gamma8 >= 0 && gamma8 > Math.PI) {
				f131 = gamma8;
			} else {
				var a131 = gamma8 % (2 * Math.PI);
				f131 = a131 >= 0 ? a131 : a131 + 2 * Math.PI;
			}
			var this210 = f131;
			var zb65 = this210;
			var fa65 = za65;
			var fb65 = zb65;
			var theta91 = Math.abs(fa65 - fb65);
			var clockwise65 = fa65 < fb65;
			var dif82 = clockwise65 ? theta91 : -theta91;
			dif80 = dif82 < 0 ? dif82 : -2 * Math.PI + dif82;
			break;
		case 2:
			var f132;
			if(beta4 >= 0 && beta4 > Math.PI) {
				f132 = beta4;
			} else {
				var a132 = beta4 % (2 * Math.PI);
				f132 = a132 >= 0 ? a132 : a132 + 2 * Math.PI;
			}
			var this211 = f132;
			var za66 = this211;
			var f133;
			if(gamma8 >= 0 && gamma8 > Math.PI) {
				f133 = gamma8;
			} else {
				var a133 = gamma8 % (2 * Math.PI);
				f133 = a133 >= 0 ? a133 : a133 + 2 * Math.PI;
			}
			var this212 = f133;
			var zb66 = this212;
			var fa66 = za66;
			var fb66 = zb66;
			var theta92 = Math.abs(fa66 - fb66);
			var smallest16 = theta92 <= Math.PI;
			var clockwise66 = fa66 < fb66;
			var dif83 = clockwise66 ? theta92 : -theta92;
			dif80 = smallest16 ? dif83 : clockwise66 ? -(2 * Math.PI - theta92) : 2 * Math.PI - theta92;
			break;
		case 3:
			var f134;
			if(beta4 >= 0 && beta4 > Math.PI) {
				f134 = beta4;
			} else {
				var a134 = beta4 % (2 * Math.PI);
				f134 = a134 >= 0 ? a134 : a134 + 2 * Math.PI;
			}
			var this213 = f134;
			var za67 = this213;
			var f135;
			if(gamma8 >= 0 && gamma8 > Math.PI) {
				f135 = gamma8;
			} else {
				var a135 = gamma8 % (2 * Math.PI);
				f135 = a135 >= 0 ? a135 : a135 + 2 * Math.PI;
			}
			var this214 = f135;
			var zb67 = this214;
			var fa67 = za67;
			var fb67 = zb67;
			var theta93 = Math.abs(fa67 - fb67);
			var largest16 = theta93 > Math.PI;
			var clockwise67 = fa67 < fb67;
			var dif84 = clockwise67 ? theta93 : -theta93;
			dif80 = largest16 ? dif84 : clockwise67 ? -(2 * Math.PI - theta93) : 2 * Math.PI - theta93;
			break;
		}
		var positive16 = dif80 >= 0;
		var totalSteps16 = Math.ceil(Math.abs(dif80) / step53);
		var step54 = dif80 / totalSteps16;
		var angle16 = beta4;
		var cx57;
		var cy57;
		var bx57 = 0;
		var by57 = 0;
		var _g53 = 0;
		var _g143 = totalSteps16 + 1;
		while(_g53 < _g143) {
			var i37 = _g53++;
			cx57 = ax25 + radius19 * Math.sin(angle16);
			cy57 = ay25 + radius19 * Math.cos(angle16);
			if(i37 != 0) {
				drawType19.triangle(ax25,ay25,0,bx57,by57,0,cx57,cy57,0);
				var m73 = trilateral2_Shaper.transformMatrix;
				if(m73 != null) {
					drawType19.transform(m73);
				}
				drawType19.next();
			}
			angle16 += step54;
			bx57 = cx57;
			by57 = cy57;
		}
		count4 += totalSteps16;
		var pi43 = Math.PI;
		var step55 = pi43 * 2 / 36;
		var dif85;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f136;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f136 = pi_24;
			} else {
				var a136 = pi_24 % (2 * Math.PI);
				f136 = a136 >= 0 ? a136 : a136 + 2 * Math.PI;
			}
			var this215 = f136;
			var za68 = this215;
			var f137;
			if(pi41 >= 0 && pi41 > Math.PI) {
				f137 = pi41;
			} else {
				var a137 = pi41 % (2 * Math.PI);
				f137 = a137 >= 0 ? a137 : a137 + 2 * Math.PI;
			}
			var this216 = f137;
			var zb68 = this216;
			var fa68 = za68;
			var fb68 = zb68;
			var theta94 = Math.abs(fa68 - fb68);
			var clockwise68 = fa68 < fb68;
			var dif86 = clockwise68 ? theta94 : -theta94;
			dif85 = dif86 > 0 ? dif86 : 2 * Math.PI + dif86;
			break;
		case 1:
			var f138;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f138 = pi_24;
			} else {
				var a138 = pi_24 % (2 * Math.PI);
				f138 = a138 >= 0 ? a138 : a138 + 2 * Math.PI;
			}
			var this217 = f138;
			var za69 = this217;
			var f139;
			if(pi41 >= 0 && pi41 > Math.PI) {
				f139 = pi41;
			} else {
				var a139 = pi41 % (2 * Math.PI);
				f139 = a139 >= 0 ? a139 : a139 + 2 * Math.PI;
			}
			var this218 = f139;
			var zb69 = this218;
			var fa69 = za69;
			var fb69 = zb69;
			var theta95 = Math.abs(fa69 - fb69);
			var clockwise69 = fa69 < fb69;
			var dif87 = clockwise69 ? theta95 : -theta95;
			dif85 = dif87 < 0 ? dif87 : -2 * Math.PI + dif87;
			break;
		case 2:
			var f140;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f140 = pi_24;
			} else {
				var a140 = pi_24 % (2 * Math.PI);
				f140 = a140 >= 0 ? a140 : a140 + 2 * Math.PI;
			}
			var this219 = f140;
			var za70 = this219;
			var f141;
			if(pi41 >= 0 && pi41 > Math.PI) {
				f141 = pi41;
			} else {
				var a141 = pi41 % (2 * Math.PI);
				f141 = a141 >= 0 ? a141 : a141 + 2 * Math.PI;
			}
			var this220 = f141;
			var zb70 = this220;
			var fa70 = za70;
			var fb70 = zb70;
			var theta96 = Math.abs(fa70 - fb70);
			var smallest17 = theta96 <= Math.PI;
			var clockwise70 = fa70 < fb70;
			var dif88 = clockwise70 ? theta96 : -theta96;
			dif85 = smallest17 ? dif88 : clockwise70 ? -(2 * Math.PI - theta96) : 2 * Math.PI - theta96;
			break;
		case 3:
			var f142;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f142 = pi_24;
			} else {
				var a142 = pi_24 % (2 * Math.PI);
				f142 = a142 >= 0 ? a142 : a142 + 2 * Math.PI;
			}
			var this221 = f142;
			var za71 = this221;
			var f143;
			if(pi41 >= 0 && pi41 > Math.PI) {
				f143 = pi41;
			} else {
				var a143 = pi41 % (2 * Math.PI);
				f143 = a143 >= 0 ? a143 : a143 + 2 * Math.PI;
			}
			var this222 = f143;
			var zb71 = this222;
			var fa71 = za71;
			var fb71 = zb71;
			var theta97 = Math.abs(fa71 - fb71);
			var largest17 = theta97 > Math.PI;
			var clockwise71 = fa71 < fb71;
			var dif89 = clockwise71 ? theta97 : -theta97;
			dif85 = largest17 ? dif89 : clockwise71 ? -(2 * Math.PI - theta97) : 2 * Math.PI - theta97;
			break;
		}
		var positive17 = dif85 >= 0;
		var totalSteps17 = Math.ceil(Math.abs(dif85) / step55);
		var step56 = dif85 / totalSteps17;
		var angle17 = pi_24;
		var cx58;
		var cy58;
		var bx58 = 0;
		var by58 = 0;
		var _g54 = 0;
		var _g144 = totalSteps17 + 1;
		while(_g54 < _g144) {
			var i38 = _g54++;
			cx58 = bx53 + radius19 * Math.sin(angle17);
			cy58 = by53 + radius19 * Math.cos(angle17);
			if(i38 != 0) {
				drawType19.triangle(bx53,by53,0,bx58,by58,0,cx58,cy58,0);
				var m74 = trilateral2_Shaper.transformMatrix;
				if(m74 != null) {
					drawType19.transform(m74);
				}
				drawType19.next();
			}
			angle17 += step56;
			bx58 = cx58;
			by58 = cy58;
		}
		count4 += totalSteps17;
		var pi44 = Math.PI;
		var step57 = pi44 * 2 / 36;
		var dif90;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f144;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f144 = pi_24;
			} else {
				var a144 = pi_24 % (2 * Math.PI);
				f144 = a144 >= 0 ? a144 : a144 + 2 * Math.PI;
			}
			var this223 = f144;
			var za72 = this223;
			var f145;
			if(0 > Math.PI) {
				f145 = 0;
			} else {
				var a145 = 0 % (2 * Math.PI);
				f145 = a145 >= 0 ? a145 : a145 + 2 * Math.PI;
			}
			var this224 = f145;
			var zb72 = this224;
			var fa72 = za72;
			var fb72 = zb72;
			var theta98 = Math.abs(fa72 - fb72);
			var clockwise72 = fa72 < fb72;
			var dif91 = clockwise72 ? theta98 : -theta98;
			dif90 = dif91 > 0 ? dif91 : 2 * Math.PI + dif91;
			break;
		case 1:
			var f146;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f146 = pi_24;
			} else {
				var a146 = pi_24 % (2 * Math.PI);
				f146 = a146 >= 0 ? a146 : a146 + 2 * Math.PI;
			}
			var this225 = f146;
			var za73 = this225;
			var f147;
			if(0 > Math.PI) {
				f147 = 0;
			} else {
				var a147 = 0 % (2 * Math.PI);
				f147 = a147 >= 0 ? a147 : a147 + 2 * Math.PI;
			}
			var this226 = f147;
			var zb73 = this226;
			var fa73 = za73;
			var fb73 = zb73;
			var theta99 = Math.abs(fa73 - fb73);
			var clockwise73 = fa73 < fb73;
			var dif92 = clockwise73 ? theta99 : -theta99;
			dif90 = dif92 < 0 ? dif92 : -2 * Math.PI + dif92;
			break;
		case 2:
			var f148;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f148 = pi_24;
			} else {
				var a148 = pi_24 % (2 * Math.PI);
				f148 = a148 >= 0 ? a148 : a148 + 2 * Math.PI;
			}
			var this227 = f148;
			var za74 = this227;
			var f149;
			if(0 > Math.PI) {
				f149 = 0;
			} else {
				var a149 = 0 % (2 * Math.PI);
				f149 = a149 >= 0 ? a149 : a149 + 2 * Math.PI;
			}
			var this228 = f149;
			var zb74 = this228;
			var fa74 = za74;
			var fb74 = zb74;
			var theta100 = Math.abs(fa74 - fb74);
			var smallest18 = theta100 <= Math.PI;
			var clockwise74 = fa74 < fb74;
			var dif93 = clockwise74 ? theta100 : -theta100;
			dif90 = smallest18 ? dif93 : clockwise74 ? -(2 * Math.PI - theta100) : 2 * Math.PI - theta100;
			break;
		case 3:
			var f150;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f150 = pi_24;
			} else {
				var a150 = pi_24 % (2 * Math.PI);
				f150 = a150 >= 0 ? a150 : a150 + 2 * Math.PI;
			}
			var this229 = f150;
			var za75 = this229;
			var f151;
			if(0 > Math.PI) {
				f151 = 0;
			} else {
				var a151 = 0 % (2 * Math.PI);
				f151 = a151 >= 0 ? a151 : a151 + 2 * Math.PI;
			}
			var this230 = f151;
			var zb75 = this230;
			var fa75 = za75;
			var fb75 = zb75;
			var theta101 = Math.abs(fa75 - fb75);
			var largest18 = theta101 > Math.PI;
			var clockwise75 = fa75 < fb75;
			var dif94 = clockwise75 ? theta101 : -theta101;
			dif90 = largest18 ? dif94 : clockwise75 ? -(2 * Math.PI - theta101) : 2 * Math.PI - theta101;
			break;
		}
		var positive18 = dif90 >= 0;
		var totalSteps18 = Math.ceil(Math.abs(dif90) / step57);
		var step58 = dif90 / totalSteps18;
		var angle18 = pi_24;
		var cx59;
		var cy59;
		var bx59 = 0;
		var by59 = 0;
		var _g55 = 0;
		var _g145 = totalSteps18 + 1;
		while(_g55 < _g145) {
			var i39 = _g55++;
			cx59 = cx53 + radius19 * Math.sin(angle18);
			cy59 = cy53 + radius19 * Math.cos(angle18);
			if(i39 != 0) {
				drawType19.triangle(cx53,cy53,0,bx59,by59,0,cx59,cy59,0);
				var m75 = trilateral2_Shaper.transformMatrix;
				if(m75 != null) {
					drawType19.transform(m75);
				}
				drawType19.next();
			}
			angle18 += step58;
			bx59 = cx59;
			by59 = cy59;
		}
		count4 += totalSteps18;
		var gamma9 = -pi_24;
		var pi45 = Math.PI;
		var step59 = pi45 * 2 / 36;
		var dif95;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f152;
			if(0 > Math.PI) {
				f152 = 0;
			} else {
				var a152 = 0 % (2 * Math.PI);
				f152 = a152 >= 0 ? a152 : a152 + 2 * Math.PI;
			}
			var this231 = f152;
			var za76 = this231;
			var f153;
			if(gamma9 >= 0 && gamma9 > Math.PI) {
				f153 = gamma9;
			} else {
				var a153 = gamma9 % (2 * Math.PI);
				f153 = a153 >= 0 ? a153 : a153 + 2 * Math.PI;
			}
			var this232 = f153;
			var zb76 = this232;
			var fa76 = za76;
			var fb76 = zb76;
			var theta102 = Math.abs(fa76 - fb76);
			var clockwise76 = fa76 < fb76;
			var dif96 = clockwise76 ? theta102 : -theta102;
			dif95 = dif96 > 0 ? dif96 : 2 * Math.PI + dif96;
			break;
		case 1:
			var f154;
			if(0 > Math.PI) {
				f154 = 0;
			} else {
				var a154 = 0 % (2 * Math.PI);
				f154 = a154 >= 0 ? a154 : a154 + 2 * Math.PI;
			}
			var this233 = f154;
			var za77 = this233;
			var f155;
			if(gamma9 >= 0 && gamma9 > Math.PI) {
				f155 = gamma9;
			} else {
				var a155 = gamma9 % (2 * Math.PI);
				f155 = a155 >= 0 ? a155 : a155 + 2 * Math.PI;
			}
			var this234 = f155;
			var zb77 = this234;
			var fa77 = za77;
			var fb77 = zb77;
			var theta103 = Math.abs(fa77 - fb77);
			var clockwise77 = fa77 < fb77;
			var dif97 = clockwise77 ? theta103 : -theta103;
			dif95 = dif97 < 0 ? dif97 : -2 * Math.PI + dif97;
			break;
		case 2:
			var f156;
			if(0 > Math.PI) {
				f156 = 0;
			} else {
				var a156 = 0 % (2 * Math.PI);
				f156 = a156 >= 0 ? a156 : a156 + 2 * Math.PI;
			}
			var this235 = f156;
			var za78 = this235;
			var f157;
			if(gamma9 >= 0 && gamma9 > Math.PI) {
				f157 = gamma9;
			} else {
				var a157 = gamma9 % (2 * Math.PI);
				f157 = a157 >= 0 ? a157 : a157 + 2 * Math.PI;
			}
			var this236 = f157;
			var zb78 = this236;
			var fa78 = za78;
			var fb78 = zb78;
			var theta104 = Math.abs(fa78 - fb78);
			var smallest19 = theta104 <= Math.PI;
			var clockwise78 = fa78 < fb78;
			var dif98 = clockwise78 ? theta104 : -theta104;
			dif95 = smallest19 ? dif98 : clockwise78 ? -(2 * Math.PI - theta104) : 2 * Math.PI - theta104;
			break;
		case 3:
			var f158;
			if(0 > Math.PI) {
				f158 = 0;
			} else {
				var a158 = 0 % (2 * Math.PI);
				f158 = a158 >= 0 ? a158 : a158 + 2 * Math.PI;
			}
			var this237 = f158;
			var za79 = this237;
			var f159;
			if(gamma9 >= 0 && gamma9 > Math.PI) {
				f159 = gamma9;
			} else {
				var a159 = gamma9 % (2 * Math.PI);
				f159 = a159 >= 0 ? a159 : a159 + 2 * Math.PI;
			}
			var this238 = f159;
			var zb79 = this238;
			var fa79 = za79;
			var fb79 = zb79;
			var theta105 = Math.abs(fa79 - fb79);
			var largest19 = theta105 > Math.PI;
			var clockwise79 = fa79 < fb79;
			var dif99 = clockwise79 ? theta105 : -theta105;
			dif95 = largest19 ? dif99 : clockwise79 ? -(2 * Math.PI - theta105) : 2 * Math.PI - theta105;
			break;
		}
		var positive19 = dif95 >= 0;
		var totalSteps19 = Math.ceil(Math.abs(dif95) / step59);
		var step60 = dif95 / totalSteps19;
		var angle19 = 0;
		var cx60;
		var cy60;
		var bx60 = 0;
		var by60 = 0;
		var _g56 = 0;
		var _g146 = totalSteps19 + 1;
		while(_g56 < _g146) {
			var i40 = _g56++;
			cx60 = dx22 + radius19 * Math.sin(angle19);
			cy60 = dy22 + radius19 * Math.cos(angle19);
			if(i40 != 0) {
				drawType19.triangle(dx22,dy22,0,bx60,by60,0,cx60,cy60,0);
				var m76 = trilateral2_Shaper.transformMatrix;
				if(m76 != null) {
					drawType19.transform(m76);
				}
				drawType19.next();
			}
			angle19 += step60;
			bx60 = cx60;
			by60 = cy60;
		}
		var len19 = count4 += totalSteps19;
		var color13 = rs8.color;
		if(color13 == -1) {
			color13 = this206.currentColor;
		}
		this206.colorType.colorTriangles(color13,len19);
		var end19 = start19 + len19 - 1;
		var s08 = new trilateral2_IndexRange(start19,end19);
		var this239 = this.spots;
		var this240 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this241 = this240;
		var this242 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this239.dz / 2);
		var s34 = this242;
		var this243 = new geom_structure_Mat4x3(this241.a * s34.a + this241.b * s34.e + this241.c * s34.i,this241.a * s34.b + this241.b * s34.f + this241.c * s34.j,this241.a * s34.c + this241.b * s34.g + this241.c * s34.k,this241.a * s34.d + this241.b * s34.h + this241.c * s34.l + this241.d,this241.e * s34.a + this241.f * s34.e + this241.g * s34.i,this241.e * s34.b + this241.f * s34.f + this241.g * s34.j,this241.e * s34.c + this241.f * s34.g + this241.g * s34.k,this241.e * s34.d + this241.f * s34.h + this241.g * s34.l + this241.h,this241.i * s34.a + this241.j * s34.e + this241.k * s34.i,this241.i * s34.b + this241.j * s34.f + this241.k * s34.j,this241.i * s34.c + this241.j * s34.g + this241.k * s34.k,this241.i * s34.d + this241.j * s34.h + this241.k * s34.l + this241.l);
		var trans4 = this243;
		this239.drawType.transformRange(trans4,s08.start,s08.end);
		var this244 = this.spots;
		var rs9 = this.spotShape;
		var s09 = rs9.clone();
		s09.x -= 30;
		s09.y -= 30;
		var start20 = this244.drawType.get_size();
		var drawType20 = this244.drawType;
		var ax29 = s09.x;
		var ay29 = s09.y;
		var radius20 = s09.radius;
		var sides27 = 36;
		if(sides27 == null) {
			sides27 = 36;
		}
		var pi46 = Math.PI;
		var theta106 = pi46 / 2;
		var step61 = pi46 * 2 / sides27;
		var bx61;
		var by61;
		var cx61;
		var cy61;
		var _g57 = 0;
		var _g147 = sides27;
		while(_g57 < _g147) {
			var i41 = _g57++;
			bx61 = ax29 + radius20 * Math.sin(theta106);
			by61 = ay29 + radius20 * Math.cos(theta106);
			theta106 += step61;
			cx61 = ax29 + radius20 * Math.sin(theta106);
			cy61 = ay29 + radius20 * Math.cos(theta106);
			drawType20.triangle(ax29,ay29,0,bx61,by61,0,cx61,cy61,0);
			var m77 = trilateral2_Shaper.transformMatrix;
			if(m77 != null) {
				drawType20.transform(m77);
			}
			drawType20.next();
		}
		var len20 = sides27;
		var color14 = s09.color;
		if(color14 == -1) {
			color14 = this244.currentColor;
		}
		this244.colorType.colorTriangles(color14,len20);
		var end20 = start20 + len20 - 1;
		var startEnd15 = new trilateral2_IndexRange(start20,end20);
		var c04 = startEnd15;
		var s118 = rs9.clone();
		s118.x += 30;
		s118.y -= 30;
		var start21 = this244.drawType.get_size();
		var drawType21 = this244.drawType;
		var ax30 = s118.x;
		var ay30 = s118.y;
		var radius21 = s118.radius;
		var sides28 = 36;
		if(sides28 == null) {
			sides28 = 36;
		}
		var pi47 = Math.PI;
		var theta107 = pi47 / 2;
		var step62 = pi47 * 2 / sides28;
		var bx62;
		var by62;
		var cx62;
		var cy62;
		var _g58 = 0;
		var _g148 = sides28;
		while(_g58 < _g148) {
			var i42 = _g58++;
			bx62 = ax30 + radius21 * Math.sin(theta107);
			by62 = ay30 + radius21 * Math.cos(theta107);
			theta107 += step62;
			cx62 = ax30 + radius21 * Math.sin(theta107);
			cy62 = ay30 + radius21 * Math.cos(theta107);
			drawType21.triangle(ax30,ay30,0,bx62,by62,0,cx62,cy62,0);
			var m78 = trilateral2_Shaper.transformMatrix;
			if(m78 != null) {
				drawType21.transform(m78);
			}
			drawType21.next();
		}
		var len21 = sides28;
		var color15 = s118.color;
		if(color15 == -1) {
			color15 = this244.currentColor;
		}
		this244.colorType.colorTriangles(color15,len21);
		var end21 = start21 + len21 - 1;
		var startEnd16 = new trilateral2_IndexRange(start21,end21);
		var c15 = startEnd16;
		var s212 = rs9.clone();
		s212.x -= 30;
		s212.y += 30;
		var start22 = this244.drawType.get_size();
		var drawType22 = this244.drawType;
		var ax31 = s212.x;
		var ay31 = s212.y;
		var radius22 = s212.radius;
		var sides29 = 36;
		if(sides29 == null) {
			sides29 = 36;
		}
		var pi48 = Math.PI;
		var theta108 = pi48 / 2;
		var step63 = pi48 * 2 / sides29;
		var bx63;
		var by63;
		var cx63;
		var cy63;
		var _g59 = 0;
		var _g149 = sides29;
		while(_g59 < _g149) {
			var i43 = _g59++;
			bx63 = ax31 + radius22 * Math.sin(theta108);
			by63 = ay31 + radius22 * Math.cos(theta108);
			theta108 += step63;
			cx63 = ax31 + radius22 * Math.sin(theta108);
			cy63 = ay31 + radius22 * Math.cos(theta108);
			drawType22.triangle(ax31,ay31,0,bx63,by63,0,cx63,cy63,0);
			var m79 = trilateral2_Shaper.transformMatrix;
			if(m79 != null) {
				drawType22.transform(m79);
			}
			drawType22.next();
		}
		var len22 = sides29;
		var color16 = s212.color;
		if(color16 == -1) {
			color16 = this244.currentColor;
		}
		this244.colorType.colorTriangles(color16,len22);
		var end22 = start22 + len22 - 1;
		var startEnd17 = new trilateral2_IndexRange(start22,end22);
		var c24 = startEnd17;
		var s35 = rs9.clone();
		s35.x += 30;
		s35.y += 30;
		var start23 = this244.drawType.get_size();
		var drawType23 = this244.drawType;
		var ax32 = s35.x;
		var ay32 = s35.y;
		var radius23 = s35.radius;
		var sides30 = 36;
		if(sides30 == null) {
			sides30 = 36;
		}
		var pi49 = Math.PI;
		var theta109 = pi49 / 2;
		var step64 = pi49 * 2 / sides30;
		var bx64;
		var by64;
		var cx64;
		var cy64;
		var _g60 = 0;
		var _g150 = sides30;
		while(_g60 < _g150) {
			var i44 = _g60++;
			bx64 = ax32 + radius23 * Math.sin(theta109);
			by64 = ay32 + radius23 * Math.cos(theta109);
			theta109 += step64;
			cx64 = ax32 + radius23 * Math.sin(theta109);
			cy64 = ay32 + radius23 * Math.cos(theta109);
			drawType23.triangle(ax32,ay32,0,bx64,by64,0,cx64,cy64,0);
			var m80 = trilateral2_Shaper.transformMatrix;
			if(m80 != null) {
				drawType23.transform(m80);
			}
			drawType23.next();
		}
		var len23 = sides30;
		var color17 = s35.color;
		if(color17 == -1) {
			color17 = this244.currentColor;
		}
		this244.colorType.colorTriangles(color17,len23);
		var end23 = start23 + len23 - 1;
		var startEnd18 = new trilateral2_IndexRange(start23,end23);
		var c33 = startEnd18;
		var s43 = rs9.clone();
		var start24 = this244.drawType.get_size();
		var drawType24 = this244.drawType;
		var ax33 = s43.x;
		var ay33 = s43.y;
		var radius24 = s43.radius;
		var sides31 = 36;
		if(sides31 == null) {
			sides31 = 36;
		}
		var pi50 = Math.PI;
		var theta110 = pi50 / 2;
		var step65 = pi50 * 2 / sides31;
		var bx65;
		var by65;
		var cx65;
		var cy65;
		var _g61 = 0;
		var _g151 = sides31;
		while(_g61 < _g151) {
			var i45 = _g61++;
			bx65 = ax33 + radius24 * Math.sin(theta110);
			by65 = ay33 + radius24 * Math.cos(theta110);
			theta110 += step65;
			cx65 = ax33 + radius24 * Math.sin(theta110);
			cy65 = ay33 + radius24 * Math.cos(theta110);
			drawType24.triangle(ax33,ay33,0,bx65,by65,0,cx65,cy65,0);
			var m81 = trilateral2_Shaper.transformMatrix;
			if(m81 != null) {
				drawType24.transform(m81);
			}
			drawType24.next();
		}
		var len24 = sides31;
		var color18 = s43.color;
		if(color18 == -1) {
			color18 = this244.currentColor;
		}
		this244.colorType.colorTriangles(color18,len24);
		var end24 = start24 + len24 - 1;
		var startEnd19 = new trilateral2_IndexRange(start24,end24);
		var c42 = startEnd19;
		var s119 = new trilateral2_IndexRange(c04.start,c42.end);
		var s213 = new trilateral2_IndexRange(s08.start,s119.end);
		this.spots.drawType.transformRange(trans_4,s213.start,s213.end);
		var s52 = s213;
		var this245 = this.spots;
		var rs10 = this.dieShape;
		var start25 = this245.drawType.get_size();
		var drawType25 = this245.drawType;
		var x12 = rs10.x - rs10.radius;
		var y12 = rs10.y - rs10.radius;
		var width5 = rs10.radius * 2;
		var height5 = rs10.radius * 2;
		var radius25 = this245.rounded;
		var pi51 = Math.PI;
		var pi_25 = Math.PI / 2;
		var ax34 = x12 + radius25;
		var ay34 = y12 + radius25;
		var bx66 = x12 + width5 - radius25;
		var by66 = y12 + radius25;
		var cx66 = bx66;
		var cy66 = y12 + height5 - radius25;
		var dx26 = ax34;
		var dy26 = cy66;
		var count5 = 0;
		var ax35 = ax34;
		var ay35 = y12;
		var bx67 = ax34 + (width5 - radius25 * 2);
		var by67 = ay35;
		var cx67 = bx67;
		var cy67 = ay35 + height5;
		var dx27 = ax34;
		var dy27 = cy67;
		drawType25.triangle(ax35,ay35,0,bx67,by67,0,dx27,dy27,0);
		var m82 = trilateral2_Shaper.transformMatrix;
		if(m82 != null) {
			drawType25.transform(m82);
		}
		drawType25.next();
		drawType25.triangle(bx67,by67,0,cx67,cy67,0,dx27,dy27,0);
		var m83 = trilateral2_Shaper.transformMatrix;
		if(m83 != null) {
			drawType25.transform(m83);
		}
		drawType25.next();
		count5 += 2;
		var dimY5 = height5 - 2 * radius25;
		var ax36 = x12;
		var ay36 = ay34;
		var bx68 = x12 + radius25;
		var by68 = ay36;
		var cx68 = bx68;
		var cy68 = ay36 + dimY5;
		var dx28 = x12;
		var dy28 = cy68;
		drawType25.triangle(ax36,ay36,0,bx68,by68,0,dx28,dy28,0);
		var m84 = trilateral2_Shaper.transformMatrix;
		if(m84 != null) {
			drawType25.transform(m84);
		}
		drawType25.next();
		drawType25.triangle(bx68,by68,0,cx68,cy68,0,dx28,dy28,0);
		var m85 = trilateral2_Shaper.transformMatrix;
		if(m85 != null) {
			drawType25.transform(m85);
		}
		drawType25.next();
		count5 += 2;
		var ax37 = bx66;
		var ay37 = by66;
		var bx69 = bx66 + radius25;
		var by69 = ay37;
		var cx69 = bx69;
		var cy69 = ay37 + dimY5;
		var dx29 = bx66;
		var dy29 = cy69;
		drawType25.triangle(ax37,ay37,0,bx69,by69,0,dx29,dy29,0);
		var m86 = trilateral2_Shaper.transformMatrix;
		if(m86 != null) {
			drawType25.transform(m86);
		}
		drawType25.next();
		drawType25.triangle(bx69,by69,0,cx69,cy69,0,dx29,dy29,0);
		var m87 = trilateral2_Shaper.transformMatrix;
		if(m87 != null) {
			drawType25.transform(m87);
		}
		drawType25.next();
		count5 += 2;
		var beta5 = -pi51;
		var gamma10 = -pi_25;
		var pi52 = Math.PI;
		var step66 = pi52 * 2 / 36;
		var dif100;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f160;
			if(beta5 >= 0 && beta5 > Math.PI) {
				f160 = beta5;
			} else {
				var a160 = beta5 % (2 * Math.PI);
				f160 = a160 >= 0 ? a160 : a160 + 2 * Math.PI;
			}
			var this246 = f160;
			var za80 = this246;
			var f161;
			if(gamma10 >= 0 && gamma10 > Math.PI) {
				f161 = gamma10;
			} else {
				var a161 = gamma10 % (2 * Math.PI);
				f161 = a161 >= 0 ? a161 : a161 + 2 * Math.PI;
			}
			var this247 = f161;
			var zb80 = this247;
			var fa80 = za80;
			var fb80 = zb80;
			var theta111 = Math.abs(fa80 - fb80);
			var clockwise80 = fa80 < fb80;
			var dif101 = clockwise80 ? theta111 : -theta111;
			dif100 = dif101 > 0 ? dif101 : 2 * Math.PI + dif101;
			break;
		case 1:
			var f162;
			if(beta5 >= 0 && beta5 > Math.PI) {
				f162 = beta5;
			} else {
				var a162 = beta5 % (2 * Math.PI);
				f162 = a162 >= 0 ? a162 : a162 + 2 * Math.PI;
			}
			var this248 = f162;
			var za81 = this248;
			var f163;
			if(gamma10 >= 0 && gamma10 > Math.PI) {
				f163 = gamma10;
			} else {
				var a163 = gamma10 % (2 * Math.PI);
				f163 = a163 >= 0 ? a163 : a163 + 2 * Math.PI;
			}
			var this249 = f163;
			var zb81 = this249;
			var fa81 = za81;
			var fb81 = zb81;
			var theta112 = Math.abs(fa81 - fb81);
			var clockwise81 = fa81 < fb81;
			var dif102 = clockwise81 ? theta112 : -theta112;
			dif100 = dif102 < 0 ? dif102 : -2 * Math.PI + dif102;
			break;
		case 2:
			var f164;
			if(beta5 >= 0 && beta5 > Math.PI) {
				f164 = beta5;
			} else {
				var a164 = beta5 % (2 * Math.PI);
				f164 = a164 >= 0 ? a164 : a164 + 2 * Math.PI;
			}
			var this250 = f164;
			var za82 = this250;
			var f165;
			if(gamma10 >= 0 && gamma10 > Math.PI) {
				f165 = gamma10;
			} else {
				var a165 = gamma10 % (2 * Math.PI);
				f165 = a165 >= 0 ? a165 : a165 + 2 * Math.PI;
			}
			var this251 = f165;
			var zb82 = this251;
			var fa82 = za82;
			var fb82 = zb82;
			var theta113 = Math.abs(fa82 - fb82);
			var smallest20 = theta113 <= Math.PI;
			var clockwise82 = fa82 < fb82;
			var dif103 = clockwise82 ? theta113 : -theta113;
			dif100 = smallest20 ? dif103 : clockwise82 ? -(2 * Math.PI - theta113) : 2 * Math.PI - theta113;
			break;
		case 3:
			var f166;
			if(beta5 >= 0 && beta5 > Math.PI) {
				f166 = beta5;
			} else {
				var a166 = beta5 % (2 * Math.PI);
				f166 = a166 >= 0 ? a166 : a166 + 2 * Math.PI;
			}
			var this252 = f166;
			var za83 = this252;
			var f167;
			if(gamma10 >= 0 && gamma10 > Math.PI) {
				f167 = gamma10;
			} else {
				var a167 = gamma10 % (2 * Math.PI);
				f167 = a167 >= 0 ? a167 : a167 + 2 * Math.PI;
			}
			var this253 = f167;
			var zb83 = this253;
			var fa83 = za83;
			var fb83 = zb83;
			var theta114 = Math.abs(fa83 - fb83);
			var largest20 = theta114 > Math.PI;
			var clockwise83 = fa83 < fb83;
			var dif104 = clockwise83 ? theta114 : -theta114;
			dif100 = largest20 ? dif104 : clockwise83 ? -(2 * Math.PI - theta114) : 2 * Math.PI - theta114;
			break;
		}
		var positive20 = dif100 >= 0;
		var totalSteps20 = Math.ceil(Math.abs(dif100) / step66);
		var step67 = dif100 / totalSteps20;
		var angle20 = beta5;
		var cx70;
		var cy70;
		var bx70 = 0;
		var by70 = 0;
		var _g62 = 0;
		var _g152 = totalSteps20 + 1;
		while(_g62 < _g152) {
			var i46 = _g62++;
			cx70 = ax34 + radius25 * Math.sin(angle20);
			cy70 = ay34 + radius25 * Math.cos(angle20);
			if(i46 != 0) {
				drawType25.triangle(ax34,ay34,0,bx70,by70,0,cx70,cy70,0);
				var m88 = trilateral2_Shaper.transformMatrix;
				if(m88 != null) {
					drawType25.transform(m88);
				}
				drawType25.next();
			}
			angle20 += step67;
			bx70 = cx70;
			by70 = cy70;
		}
		count5 += totalSteps20;
		var pi53 = Math.PI;
		var step68 = pi53 * 2 / 36;
		var dif105;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f168;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f168 = pi_25;
			} else {
				var a168 = pi_25 % (2 * Math.PI);
				f168 = a168 >= 0 ? a168 : a168 + 2 * Math.PI;
			}
			var this254 = f168;
			var za84 = this254;
			var f169;
			if(pi51 >= 0 && pi51 > Math.PI) {
				f169 = pi51;
			} else {
				var a169 = pi51 % (2 * Math.PI);
				f169 = a169 >= 0 ? a169 : a169 + 2 * Math.PI;
			}
			var this255 = f169;
			var zb84 = this255;
			var fa84 = za84;
			var fb84 = zb84;
			var theta115 = Math.abs(fa84 - fb84);
			var clockwise84 = fa84 < fb84;
			var dif106 = clockwise84 ? theta115 : -theta115;
			dif105 = dif106 > 0 ? dif106 : 2 * Math.PI + dif106;
			break;
		case 1:
			var f170;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f170 = pi_25;
			} else {
				var a170 = pi_25 % (2 * Math.PI);
				f170 = a170 >= 0 ? a170 : a170 + 2 * Math.PI;
			}
			var this256 = f170;
			var za85 = this256;
			var f171;
			if(pi51 >= 0 && pi51 > Math.PI) {
				f171 = pi51;
			} else {
				var a171 = pi51 % (2 * Math.PI);
				f171 = a171 >= 0 ? a171 : a171 + 2 * Math.PI;
			}
			var this257 = f171;
			var zb85 = this257;
			var fa85 = za85;
			var fb85 = zb85;
			var theta116 = Math.abs(fa85 - fb85);
			var clockwise85 = fa85 < fb85;
			var dif107 = clockwise85 ? theta116 : -theta116;
			dif105 = dif107 < 0 ? dif107 : -2 * Math.PI + dif107;
			break;
		case 2:
			var f172;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f172 = pi_25;
			} else {
				var a172 = pi_25 % (2 * Math.PI);
				f172 = a172 >= 0 ? a172 : a172 + 2 * Math.PI;
			}
			var this258 = f172;
			var za86 = this258;
			var f173;
			if(pi51 >= 0 && pi51 > Math.PI) {
				f173 = pi51;
			} else {
				var a173 = pi51 % (2 * Math.PI);
				f173 = a173 >= 0 ? a173 : a173 + 2 * Math.PI;
			}
			var this259 = f173;
			var zb86 = this259;
			var fa86 = za86;
			var fb86 = zb86;
			var theta117 = Math.abs(fa86 - fb86);
			var smallest21 = theta117 <= Math.PI;
			var clockwise86 = fa86 < fb86;
			var dif108 = clockwise86 ? theta117 : -theta117;
			dif105 = smallest21 ? dif108 : clockwise86 ? -(2 * Math.PI - theta117) : 2 * Math.PI - theta117;
			break;
		case 3:
			var f174;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f174 = pi_25;
			} else {
				var a174 = pi_25 % (2 * Math.PI);
				f174 = a174 >= 0 ? a174 : a174 + 2 * Math.PI;
			}
			var this260 = f174;
			var za87 = this260;
			var f175;
			if(pi51 >= 0 && pi51 > Math.PI) {
				f175 = pi51;
			} else {
				var a175 = pi51 % (2 * Math.PI);
				f175 = a175 >= 0 ? a175 : a175 + 2 * Math.PI;
			}
			var this261 = f175;
			var zb87 = this261;
			var fa87 = za87;
			var fb87 = zb87;
			var theta118 = Math.abs(fa87 - fb87);
			var largest21 = theta118 > Math.PI;
			var clockwise87 = fa87 < fb87;
			var dif109 = clockwise87 ? theta118 : -theta118;
			dif105 = largest21 ? dif109 : clockwise87 ? -(2 * Math.PI - theta118) : 2 * Math.PI - theta118;
			break;
		}
		var positive21 = dif105 >= 0;
		var totalSteps21 = Math.ceil(Math.abs(dif105) / step68);
		var step69 = dif105 / totalSteps21;
		var angle21 = pi_25;
		var cx71;
		var cy71;
		var bx71 = 0;
		var by71 = 0;
		var _g63 = 0;
		var _g153 = totalSteps21 + 1;
		while(_g63 < _g153) {
			var i47 = _g63++;
			cx71 = bx66 + radius25 * Math.sin(angle21);
			cy71 = by66 + radius25 * Math.cos(angle21);
			if(i47 != 0) {
				drawType25.triangle(bx66,by66,0,bx71,by71,0,cx71,cy71,0);
				var m89 = trilateral2_Shaper.transformMatrix;
				if(m89 != null) {
					drawType25.transform(m89);
				}
				drawType25.next();
			}
			angle21 += step69;
			bx71 = cx71;
			by71 = cy71;
		}
		count5 += totalSteps21;
		var pi54 = Math.PI;
		var step70 = pi54 * 2 / 36;
		var dif110;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f176;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f176 = pi_25;
			} else {
				var a176 = pi_25 % (2 * Math.PI);
				f176 = a176 >= 0 ? a176 : a176 + 2 * Math.PI;
			}
			var this262 = f176;
			var za88 = this262;
			var f177;
			if(0 > Math.PI) {
				f177 = 0;
			} else {
				var a177 = 0 % (2 * Math.PI);
				f177 = a177 >= 0 ? a177 : a177 + 2 * Math.PI;
			}
			var this263 = f177;
			var zb88 = this263;
			var fa88 = za88;
			var fb88 = zb88;
			var theta119 = Math.abs(fa88 - fb88);
			var clockwise88 = fa88 < fb88;
			var dif111 = clockwise88 ? theta119 : -theta119;
			dif110 = dif111 > 0 ? dif111 : 2 * Math.PI + dif111;
			break;
		case 1:
			var f178;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f178 = pi_25;
			} else {
				var a178 = pi_25 % (2 * Math.PI);
				f178 = a178 >= 0 ? a178 : a178 + 2 * Math.PI;
			}
			var this264 = f178;
			var za89 = this264;
			var f179;
			if(0 > Math.PI) {
				f179 = 0;
			} else {
				var a179 = 0 % (2 * Math.PI);
				f179 = a179 >= 0 ? a179 : a179 + 2 * Math.PI;
			}
			var this265 = f179;
			var zb89 = this265;
			var fa89 = za89;
			var fb89 = zb89;
			var theta120 = Math.abs(fa89 - fb89);
			var clockwise89 = fa89 < fb89;
			var dif112 = clockwise89 ? theta120 : -theta120;
			dif110 = dif112 < 0 ? dif112 : -2 * Math.PI + dif112;
			break;
		case 2:
			var f180;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f180 = pi_25;
			} else {
				var a180 = pi_25 % (2 * Math.PI);
				f180 = a180 >= 0 ? a180 : a180 + 2 * Math.PI;
			}
			var this266 = f180;
			var za90 = this266;
			var f181;
			if(0 > Math.PI) {
				f181 = 0;
			} else {
				var a181 = 0 % (2 * Math.PI);
				f181 = a181 >= 0 ? a181 : a181 + 2 * Math.PI;
			}
			var this267 = f181;
			var zb90 = this267;
			var fa90 = za90;
			var fb90 = zb90;
			var theta121 = Math.abs(fa90 - fb90);
			var smallest22 = theta121 <= Math.PI;
			var clockwise90 = fa90 < fb90;
			var dif113 = clockwise90 ? theta121 : -theta121;
			dif110 = smallest22 ? dif113 : clockwise90 ? -(2 * Math.PI - theta121) : 2 * Math.PI - theta121;
			break;
		case 3:
			var f182;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f182 = pi_25;
			} else {
				var a182 = pi_25 % (2 * Math.PI);
				f182 = a182 >= 0 ? a182 : a182 + 2 * Math.PI;
			}
			var this268 = f182;
			var za91 = this268;
			var f183;
			if(0 > Math.PI) {
				f183 = 0;
			} else {
				var a183 = 0 % (2 * Math.PI);
				f183 = a183 >= 0 ? a183 : a183 + 2 * Math.PI;
			}
			var this269 = f183;
			var zb91 = this269;
			var fa91 = za91;
			var fb91 = zb91;
			var theta122 = Math.abs(fa91 - fb91);
			var largest22 = theta122 > Math.PI;
			var clockwise91 = fa91 < fb91;
			var dif114 = clockwise91 ? theta122 : -theta122;
			dif110 = largest22 ? dif114 : clockwise91 ? -(2 * Math.PI - theta122) : 2 * Math.PI - theta122;
			break;
		}
		var positive22 = dif110 >= 0;
		var totalSteps22 = Math.ceil(Math.abs(dif110) / step70);
		var step71 = dif110 / totalSteps22;
		var angle22 = pi_25;
		var cx72;
		var cy72;
		var bx72 = 0;
		var by72 = 0;
		var _g64 = 0;
		var _g154 = totalSteps22 + 1;
		while(_g64 < _g154) {
			var i48 = _g64++;
			cx72 = cx66 + radius25 * Math.sin(angle22);
			cy72 = cy66 + radius25 * Math.cos(angle22);
			if(i48 != 0) {
				drawType25.triangle(cx66,cy66,0,bx72,by72,0,cx72,cy72,0);
				var m90 = trilateral2_Shaper.transformMatrix;
				if(m90 != null) {
					drawType25.transform(m90);
				}
				drawType25.next();
			}
			angle22 += step71;
			bx72 = cx72;
			by72 = cy72;
		}
		count5 += totalSteps22;
		var gamma11 = -pi_25;
		var pi55 = Math.PI;
		var step72 = pi55 * 2 / 36;
		var dif115;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f184;
			if(0 > Math.PI) {
				f184 = 0;
			} else {
				var a184 = 0 % (2 * Math.PI);
				f184 = a184 >= 0 ? a184 : a184 + 2 * Math.PI;
			}
			var this270 = f184;
			var za92 = this270;
			var f185;
			if(gamma11 >= 0 && gamma11 > Math.PI) {
				f185 = gamma11;
			} else {
				var a185 = gamma11 % (2 * Math.PI);
				f185 = a185 >= 0 ? a185 : a185 + 2 * Math.PI;
			}
			var this271 = f185;
			var zb92 = this271;
			var fa92 = za92;
			var fb92 = zb92;
			var theta123 = Math.abs(fa92 - fb92);
			var clockwise92 = fa92 < fb92;
			var dif116 = clockwise92 ? theta123 : -theta123;
			dif115 = dif116 > 0 ? dif116 : 2 * Math.PI + dif116;
			break;
		case 1:
			var f186;
			if(0 > Math.PI) {
				f186 = 0;
			} else {
				var a186 = 0 % (2 * Math.PI);
				f186 = a186 >= 0 ? a186 : a186 + 2 * Math.PI;
			}
			var this272 = f186;
			var za93 = this272;
			var f187;
			if(gamma11 >= 0 && gamma11 > Math.PI) {
				f187 = gamma11;
			} else {
				var a187 = gamma11 % (2 * Math.PI);
				f187 = a187 >= 0 ? a187 : a187 + 2 * Math.PI;
			}
			var this273 = f187;
			var zb93 = this273;
			var fa93 = za93;
			var fb93 = zb93;
			var theta124 = Math.abs(fa93 - fb93);
			var clockwise93 = fa93 < fb93;
			var dif117 = clockwise93 ? theta124 : -theta124;
			dif115 = dif117 < 0 ? dif117 : -2 * Math.PI + dif117;
			break;
		case 2:
			var f188;
			if(0 > Math.PI) {
				f188 = 0;
			} else {
				var a188 = 0 % (2 * Math.PI);
				f188 = a188 >= 0 ? a188 : a188 + 2 * Math.PI;
			}
			var this274 = f188;
			var za94 = this274;
			var f189;
			if(gamma11 >= 0 && gamma11 > Math.PI) {
				f189 = gamma11;
			} else {
				var a189 = gamma11 % (2 * Math.PI);
				f189 = a189 >= 0 ? a189 : a189 + 2 * Math.PI;
			}
			var this275 = f189;
			var zb94 = this275;
			var fa94 = za94;
			var fb94 = zb94;
			var theta125 = Math.abs(fa94 - fb94);
			var smallest23 = theta125 <= Math.PI;
			var clockwise94 = fa94 < fb94;
			var dif118 = clockwise94 ? theta125 : -theta125;
			dif115 = smallest23 ? dif118 : clockwise94 ? -(2 * Math.PI - theta125) : 2 * Math.PI - theta125;
			break;
		case 3:
			var f190;
			if(0 > Math.PI) {
				f190 = 0;
			} else {
				var a190 = 0 % (2 * Math.PI);
				f190 = a190 >= 0 ? a190 : a190 + 2 * Math.PI;
			}
			var this276 = f190;
			var za95 = this276;
			var f191;
			if(gamma11 >= 0 && gamma11 > Math.PI) {
				f191 = gamma11;
			} else {
				var a191 = gamma11 % (2 * Math.PI);
				f191 = a191 >= 0 ? a191 : a191 + 2 * Math.PI;
			}
			var this277 = f191;
			var zb95 = this277;
			var fa95 = za95;
			var fb95 = zb95;
			var theta126 = Math.abs(fa95 - fb95);
			var largest23 = theta126 > Math.PI;
			var clockwise95 = fa95 < fb95;
			var dif119 = clockwise95 ? theta126 : -theta126;
			dif115 = largest23 ? dif119 : clockwise95 ? -(2 * Math.PI - theta126) : 2 * Math.PI - theta126;
			break;
		}
		var positive23 = dif115 >= 0;
		var totalSteps23 = Math.ceil(Math.abs(dif115) / step72);
		var step73 = dif115 / totalSteps23;
		var angle23 = 0;
		var cx73;
		var cy73;
		var bx73 = 0;
		var by73 = 0;
		var _g65 = 0;
		var _g155 = totalSteps23 + 1;
		while(_g65 < _g155) {
			var i49 = _g65++;
			cx73 = dx26 + radius25 * Math.sin(angle23);
			cy73 = dy26 + radius25 * Math.cos(angle23);
			if(i49 != 0) {
				drawType25.triangle(dx26,dy26,0,bx73,by73,0,cx73,cy73,0);
				var m91 = trilateral2_Shaper.transformMatrix;
				if(m91 != null) {
					drawType25.transform(m91);
				}
				drawType25.next();
			}
			angle23 += step73;
			bx73 = cx73;
			by73 = cy73;
		}
		var len25 = count5 += totalSteps23;
		var color19 = rs10.color;
		if(color19 == -1) {
			color19 = this245.currentColor;
		}
		this245.colorType.colorTriangles(color19,len25);
		var end25 = start25 + len25 - 1;
		var s010 = new trilateral2_IndexRange(start25,end25);
		var this278 = this.spots;
		var this279 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this280 = this279;
		var this281 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this278.dz / 2);
		var s36 = this281;
		var this282 = new geom_structure_Mat4x3(this280.a * s36.a + this280.b * s36.e + this280.c * s36.i,this280.a * s36.b + this280.b * s36.f + this280.c * s36.j,this280.a * s36.c + this280.b * s36.g + this280.c * s36.k,this280.a * s36.d + this280.b * s36.h + this280.c * s36.l + this280.d,this280.e * s36.a + this280.f * s36.e + this280.g * s36.i,this280.e * s36.b + this280.f * s36.f + this280.g * s36.j,this280.e * s36.c + this280.f * s36.g + this280.g * s36.k,this280.e * s36.d + this280.f * s36.h + this280.g * s36.l + this280.h,this280.i * s36.a + this280.j * s36.e + this280.k * s36.i,this280.i * s36.b + this280.j * s36.f + this280.k * s36.j,this280.i * s36.c + this280.j * s36.g + this280.k * s36.k,this280.i * s36.d + this280.j * s36.h + this280.k * s36.l + this280.l);
		var trans5 = this282;
		this278.drawType.transformRange(trans5,s010.start,s010.end);
		var this283 = this.spots;
		var s011 = this.spotShape.clone();
		var arr6 = [-6062548,-2774968,-1788035,-2838729,-8448,-212480,-14809,-13312,-162539,-3763446,-12032,-935891,-1655158,-13261,-2453248,-2448096,-3820712,-3432139,-6724331];
		var rx18 = 0.5;
		var ry18 = 0.5;
		var sides32 = 47;
		if(sides32 == null) {
			sides32 = 36;
		}
		if(ry18 == null) {
			ry18 = 0;
		}
		if(rx18 == null) {
			rx18 = 0;
		}
		var start26 = this283.drawType.get_size();
		var drawType26 = this283.drawType;
		var x13 = s011.x;
		var y13 = s011.y;
		var radius26 = s011.radius;
		var len26;
		if((sides32 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx19 = rx18;
			var ry19 = ry18;
			var sides33 = sides32;
			var omega12 = 0.;
			if(omega12 == null) {
				omega12 = 0.;
			}
			if(sides33 == null) {
				sides33 = 36;
			}
			var pi56 = Math.PI;
			var theta127 = pi56 / 2 + omega12;
			var step74 = pi56 * 2 / sides33;
			var bx74;
			var by74;
			var cx74;
			var cy74;
			if(rx19 > 1.) {
				rx19 = 1;
			}
			if(rx19 < -1.) {
				rx19 = -1;
			}
			if(ry19 > 1.) {
				ry19 = 1;
			}
			if(ry19 < -1.) {
				ry19 = -1;
			}
			var mx12 = x13 + rx19 * radius26;
			var my12 = y13 - ry19 * radius26;
			var _g66 = 0;
			var _g156 = sides33;
			while(_g66 < _g156) {
				var i50 = _g66++;
				bx74 = x13 + radius26 * Math.sin(theta127);
				by74 = y13 + radius26 * Math.cos(theta127);
				theta127 += step74;
				cx74 = x13 + radius26 * Math.sin(theta127);
				cy74 = y13 + radius26 * Math.cos(theta127);
				drawType26.triangle(mx12,my12,0,bx74,by74,0,cx74,cy74,0);
				var m92 = trilateral2_Shaper.transformMatrix;
				if(m92 != null) {
					drawType26.transform(m92);
				}
				drawType26.next();
			}
			len26 = sides33;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides32 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx20 = rx18;
			var ry20 = ry18;
			var sides34 = sides32;
			var omega13 = 0.;
			if(omega13 == null) {
				omega13 = 0.;
			}
			if(sides34 == null) {
				sides34 = 36;
			}
			var pi57 = Math.PI;
			var theta128 = pi57 / 2;
			var step75 = pi57 * 2 / sides34;
			theta128 -= step75 / 2 + omega13;
			var bx75 = 0;
			var by75 = 0;
			var cx75 = 0;
			var cy75 = 0;
			if(rx20 > 1.) {
				rx20 = 1;
			}
			if(rx20 < -1.) {
				rx20 = -1;
			}
			if(ry20 > 1.) {
				ry20 = 1;
			}
			if(ry20 < -1.) {
				ry20 = -1;
			}
			var mx13 = x13 + rx20 * radius26;
			var my13 = y13 - ry20 * radius26;
			var dx30 = x13 + radius26 * Math.sin(theta128);
			var dy30 = y13 + radius26 * Math.cos(theta128);
			var _g67 = 0;
			var _g157 = sides34 - 1;
			while(_g67 < _g157) {
				var i51 = _g67++;
				bx75 = x13 + radius26 * Math.sin(theta128);
				by75 = y13 + radius26 * Math.cos(theta128);
				theta128 += step75;
				cx75 = x13 + radius26 * Math.sin(theta128);
				cy75 = y13 + radius26 * Math.cos(theta128);
				drawType26.triangle(mx13,my13,0,bx75,by75,0,cx75,cy75,0);
				var m93 = trilateral2_Shaper.transformMatrix;
				if(m93 != null) {
					drawType26.transform(m93);
				}
				drawType26.next();
			}
			drawType26.triangle(mx13,my13,0,cx75,cy75,0,dx30,dy30,0);
			var m94 = trilateral2_Shaper.transformMatrix;
			if(m94 != null) {
				drawType26.transform(m94);
			}
			drawType26.next();
			len26 = sides34;
		}
		var k6 = 1;
		var arrEnd6 = arr6.length - 1;
		var end26 = start26 + len26 - 1;
		var arr_6 = arr6.slice();
		var _g68 = 0;
		var _g158 = len26 - 1;
		while(_g68 < _g158) {
			var j6 = _g68++;
			this283.colorType.cornerColors(s011.color,arr_6[k6 - 1],arr_6[k6]);
			++k6;
			if(k6 > arrEnd6) {
				k6 = 1;
				arr_6.reverse();
			}
		}
		this283.colorType.cornerColors(s011.color,arr_6[k6 - 1],arr6[0]);
		var startEnd20 = new trilateral2_IndexRange(start26,end26);
		var c05 = startEnd20;
		var s120 = new trilateral2_IndexRange(c05.start,c05.end);
		var s214 = new trilateral2_IndexRange(s010.start,s120.end);
		this.spots.drawType.transformRange(trans_0,s214.start,s214.end);
		var s121 = s214;
		var startEnd21 = new trilateral2_IndexRange(s61.start,s121.end);
		return startEnd21;
	}
};
var fracs_DifferencePreference = $hxEnums["fracs.DifferencePreference"] = { __ename__ : "fracs.DifferencePreference", __constructs__ : ["CLOCKWISE","ANTICLOCKWISE","SMALL","LARGE"]
	,CLOCKWISE: {_hx_index:0,__enum__:"fracs.DifferencePreference",toString:$estr}
	,ANTICLOCKWISE: {_hx_index:1,__enum__:"fracs.DifferencePreference",toString:$estr}
	,SMALL: {_hx_index:2,__enum__:"fracs.DifferencePreference",toString:$estr}
	,LARGE: {_hx_index:3,__enum__:"fracs.DifferencePreference",toString:$estr}
};
var geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$ = {};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.__name__ = true;
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size = function(this1) {
	return this1[1] | 0;
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.set_size = function(this1,id) {
	var pos_ = id;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
var geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$ = {};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.__name__ = true;
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red = function(this1,v) {
	this1[(this1[0] | 0) * 4 + 2] = v;
	return v;
};
var geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$ = {};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.__name__ = true;
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax = function(this1) {
	return this1[(this1[0] | 0) * 9 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay = function(this1) {
	return this1[(this1[0] | 0) * 9 + 1 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 1 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az = function(this1) {
	return this1[(this1[0] | 0) * 9 + 2 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_az = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 2 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx = function(this1) {
	return this1[(this1[0] | 0) * 9 + 3 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 3 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by = function(this1) {
	return this1[(this1[0] | 0) * 9 + 4 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 4 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz = function(this1) {
	return this1[(this1[0] | 0) * 9 + 5 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bz = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 5 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx = function(this1) {
	return this1[(this1[0] | 0) * 9 + 6 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 6 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy = function(this1) {
	return this1[(this1[0] | 0) * 9 + 7 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 7 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz = function(this1) {
	return this1[(this1[0] | 0) * 9 + 8 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cz = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 8 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform = function(this1,m) {
	var this2 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az(this1),1.);
	var pa = this2;
	var this3 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz(this1),1.);
	var pb = this3;
	var this4 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz(this1),1.);
	var pc = this4;
	var this5 = new geom_structure_Mat1x4(m.a * pa.x + m.b * pa.y + m.c * pa.z + m.d,m.e * pa.x + m.f * pa.y + m.g * pa.z + m.h,m.i * pa.x + m.j * pa.y + m.k * pa.z + m.l,1.);
	pa = this5;
	var this6 = new geom_structure_Mat1x4(m.a * pb.x + m.b * pb.y + m.c * pb.z + m.d,m.e * pb.x + m.f * pb.y + m.g * pb.z + m.h,m.i * pb.x + m.j * pb.y + m.k * pb.z + m.l,1.);
	pb = this6;
	var this7 = new geom_structure_Mat1x4(m.a * pc.x + m.b * pc.y + m.c * pc.z + m.d,m.e * pc.x + m.f * pc.y + m.g * pc.z + m.h,m.i * pc.x + m.j * pc.y + m.k * pc.z + m.l,1.);
	pc = this7;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,pa.x);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,pa.y);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_az(this1,pa.z);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,pb.x);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,pb.y);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bz(this1,pb.z);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,pc.x);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,pc.y);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cz(this1,pc.z);
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformAll = function(this1,m) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var _g = 0;
	var _g1 = geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformRange = function(this1,m,start,end) {
	this1[0] = start;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	if(end > geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) - 1) {
		geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1);
	}
	var _g = start;
	var _g1 = end + 1;
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.triangle = function(this1,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,ax_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,ay_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_az(this1,az_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,bx_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,by_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bz(this1,bz_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,cx_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,cy_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cz(this1,cz_);
	var windingAdjusted = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.adjustWinding(this1);
	if(windingAdjusted) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,ax_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,ay_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,cx_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,cy_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,bx_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,by_);
	}
	return windingAdjusted;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.adjustWinding = function(this1) {
	return geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1) - geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) + (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1) - geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1)) + (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) - geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1)) > 0;
};
var geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$ = {};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.__name__ = true;
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax = function(this1) {
	return this1[(this1[0] | 0) * 6 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay = function(this1) {
	return this1[(this1[0] | 0) * 6 + 1 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 1 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx = function(this1) {
	return this1[(this1[0] | 0) * 6 + 3 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 3 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by = function(this1) {
	return this1[(this1[0] | 0) * 6 + 4 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 4 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx = function(this1) {
	return this1[(this1[0] | 0) * 6 + 6 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 6 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy = function(this1) {
	return this1[(this1[0] | 0) * 6 + 7 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 7 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.triangle = function(this1,ax_,ay_,bx_,by_,cx_,cy_) {
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,ax_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,ay_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,bx_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,by_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,cx_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,cy_);
	var windingAdjusted = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.adjustWinding(this1);
	if(windingAdjusted) {
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,ax_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,ay_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,cx_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,cy_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,bx_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,by_);
	}
	return windingAdjusted;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.adjustWinding = function(this1) {
	return geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1) - geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) + (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1) - geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1)) + (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) - geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1)) > 0;
};
var geom_move_Axis3 = function() {
	this.tz = new geom_move_Parameter();
	this.ty = new geom_move_Parameter();
	this.tx = new geom_move_Parameter();
	this.rz = new geom_move_Parameter();
	this.ry = new geom_move_Parameter();
	this.rx = new geom_move_Parameter();
};
geom_move_Axis3.__name__ = true;
geom_move_Axis3.prototype = {
	updateCalculate: function(q) {
		var rotations = this.rx.trinary.changed || this.ry.trinary.changed || this.rz.trinary.changed;
		var translations = this.tx.trinary.changed || this.ty.trinary.changed || this.tz.trinary.changed;
		if(translations || rotations) {
			var qReal;
			if(rotations) {
				var n9 = this.rz.value * 0.5;
				var n6 = Math.sin(n9);
				var n5 = Math.cos(n9);
				var n8 = this.rx.value * 0.5;
				var n4 = Math.sin(n8);
				var n3 = Math.cos(n8);
				var n7 = this.ry.value * 0.5;
				var n2 = Math.sin(n7);
				var n1 = Math.cos(n7);
				var this1 = new geom_structure_Mat1x4(n1 * n4 * n5 + n2 * n3 * n6,n2 * n3 * n5 - n1 * n4 * n6,n1 * n3 * n6 - n2 * n4 * n5,n1 * n3 * n5 + n2 * n4 * n6);
				qReal = this1;
			} else {
				var this2 = new geom_structure_Mat1x4(0.,0.,0.,1.);
				qReal = this2;
			}
			var qDual;
			if(translations) {
				var this3 = new geom_structure_Mat1x4(this.tx.value,this.ty.value,this.tz.value,1.);
				qDual = this3;
			} else {
				var this4 = new geom_structure_Mat1x4(0.,0.,0.,0.);
				qDual = this4;
			}
			var currentLength = Math.sqrt(qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w);
			if(currentLength != 0.) {
				var mul = 1. / currentLength;
				qReal.x *= mul;
				qReal.y *= mul;
				qReal.z *= mul;
				qReal.w *= mul;
				var real = qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w;
			}
			var real1 = qReal;
			var this5 = new geom_structure_Mat1x4(qDual.x,qDual.y,qDual.z,0.);
			var q1 = this5;
			var this6 = new geom_structure_Mat1x4(q1.x * 0.5,q1.y * 0.5,q1.z * 0.5,q1.w * 0.5);
			q1 = this6;
			var this7 = new geom_structure_Mat1x4(q1.x * real1.w + q1.y * real1.z - q1.z * real1.y + q1.w * real1.x,-q1.x * real1.z + q1.y * real1.w + q1.z * real1.x + q1.w * real1.y,q1.x * real1.y - q1.y * real1.x + q1.z * real1.w + q1.w * real1.z,-q1.x * real1.x - q1.y * real1.y - q1.z * real1.z + q1.w * real1.w);
			var dual = this7;
			var this8 = new geom_structure_DualQ(real1,dual);
			var dualQuaternion = this8;
			var q11 = q.real;
			var q2 = dualQuaternion.real;
			var this9 = new geom_structure_Mat1x4(q11.x * q2.w + q11.y * q2.z - q11.z * q2.y + q11.w * q2.x,-q11.x * q2.z + q11.y * q2.w + q11.z * q2.x + q11.w * q2.y,q11.x * q2.y - q11.y * q2.x + q11.z * q2.w + q11.w * q2.z,-q11.x * q2.x - q11.y * q2.y - q11.z * q2.z + q11.w * q2.w);
			var q12 = q.dual;
			var q21 = dualQuaternion.real;
			var this10 = new geom_structure_Mat1x4(q12.x * q21.w + q12.y * q21.z - q12.z * q21.y + q12.w * q21.x,-q12.x * q21.z + q12.y * q21.w + q12.z * q21.x + q12.w * q21.y,q12.x * q21.y - q12.y * q21.x + q12.z * q21.w + q12.w * q21.z,-q12.x * q21.x - q12.y * q21.y - q12.z * q21.z + q12.w * q21.w);
			var a = this10;
			var q13 = dualQuaternion.dual;
			var q22 = q.real;
			var this11 = new geom_structure_Mat1x4(q13.x * q22.w + q13.y * q22.z - q13.z * q22.y + q13.w * q22.x,-q13.x * q22.z + q13.y * q22.w + q13.z * q22.x + q13.w * q22.y,q13.x * q22.y - q13.y * q22.x + q13.z * q22.w + q13.w * q22.z,-q13.x * q22.x - q13.y * q22.y - q13.z * q22.z + q13.w * q22.w);
			var b = this11;
			var this12 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
			var this13 = new geom_structure_DualQ(this9,this12);
			return this13;
		} else {
			return q;
		}
	}
};
var geom_move_Parameter = function() {
	this.trinary = new geom_move_Trinary(0.);
	this.value = 0.;
	this.step = 0.005;
};
geom_move_Parameter.__name__ = true;
var geom_move_Trinary = function(v) {
	this.changed = false;
	this.set_trit(v);
};
geom_move_Trinary.__name__ = true;
geom_move_Trinary.prototype = {
	set_trit: function(v) {
		if(this.get_trit() == v) {
			this.changed = false;
		} else {
			this.trit = v;
			this.changed = true;
		}
		return v;
	}
	,get_trit: function() {
		return this.trit;
	}
};
var geom_obj_DieLayout = function(radius,isLeft) {
	if(isLeft == null) {
		isLeft = false;
	}
	this.radius = radius;
	this.isLeft = isLeft;
};
geom_obj_DieLayout.__name__ = true;
var geom_structure_DualQ = function(real,dual) {
	this.real = real;
	this.dual = dual;
};
geom_structure_DualQ.__name__ = true;
var geom_structure_Mat1x2 = function(x,y) {
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
};
geom_structure_Mat1x2.__name__ = true;
var geom_structure_Mat1x3 = function() { };
geom_structure_Mat1x3.__name__ = true;
var geom_structure_Mat1x4 = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	this.w = 1.;
	this.z = 0.;
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
geom_structure_Mat1x4.__name__ = true;
var geom_structure_Mat2x2 = function() { };
geom_structure_Mat2x2.__name__ = true;
var geom_structure_Mat3x3 = function() { };
geom_structure_Mat3x3.__name__ = true;
var geom_structure_Mat4x3 = function(a,b,c,d,e,f,g,h,i,j,k,l) {
	this.l = 0.;
	this.k = 0.;
	this.j = 0.;
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
	this.j = j;
	this.k = k;
	this.l = l;
};
geom_structure_Mat4x3.__name__ = true;
var geom_structure_Mat4x4 = function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) {
	this.p = 0.;
	this.o = 0.;
	this.n = 0.;
	this.m = 0.;
	this.l = 0.;
	this.k = 0.;
	this.j = 0.;
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
	this.j = j;
	this.k = k;
	this.l = l;
	this.m = m;
	this.n = n;
	this.o = o;
	this.p = p;
};
geom_structure_Mat4x4.__name__ = true;
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
var htmlHelper_tools_AnimateTimer = function() { };
htmlHelper_tools_AnimateTimer.__name__ = true;
htmlHelper_tools_AnimateTimer.loop = function(tim) {
	window.requestAnimationFrame(htmlHelper_tools_AnimateTimer.loop);
	if(htmlHelper_tools_AnimateTimer.onFrame != null) {
		htmlHelper_tools_AnimateTimer.onFrame(htmlHelper_tools_AnimateTimer.counter);
	}
	htmlHelper_tools_AnimateTimer.counter++;
	return true;
};
var htmlHelper_tools_CharacterInput = function() {
	this.controlDown = false;
	this.spaceDown = false;
	this.cmdDown = false;
	this.altDown = false;
	this.tabDown = false;
	this.deleteDown = false;
	this.enterDown = false;
	this.shiftDown = false;
	this.upDown = false;
	this.downDown = false;
	this.rightDown = false;
	this.leftDown = false;
	var _gthis = this;
	window.document.onkeydown = $bind(this,this.keyDown);
	window.document.onkeyup = $bind(this,this.keyUp);
	this.navSignal = function() {
		haxe_Log.trace(_gthis.navDown(),{ fileName : "htmlHelper/tools/CharacterInput.hx", lineNumber : 26, className : "htmlHelper.tools.CharacterInput", methodName : "new"});
	};
	this.commandSignal = function() {
		haxe_Log.trace(_gthis.commandDown(),{ fileName : "htmlHelper/tools/CharacterInput.hx", lineNumber : 27, className : "htmlHelper.tools.CharacterInput", methodName : "new"});
	};
	this.letterSignal = function(s) {
		haxe_Log.trace("letter pressed " + s,{ fileName : "htmlHelper/tools/CharacterInput.hx", lineNumber : 28, className : "htmlHelper.tools.CharacterInput", methodName : "new"});
	};
};
htmlHelper_tools_CharacterInput.__name__ = true;
htmlHelper_tools_CharacterInput.prototype = {
	navDown: function() {
		var str = "";
		if(this.leftDown) {
			str += "left,";
		}
		if(this.rightDown) {
			str += "right,";
		}
		if(this.downDown) {
			str += "down,";
		}
		if(this.upDown) {
			str += "up,";
		}
		return str;
	}
	,commandDown: function() {
		var str = "";
		if(this.shiftDown) {
			str += "shift,";
		}
		if(this.enterDown) {
			str += "enter,";
		}
		if(this.tabDown) {
			str += "tab,";
		}
		if(this.altDown) {
			str += "alt,";
		}
		if(this.cmdDown) {
			str += "cmd,";
		}
		if(this.spaceDown) {
			str += "space,";
		}
		if(this.controlDown) {
			str += "control,";
		}
		if(this.deleteDown) {
			str += "delete";
		}
		return str;
	}
	,keyDown: function(e) {
		e.preventDefault();
		var keyCode = e.keyCode;
		switch(keyCode) {
		case 8:
			this.deleteDown = true;
			this.commandSignal();
			break;
		case 9:
			this.tabDown = true;
			this.commandSignal();
			break;
		case 13:
			this.enterDown = true;
			this.commandSignal();
			break;
		case 16:
			this.shiftDown = true;
			this.commandSignal();
			break;
		case 17:
			this.controlDown = true;
			this.commandSignal();
			break;
		case 18:
			this.altDown = true;
			this.commandSignal();
			break;
		case 32:
			this.spaceDown = true;
			this.commandSignal();
			break;
		case 37:
			this.leftDown = true;
			this.navSignal();
			break;
		case 38:
			this.upDown = true;
			this.navSignal();
			break;
		case 39:
			this.rightDown = true;
			this.navSignal();
			break;
		case 40:
			this.downDown = true;
			this.navSignal();
			break;
		case 224:
			this.cmdDown = true;
			this.commandSignal();
			break;
		default:
			if(e.key != null) {
				this.letterSignal(e.key);
			}
		}
	}
	,keyUp: function(e) {
		e.preventDefault();
		var keyCode = e.keyCode;
		switch(keyCode) {
		case 8:
			this.deleteDown = false;
			this.commandSignal();
			break;
		case 9:
			this.tabDown = false;
			this.commandSignal();
			break;
		case 13:
			this.enterDown = false;
			this.commandSignal();
			break;
		case 16:
			this.shiftDown = false;
			this.commandSignal();
			break;
		case 17:
			this.controlDown = false;
			this.commandSignal();
			break;
		case 18:
			this.altDown = false;
			this.commandSignal();
			break;
		case 32:
			this.spaceDown = false;
			this.commandSignal();
			break;
		case 37:
			this.leftDown = false;
			this.navSignal();
			break;
		case 38:
			this.upDown = false;
			this.navSignal();
			break;
		case 39:
			this.rightDown = false;
			this.navSignal();
			break;
		case 40:
			this.downDown = false;
			this.navSignal();
			break;
		case 224:
			this.cmdDown = false;
			this.commandSignal();
			break;
		default:
		}
	}
};
var htmlHelper_tools_DivertTrace = function(left,d) {
	if(left == null) {
		left = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	this.divertTrace(left,d);
};
htmlHelper_tools_DivertTrace.__name__ = true;
htmlHelper_tools_DivertTrace.prototype = {
	divertTrace: function(left,d) {
		if(d == null) {
			var doc = window.document;
			this.traceDiv = doc.createElement("div");
			doc.body.appendChild(this.traceDiv);
			var dom = this.traceDiv;
			var style = dom.style;
			style.position = "absolute";
			style.top = "0px";
			style.left = (left == null ? "null" : "" + left) + "px";
			style.height = "500px";
			style.width = "500px";
			style.zIndex = "99";
			style.overflow = "auto";
		} else {
			this.traceDiv = d;
		}
		haxe_Log.trace = $bind(this,this.myTrace);
	}
	,myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
};
var hxGeomAlgo_HomogCoord = function(x,y,w) {
	if(w == null) {
		w = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.w = w;
};
hxGeomAlgo_HomogCoord.__name__ = true;
var hxGeomAlgo_HxPointData = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
hxGeomAlgo_HxPointData.__name__ = true;
var hxGeomAlgo__$HxPoint_HxPoint_$Impl_$ = $hx_exports["hxGeomAlgo"]["_HxPoint"]["HxPoint_Impl_"] = {};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.__name__ = true;
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.get_x = function(this1) {
	return this1.x;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.set_x = function(this1,value) {
	return this1.x = value;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.get_y = function(this1) {
	return this1.y;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.set_y = function(this1,value) {
	return this1.y = value;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new hxGeomAlgo_HxPointData(x,y);
	return this1;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.setTo = function(this1,newX,newY) {
	this1.x = newX;
	this1.y = newY;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.equals = function(this1,p) {
	if(p != null && this1.x == p.x) {
		return this1.y == p.y;
	} else {
		return false;
	}
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.clone = function(this1) {
	return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(this1.x,this1.y);
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.toString = function(this1) {
	return "(" + this1.x + ", " + this1.y + ")";
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.fromPointStruct = function(p) {
	return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(p.x,p.y);
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.toPointStruct = function(this1) {
	return { x : this1.x, y : this1.y};
};
var hxGeomAlgo_PolyTools = $hx_exports["hxGeomAlgo"]["PolyTools"] = function() { };
hxGeomAlgo_PolyTools.__name__ = true;
hxGeomAlgo_PolyTools.isCCW = function(poly) {
	if(poly.length <= 2) {
		return true;
	}
	var signedArea = 0.;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var idx = i - 1;
		var idx1 = idx;
		var len = poly.length;
		if(idx1 < 0) {
			idx1 += len;
		}
		idx = idx1 % len;
		var idx2 = i - 1;
		var idx3 = idx2;
		var len1 = poly.length;
		if(idx3 < 0) {
			idx3 += len1;
		}
		idx2 = idx3 % len1;
		signedArea += poly[idx].x * poly[i].y - poly[i].x * poly[idx2].y;
	}
	return signedArea < 0;
};
hxGeomAlgo_PolyTools.isCW = function(poly) {
	if(poly.length <= 2) {
		return true;
	}
	var signedArea = 0.;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var idx = i - 1;
		var idx1 = idx;
		var len = poly.length;
		if(idx1 < 0) {
			idx1 += len;
		}
		idx = idx1 % len;
		var idx2 = i - 1;
		var idx3 = idx2;
		var len1 = poly.length;
		if(idx3 < 0) {
			idx3 += len1;
		}
		idx2 = idx3 % len1;
		signedArea += poly[idx].x * poly[i].y - poly[i].x * poly[idx2].y;
	}
	return signedArea > 0;
};
hxGeomAlgo_PolyTools.makeCCW = function(poly) {
	var reversed = false;
	if(!hxGeomAlgo_PolyTools.isCCW(poly)) {
		poly.reverse();
		reversed = true;
	}
	return reversed;
};
hxGeomAlgo_PolyTools.makeCW = function(poly) {
	var reversed = false;
	if(hxGeomAlgo_PolyTools.isCCW(poly)) {
		poly.reverse();
		reversed = true;
	}
	return reversed;
};
hxGeomAlgo_PolyTools.isConvex = function(poly) {
	var isPositive = null;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var lower = i == 0 ? poly.length - 1 : i - 1;
		var middle = i;
		var upper = i == poly.length - 1 ? 0 : i + 1;
		var dx0 = poly[middle].x - poly[lower].x;
		var dy0 = poly[middle].y - poly[lower].y;
		var dx1 = poly[upper].x - poly[middle].x;
		var dy1 = poly[upper].y - poly[middle].y;
		var cross = dx0 * dy1 - dx1 * dy0;
		var newIsPositive = cross > 0;
		if(cross == 0) {
			continue;
		}
		if(isPositive == null) {
			isPositive = newIsPositive;
		} else if(isPositive != newIsPositive) {
			return false;
		}
	}
	return true;
};
hxGeomAlgo_PolyTools.isSimple = function(poly) {
	var len = poly.length;
	if(len <= 3) {
		return true;
	}
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var p0 = i;
		var p1 = i == len - 1 ? 0 : i + 1;
		var _g2 = i + 1;
		var _g11 = len;
		while(_g2 < _g11) {
			var j = _g2++;
			var q0 = j;
			var q1 = j == len - 1 ? 0 : j + 1;
			var intersection = hxGeomAlgo_PolyTools.segmentIntersect(poly[p0],poly[p1],poly[q0],poly[q1]);
			var tmp;
			var tmp1;
			if(intersection != null) {
				var tmp2;
				var w = poly[p0];
				var x = intersection.x - w.x;
				var x1 = intersection.y - w.y;
				if(!(Math.sqrt(x * x + x1 * x1) < hxGeomAlgo_PolyTools.EPSILON)) {
					var w1 = poly[p1];
					var x2 = intersection.x - w1.x;
					var x3 = intersection.y - w1.y;
					tmp2 = Math.sqrt(x2 * x2 + x3 * x3) < hxGeomAlgo_PolyTools.EPSILON;
				} else {
					tmp2 = true;
				}
				tmp1 = !tmp2;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var tmp3;
				var w2 = poly[q0];
				var x4 = intersection.x - w2.x;
				var x5 = intersection.y - w2.y;
				if(!(Math.sqrt(x4 * x4 + x5 * x5) < hxGeomAlgo_PolyTools.EPSILON)) {
					var w3 = poly[q1];
					var x6 = intersection.x - w3.x;
					var x7 = intersection.y - w3.y;
					tmp3 = Math.sqrt(x6 * x6 + x7 * x7) < hxGeomAlgo_PolyTools.EPSILON;
				} else {
					tmp3 = true;
				}
				tmp = !tmp3;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
		}
	}
	return true;
};
hxGeomAlgo_PolyTools.segmentIntersect = function(p0,p1,q0,q1) {
	var a1 = p1.y - p0.y;
	var b1 = p0.x - p1.x;
	var c1 = p1.x * p0.y - p0.x * p1.y;
	var a2 = q1.y - q0.y;
	var b2 = q0.x - q1.x;
	var c2 = q1.x * q0.y - q0.x * q1.y;
	var denom = a1 * b2 - a2 * b1;
	if(denom == 0) {
		return null;
	}
	var intersectionPoint = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	intersectionPoint.x = (b1 * c2 - b2 * c1) / denom;
	intersectionPoint.y = (a2 * c1 - a1 * c2) / denom;
	var x = p0.x - p1.x;
	var x1 = p0.y - p1.y;
	var p0p1 = x * x + x1 * x1;
	var x2 = q0.x - q1.x;
	var x3 = q0.y - q1.y;
	var q0q1 = x2 * x2 + x3 * x3;
	var x4 = intersectionPoint.x - p1.x;
	var x5 = intersectionPoint.y - p1.y;
	if(x4 * x4 + x5 * x5 > p0p1) {
		return null;
	}
	var x6 = intersectionPoint.x - p0.x;
	var x7 = intersectionPoint.y - p0.y;
	if(x6 * x6 + x7 * x7 > p0p1) {
		return null;
	}
	var x8 = intersectionPoint.x - q1.x;
	var x9 = intersectionPoint.y - q1.y;
	if(x8 * x8 + x9 * x9 > q0q1) {
		return null;
	}
	var x10 = intersectionPoint.x - q0.x;
	var x11 = intersectionPoint.y - q0.y;
	if(x10 * x10 + x11 * x11 > q0q1) {
		return null;
	}
	return intersectionPoint;
};
hxGeomAlgo_PolyTools.findDuplicatePoints = function(poly,consecutiveOnly,wrapAround) {
	if(wrapAround == null) {
		wrapAround = true;
	}
	if(consecutiveOnly == null) {
		consecutiveOnly = true;
	}
	var len = poly.length;
	if(len <= 1) {
		return [];
	}
	var dupIndices = [];
	var _g = 0;
	var _g1 = len - 1;
	while(_g < _g1) {
		var i = _g++;
		var j = i + 1;
		while(j < len) {
			var this1 = poly[i];
			var p = poly[j];
			var foundDup = p != null && this1.x == p.x && this1.y == p.y;
			if(foundDup) {
				dupIndices.push(i);
			}
			if(consecutiveOnly || foundDup && !consecutiveOnly) {
				break;
			}
			++j;
		}
	}
	var tmp;
	if(wrapAround && consecutiveOnly) {
		var this2 = poly[0];
		var p1 = poly[len - 1];
		tmp = p1 != null && this2.x == p1.x && this2.y == p1.y;
	} else {
		tmp = false;
	}
	if(tmp) {
		dupIndices.push(len - 1);
	}
	return dupIndices;
};
hxGeomAlgo_PolyTools.intersection = function(p1,p2,q1,q2) {
	var res = null;
	var a1 = p2.y - p1.y;
	var b1 = p1.x - p2.x;
	var c1 = a1 * p1.x + b1 * p1.y;
	var a2 = q2.y - q1.y;
	var b2 = q1.x - q2.x;
	var c2 = a2 * q1.x + b2 * q1.y;
	var det = a1 * b2 - a2 * b1;
	if(!(Math.abs(det) <= hxGeomAlgo_PolyTools.EPSILON)) {
		res = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
		res.x = (b2 * c1 - b1 * c2) / det;
		res.y = (a1 * c2 - a2 * c1) / det;
	}
	return res;
};
hxGeomAlgo_PolyTools.isReflex = function(poly,idx) {
	var idx1 = idx - 1;
	var idx2 = idx1;
	var len = poly.length;
	if(idx2 < 0) {
		idx2 += len;
	}
	idx1 = idx2 % len;
	var p = poly[idx1];
	var idx3 = idx;
	var idx4 = idx3;
	var len1 = poly.length;
	if(idx4 < 0) {
		idx4 += len1;
	}
	idx3 = idx4 % len1;
	var a = poly[idx3];
	var idx5 = idx + 1;
	var idx6 = idx5;
	var len2 = poly.length;
	if(idx6 < 0) {
		idx6 += len2;
	}
	idx5 = idx6 % len2;
	var b = poly[idx5];
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) < 0;
};
hxGeomAlgo_PolyTools.at = function(poly,idx) {
	var idx1 = idx;
	var len = poly.length;
	if(idx1 < 0) {
		idx1 += len;
	}
	idx = idx1 % len;
	return poly[idx];
};
hxGeomAlgo_PolyTools.wrappedIdx = function(poly,idx) {
	var len = poly.length;
	if(idx < 0) {
		idx += len;
	}
	return idx % len;
};
hxGeomAlgo_PolyTools.side = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y);
};
hxGeomAlgo_PolyTools.isLeft = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) > 0;
};
hxGeomAlgo_PolyTools.isLeftOrOn = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) >= 0;
};
hxGeomAlgo_PolyTools.isRight = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) < 0;
};
hxGeomAlgo_PolyTools.isRightOrOn = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) <= 0;
};
hxGeomAlgo_PolyTools.isCollinear = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) == 0;
};
hxGeomAlgo_PolyTools.distance = function(v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	return Math.sqrt(x * x + x1 * x1);
};
hxGeomAlgo_PolyTools.distanceToSegment = function(p,v,w) {
	return Math.sqrt(hxGeomAlgo_PolyTools.distanceToSegmentSquared(p,v,w));
};
hxGeomAlgo_PolyTools.distanceSquared = function(v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	return x * x + x1 * x1;
};
hxGeomAlgo_PolyTools.distanceToSegmentSquared = function(p,v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	var l2 = x * x + x1 * x1;
	if(l2 == 0) {
		var x2 = p.x - v.x;
		var x3 = p.y - v.y;
		return x2 * x2 + x3 * x3;
	}
	var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;
	if(t < 0) {
		var x4 = p.x - v.x;
		var x5 = p.y - v.y;
		return x4 * x4 + x5 * x5;
	}
	if(t > 1) {
		var x6 = p.x - w.x;
		var x7 = p.y - w.y;
		return x6 * x6 + x7 * x7;
	}
	hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.setTo(hxGeomAlgo_PolyTools.point,v.x + t * (w.x - v.x),v.y + t * (w.y - v.y));
	var w1 = hxGeomAlgo_PolyTools.point;
	var x8 = p.x - w1.x;
	var x9 = p.y - w1.y;
	return x8 * x8 + x9 * x9;
};
hxGeomAlgo_PolyTools.getCentroid = function(poly) {
	var c = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	var area = hxGeomAlgo_PolyTools.getArea(poly);
	if(area != 0) {
		var len = poly.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var p0 = poly[i];
			var p1 = poly[(i + 1) % len];
			var m = p0.x * p1.y - p1.x * p0.y;
			c.x += (p0.x + p1.x) * m;
			c.y += (p0.y + p1.y) * m;
		}
		c.x /= 6 * area;
		c.y /= 6 * area;
	} else {
		c = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.EMPTY;
	}
	return c;
};
hxGeomAlgo_PolyTools.getArea = function(poly) {
	var area = 0.0;
	var len = poly.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var p0 = poly[i];
		var p1 = poly[(i + 1) % len];
		area += p0.x * p1.y - p1.x * p0.y;
	}
	area = .5 * area;
	return area;
};
hxGeomAlgo_PolyTools.meet = function(p,q) {
	return new hxGeomAlgo_HomogCoord(p.y - q.y,q.x - p.x,p.x * q.y - p.y * q.x);
};
hxGeomAlgo_PolyTools.dot = function(p,q) {
	return p.x * q.x + p.y * q.y;
};
hxGeomAlgo_PolyTools.sqr = function(x) {
	return x * x;
};
hxGeomAlgo_PolyTools.eq = function(a,b) {
	return Math.abs(a - b) <= hxGeomAlgo_PolyTools.EPSILON;
};
hxGeomAlgo_PolyTools.clear = function(array) {
	array.length = 0;
};
hxGeomAlgo_PolyTools.toFloatArray = function(poly,out) {
	out = out != null ? out : [];
	var _g = 0;
	while(_g < poly.length) {
		var p = poly[_g];
		++_g;
		out.push(p.x);
		out.push(p.y);
	}
	return out;
};
hxGeomAlgo_PolyTools.reverseFloatArray = function(poly,inPlace) {
	if(inPlace == null) {
		inPlace = false;
	}
	var res = inPlace ? poly : [];
	var nPoints = poly.length >> 1;
	var _g = 0;
	var _g1 = nPoints;
	while(_g < _g1) {
		var i = _g++;
		var xPos = (nPoints - i - 1) * 2;
		res[i * 2] = poly[xPos];
		res[i * 2 + 1] = poly[xPos + 1];
	}
	return res;
};
hxGeomAlgo_PolyTools.flatten = function(array,out) {
	var res = out != null ? out : [];
	var _g = 0;
	while(_g < array.length) {
		var arr = array[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var item = arr[_g1];
			++_g1;
			res.push(item);
		}
	}
	return res;
};
hxGeomAlgo_PolyTools.toPointArray = function(poly,out) {
	out = out != null ? out : [];
	var size = poly.length;
	if(poly.length % 2 == 1) {
		--size;
	}
	var _g = 0;
	var _g1 = size >> 1;
	while(_g < _g1) {
		var i = _g++;
		out.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(poly[i * 2],poly[i * 2 + 1]));
	}
	return out;
};
hxGeomAlgo_PolyTools.inflateLine = function(start,end,thickness) {
	var halfWidth = thickness / 2;
	var dx = end.x - start.x;
	var dy = end.y - start.y;
	var len = Math.sqrt(dx * dx + dy * dy);
	var nx = dx / len * halfWidth;
	var ny = dy / len * halfWidth;
	return [hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(start.x - ny,start.y + nx),hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(end.x - ny,end.y + nx),hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(end.x + ny,end.y - nx),hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(start.x + ny,start.y - nx)];
};
hxGeomAlgo_PolyTools.clip = function(subjPoly,clipPoly) {
	var cond = clipPoly.length >= 3 && hxGeomAlgo_PolyTools.isConvex(clipPoly);
	var res = [];
	var output = subjPoly;
	var isInside = hxGeomAlgo_PolyTools.isCCW(clipPoly) ? hxGeomAlgo_PolyTools.isRight : hxGeomAlgo_PolyTools.isLeft;
	var clipEdgeStart;
	var clipEdgeEnd;
	var inputEdgeStart;
	var inputEdgeEnd;
	var clipLen = clipPoly.length;
	var i = 0;
	var _g = 0;
	var _g1 = clipLen;
	while(_g < _g1) {
		var i1 = _g++;
		clipEdgeStart = clipPoly[i1];
		var idx = i1 + 1;
		var len = clipPoly.length;
		if(idx < 0) {
			idx += len;
		}
		clipEdgeEnd = clipPoly[idx % len];
		var input = output;
		output = [];
		inputEdgeStart = input[input.length - 1];
		var _g2 = 0;
		var _g11 = input.length;
		while(_g2 < _g11) {
			var j = _g2++;
			inputEdgeEnd = input[j];
			if(isInside(inputEdgeEnd,clipEdgeStart,clipEdgeEnd)) {
				if(!isInside(inputEdgeStart,clipEdgeStart,clipEdgeEnd)) {
					var intersectionPoint = hxGeomAlgo_PolyTools.intersection(inputEdgeStart,inputEdgeEnd,clipEdgeStart,clipEdgeEnd);
					if(intersectionPoint != null) {
						output.push(intersectionPoint);
					}
				}
				output.push(inputEdgeEnd);
			} else if(isInside(inputEdgeStart,clipEdgeStart,clipEdgeEnd)) {
				var intersectionPoint1 = hxGeomAlgo_PolyTools.intersection(inputEdgeStart,inputEdgeEnd,clipEdgeStart,clipEdgeEnd);
				if(intersectionPoint1 != null) {
					output.push(intersectionPoint1);
				}
			}
			inputEdgeStart = inputEdgeEnd;
		}
		res.push(output);
	}
	return res;
};
hxGeomAlgo_PolyTools.exposeEnum = function(enumClass,as) {
	var dotPath = (as != null ? as : enumClass.__ename__).split(".");
	var exports = $hx_exports;
	var i = 0;
	while(i < dotPath.length - 1) {
		var currPath = dotPath[i];
		exports[currPath] = exports[currPath] || { };
		exports = exports[currPath];
		++i;
	}
	exports[dotPath[i]] = enumClass;
};
var hxGeomAlgo_WindingRule = $hxEnums["hxGeomAlgo.WindingRule"] = { __ename__ : "hxGeomAlgo.WindingRule", __constructs__ : ["ODD","NON_ZERO","POSITIVE","NEGATIVE","ABS_GEQ_TWO"]
	,ODD: {_hx_index:0,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,NON_ZERO: {_hx_index:1,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,POSITIVE: {_hx_index:2,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,NEGATIVE: {_hx_index:3,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,ABS_GEQ_TWO: {_hx_index:4,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
};
var hxGeomAlgo_ResultType = $hxEnums["hxGeomAlgo.ResultType"] = { __ename__ : "hxGeomAlgo.ResultType", __constructs__ : ["POLYGONS","CONNECTED_POLYGONS","BOUNDARY_CONTOURS","EXPERIMENTAL_DELAUNAY"]
	,POLYGONS: {_hx_index:0,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,CONNECTED_POLYGONS: {_hx_index:1,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,BOUNDARY_CONTOURS: {_hx_index:2,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,EXPERIMENTAL_DELAUNAY: {_hx_index:3,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
};
var hxGeomAlgo_Tess2 = $hx_exports["hxGeomAlgo"]["Tess2"] = function() { };
hxGeomAlgo_Tess2.__name__ = true;
hxGeomAlgo_Tess2.tesselate = function(contours,windingRule,resultType,polySize,vertexDim,normal) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var tess = new hxGeomAlgo_Tesselator();
	var _g = 0;
	var _g1 = contours.length;
	while(_g < _g1) {
		var i = _g++;
		tess.addContour(vertexDim,contours[i]);
	}
	tess.tesselate(windingRule == null ? hxGeomAlgo_WindingRule.ODD : windingRule,resultType == null ? hxGeomAlgo_ResultType.POLYGONS : resultType,polySize,vertexDim,normal == null ? [0,0,1] : normal);
	return { vertices : tess.vertices, vertexIndices : tess.vertexIndices, vertexCount : tess.vertexCount, elements : tess.elements, elementCount : tess.elementCount};
};
hxGeomAlgo_Tess2.union = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var contours = contoursA.concat(contoursB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.NON_ZERO,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.intersection = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var contours = contoursA.concat(contoursB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.ABS_GEQ_TWO,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.difference = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < contoursB.length) {
		var poly = contoursB[_g1];
		++_g1;
		_g.push(hxGeomAlgo_PolyTools.reverseFloatArray(poly));
	}
	var diffB = _g;
	var contours = contoursA.concat(diffB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.POSITIVE,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.convertResult = function(vertices,elements,resultType,polySize,out) {
	out = out != null ? out : [];
	var tmp = resultType._hx_index != 2;
	var i = 0;
	switch(resultType._hx_index) {
	case 0:case 3:
		while(i < elements.length) {
			var poly = [];
			var _g = 0;
			var _g1 = polySize;
			while(_g < _g1) {
				var j = _g++;
				var idx = elements[i + j];
				if(idx == -1) {
					continue;
				}
				poly.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(vertices[idx * 2],vertices[idx * 2 + 1]));
			}
			out.push(poly);
			i += polySize;
		}
		break;
	case 1:
		while(i < elements.length) {
			var poly1 = [];
			var _g2 = 0;
			var _g11 = polySize;
			while(_g2 < _g11) {
				var j1 = _g2++;
				var idx1 = elements[i + j1];
				if(idx1 == -1) {
					continue;
				}
				poly1.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(vertices[idx1 * 2],vertices[idx1 * 2 + 1]));
			}
			out.push(poly1);
			i += polySize * 2;
		}
		break;
	case 2:
		while(i < elements.length) {
			var poly2 = [];
			var start = elements[i];
			var count = elements[i + 1];
			var _g3 = 0;
			var _g12 = count;
			while(_g3 < _g12) {
				var j2 = _g3++;
				var idx2 = start + j2;
				poly2.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(vertices[idx2 * 2],vertices[idx2 * 2 + 1]));
			}
			out.push(poly2);
			i += 2;
		}
		break;
	}
	return out;
};
var hxGeomAlgo__$Tess2_TessVertex = function() {
	this.idx = 0;
	this.n = 0;
	this.pqHandle = 0;
	this.t = 0.0;
	this.s = 0.0;
	this.coords = [0,0,0];
	this.anEdge = null;
	this.prev = null;
	this.next = null;
};
hxGeomAlgo__$Tess2_TessVertex.__name__ = true;
var hxGeomAlgo__$Tess2_TessFace = function() {
	this.inside = false;
	this.marked = false;
	this.n = 0;
	this.trail = null;
	this.anEdge = null;
	this.prev = null;
	this.next = null;
};
hxGeomAlgo__$Tess2_TessFace.__name__ = true;
var hxGeomAlgo__$Tess2_TessHalfEdge = function(side) {
	this.winding = 0;
	this.activeRegion = null;
	this.Lface = null;
	this.Org = null;
	this.Lnext = null;
	this.Onext = null;
	this.Sym = null;
	this.next = null;
	this.side = side;
};
hxGeomAlgo__$Tess2_TessHalfEdge.__name__ = true;
hxGeomAlgo__$Tess2_TessHalfEdge.prototype = {
	get_Rface: function() {
		return this.Sym.Lface;
	}
	,set_Rface: function(v) {
		return this.Sym.Lface = v;
	}
	,get_Dst: function() {
		return this.Sym.Org;
	}
	,set_Dst: function(v) {
		return this.Sym.Org = v;
	}
	,get_Oprev: function() {
		return this.Sym.Lnext;
	}
	,get_Lprev: function() {
		return this.Onext.Sym;
	}
	,get_Rprev: function() {
		return this.Sym.Onext;
	}
	,get_Dnext: function() {
		return this.Sym.Onext.Sym;
	}
};
var hxGeomAlgo__$Tess2_TessMesh = function() {
	this.eSym = new hxGeomAlgo__$Tess2_TessHalfEdge(1);
	this.e = new hxGeomAlgo__$Tess2_TessHalfEdge(0);
	this.f = new hxGeomAlgo__$Tess2_TessFace();
	this.v = new hxGeomAlgo__$Tess2_TessVertex();
	this.v.next = this.v.prev = this.v;
	this.v.anEdge = null;
	this.f.next = this.f.prev = this.f;
	this.f.anEdge = null;
	this.f.trail = null;
	this.f.marked = false;
	this.f.inside = false;
	this.e.next = this.e;
	this.e.Sym = this.eSym;
	this.e.Onext = null;
	this.e.Lnext = null;
	this.e.Org = null;
	this.e.Lface = null;
	this.e.winding = 0;
	this.e.activeRegion = null;
	this.e.mark = false;
	this.eSym.next = this.eSym;
	this.eSym.Sym = this.e;
	this.eSym.Onext = null;
	this.eSym.Lnext = null;
	this.eSym.Org = null;
	this.eSym.Lface = null;
	this.eSym.winding = 0;
	this.eSym.activeRegion = null;
	this.e.Sym.mark = false;
	this.vHead = this.v;
	this.fHead = this.f;
	this.eHead = this.e;
	this.eHeadSym = this.eSym;
};
hxGeomAlgo__$Tess2_TessMesh.__name__ = true;
hxGeomAlgo__$Tess2_TessMesh.flipEdge = function(mesh,edge) {
	var a0 = edge;
	var a1 = a0.Lnext;
	var a2 = a1.Lnext;
	var b0 = edge.Sym;
	var b1 = b0.Lnext;
	var b2 = b1.Lnext;
	var aOrg = a0.Org;
	var aOpp = a2.Org;
	var bOrg = b0.Org;
	var bOpp = b2.Org;
	var fa = a0.Lface;
	var fb = b0.Lface;
	var cond = hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edge);
	a0.Org = bOpp;
	a0.Onext = b1.Sym;
	b0.Org = aOpp;
	b0.Onext = a1.Sym;
	a2.Onext = b0;
	b2.Onext = a0;
	b1.Onext = a2.Sym;
	a1.Onext = b2.Sym;
	a0.Lnext = a2;
	a2.Lnext = b1;
	b1.Lnext = a0;
	b0.Lnext = b2;
	b2.Lnext = a1;
	a1.Lnext = b0;
	a1.Lface = fb;
	b1.Lface = fa;
	fa.anEdge = a0;
	fb.anEdge = b0;
	if(aOrg.anEdge == a0) {
		aOrg.anEdge = b1;
	}
	if(bOrg.anEdge == b0) {
		bOrg.anEdge = a1;
	}
	var cond1 = a0.get_Oprev().Onext.Org == a0.Org;
};
hxGeomAlgo__$Tess2_TessMesh.prototype = {
	makeEdge_: function(eNext) {
		var e = new hxGeomAlgo__$Tess2_TessHalfEdge(0);
		var eSym = new hxGeomAlgo__$Tess2_TessHalfEdge(1);
		if(eNext.Sym.side < eNext.side) {
			eNext = eNext.Sym;
		}
		var ePrev = eNext.Sym.next;
		eSym.next = ePrev;
		ePrev.Sym.next = e;
		e.next = eNext;
		eNext.Sym.next = eSym;
		e.Sym = eSym;
		e.Onext = e;
		e.Lnext = eSym;
		e.Org = null;
		e.Lface = null;
		e.winding = 0;
		e.activeRegion = null;
		eSym.Sym = e;
		eSym.Onext = eSym;
		eSym.Lnext = e;
		eSym.Org = null;
		eSym.Lface = null;
		eSym.winding = 0;
		eSym.activeRegion = null;
		return e;
	}
	,splice_: function(a,b) {
		var aOnext = a.Onext;
		var bOnext = b.Onext;
		aOnext.Sym.Lnext = b;
		bOnext.Sym.Lnext = a;
		a.Onext = bOnext;
		b.Onext = aOnext;
	}
	,makeVertex_: function(newVertex,eOrig,vNext) {
		var vNew = newVertex;
		var vPrev = vNext.prev;
		vNew.prev = vPrev;
		vPrev.next = vNew;
		vNew.next = vNext;
		vNext.prev = vNew;
		vNew.anEdge = eOrig;
		var e = eOrig;
		while(true) {
			e.Org = vNew;
			e = e.Onext;
			if(!(e != eOrig)) {
				break;
			}
		}
	}
	,makeFace_: function(newFace,eOrig,fNext) {
		var fNew = newFace;
		var fPrev = fNext.prev;
		fNew.prev = fPrev;
		fPrev.next = fNew;
		fNew.next = fNext;
		fNext.prev = fNew;
		fNew.anEdge = eOrig;
		fNew.trail = null;
		fNew.marked = false;
		fNew.inside = fNext.inside;
		var e = eOrig;
		while(true) {
			e.Lface = fNew;
			e = e.Lnext;
			if(!(e != eOrig)) {
				break;
			}
		}
	}
	,killEdge_: function(eDel) {
		if(eDel.Sym.side < eDel.side) {
			eDel = eDel.Sym;
		}
		var eNext = eDel.next;
		var ePrev = eDel.Sym.next;
		eNext.Sym.next = ePrev;
		ePrev.Sym.next = eNext;
	}
	,killVertex_: function(vDel,newOrg) {
		var eStart = vDel.anEdge;
		var e = eStart;
		while(true) {
			e.Org = newOrg;
			e = e.Onext;
			if(!(e != eStart)) {
				break;
			}
		}
		var vPrev = vDel.prev;
		var vNext = vDel.next;
		vNext.prev = vPrev;
		vPrev.next = vNext;
	}
	,killFace_: function(fDel,newLface) {
		var eStart = fDel.anEdge;
		var e = eStart;
		while(true) {
			e.Lface = newLface;
			e = e.Lnext;
			if(!(e != eStart)) {
				break;
			}
		}
		var fPrev = fDel.prev;
		var fNext = fDel.next;
		fNext.prev = fPrev;
		fPrev.next = fNext;
	}
	,makeEdge: function() {
		var newVertex1 = new hxGeomAlgo__$Tess2_TessVertex();
		var newVertex2 = new hxGeomAlgo__$Tess2_TessVertex();
		var newFace = new hxGeomAlgo__$Tess2_TessFace();
		var e = this.makeEdge_(this.eHead);
		this.makeVertex_(newVertex1,e,this.vHead);
		this.makeVertex_(newVertex2,e.Sym,this.vHead);
		this.makeFace_(newFace,e,this.fHead);
		return e;
	}
	,splice: function(eOrg,eDst) {
		var joiningLoops = false;
		var joiningVertices = false;
		if(eOrg == eDst) {
			return;
		}
		if(eDst.Org != eOrg.Org) {
			joiningVertices = true;
			this.killVertex_(eDst.Org,eOrg.Org);
		}
		if(eDst.Lface != eOrg.Lface) {
			joiningLoops = true;
			this.killFace_(eDst.Lface,eOrg.Lface);
		}
		this.splice_(eDst,eOrg);
		if(!joiningVertices) {
			var newVertex = new hxGeomAlgo__$Tess2_TessVertex();
			this.makeVertex_(newVertex,eDst,eOrg.Org);
			eOrg.Org.anEdge = eOrg;
		}
		if(!joiningLoops) {
			var newFace = new hxGeomAlgo__$Tess2_TessFace();
			this.makeFace_(newFace,eDst,eOrg.Lface);
			eOrg.Lface.anEdge = eOrg;
		}
	}
	,'delete': function(eDel) {
		var eDelSym = eDel.Sym;
		var joiningLoops = false;
		if(eDel.Lface != eDel.get_Rface()) {
			joiningLoops = true;
			this.killFace_(eDel.Lface,eDel.get_Rface());
		}
		if(eDel.Onext == eDel) {
			this.killVertex_(eDel.Org,null);
		} else {
			eDel.get_Rface().anEdge = eDel.get_Oprev();
			eDel.Org.anEdge = eDel.Onext;
			this.splice_(eDel,eDel.get_Oprev());
			if(!joiningLoops) {
				var newFace = new hxGeomAlgo__$Tess2_TessFace();
				this.makeFace_(newFace,eDel,eDel.Lface);
			}
		}
		if(eDelSym.Onext == eDelSym) {
			this.killVertex_(eDelSym.Org,null);
			this.killFace_(eDelSym.Lface,null);
		} else {
			eDel.Lface.anEdge = eDelSym.get_Oprev();
			eDelSym.Org.anEdge = eDelSym.Onext;
			this.splice_(eDelSym,eDelSym.get_Oprev());
		}
		this.killEdge_(eDel);
	}
	,addEdgeVertex: function(eOrg) {
		var eNew = this.makeEdge_(eOrg);
		var eNewSym = eNew.Sym;
		this.splice_(eNew,eOrg.Lnext);
		eNew.Org = eOrg.get_Dst();
		var newVertex = new hxGeomAlgo__$Tess2_TessVertex();
		this.makeVertex_(newVertex,eNewSym,eNew.Org);
		eNew.Lface = eNewSym.Lface = eOrg.Lface;
		return eNew;
	}
	,splitEdge: function(eOrg) {
		var tempHalfEdge = this.addEdgeVertex(eOrg);
		var eNew = tempHalfEdge.Sym;
		this.splice_(eOrg.Sym,eOrg.Sym.get_Oprev());
		this.splice_(eOrg.Sym,eNew);
		eOrg.set_Dst(eNew.Org);
		eNew.get_Dst().anEdge = eNew.Sym;
		eNew.set_Rface(eOrg.get_Rface());
		eNew.winding = eOrg.winding;
		eNew.Sym.winding = eOrg.Sym.winding;
		return eNew;
	}
	,connect: function(eOrg,eDst) {
		var joiningLoops = false;
		var eNew = this.makeEdge_(eOrg);
		var eNewSym = eNew.Sym;
		if(eDst.Lface != eOrg.Lface) {
			joiningLoops = true;
			this.killFace_(eDst.Lface,eOrg.Lface);
		}
		this.splice_(eNew,eOrg.Lnext);
		this.splice_(eNewSym,eDst);
		eNew.Org = eOrg.get_Dst();
		eNewSym.Org = eDst.Org;
		eNew.Lface = eNewSym.Lface = eOrg.Lface;
		eOrg.Lface.anEdge = eNewSym;
		if(!joiningLoops) {
			var newFace = new hxGeomAlgo__$Tess2_TessFace();
			this.makeFace_(newFace,eNew,eOrg.Lface);
		}
		return eNew;
	}
	,zapFace: function(fZap) {
		var eStart = fZap.anEdge;
		var e;
		var eSym;
		var eNext = eStart.Lnext;
		while(true) {
			e = eNext;
			eNext = e.Lnext;
			e.Lface = null;
			if(e.get_Rface() == null) {
				if(e.Onext == e) {
					this.killVertex_(e.Org,null);
				} else {
					e.Org.anEdge = e.Onext;
					this.splice_(e,e.get_Oprev());
				}
				eSym = e.Sym;
				if(eSym.Onext == eSym) {
					this.killVertex_(eSym.Org,null);
				} else {
					eSym.Org.anEdge = eSym.Onext;
					this.splice_(eSym,eSym.get_Oprev());
				}
				this.killEdge_(e);
			}
			if(!(e != eStart)) {
				break;
			}
		}
		var fPrev = fZap.prev;
		var fNext = fZap.next;
		fNext.prev = fPrev;
		fPrev.next = fNext;
	}
	,countFaceVerts_: function(f) {
		var eCur = f.anEdge;
		var n = 0;
		while(true) {
			++n;
			eCur = eCur.Lnext;
			if(!(eCur != f.anEdge)) {
				break;
			}
		}
		return n;
	}
	,mergeConvexFaces: function(maxVertsPerFace) {
		var eCur;
		var eNext;
		var eSym;
		var vStart;
		var curNv;
		var symNv;
		var f = this.fHead.next;
		while(f != this.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			eCur = f.anEdge;
			vStart = eCur.Org;
			while(true) {
				eNext = eCur.Lnext;
				eSym = eCur.Sym;
				if(eSym != null && eSym.Lface != null && eSym.Lface.inside) {
					curNv = this.countFaceVerts_(f);
					symNv = this.countFaceVerts_(eSym.Lface);
					if(curNv + symNv - 2 <= maxVertsPerFace) {
						if(hxGeomAlgo__$Tess2_Geom.vertCCW(eCur.get_Lprev().Org,eCur.Org,eSym.Lnext.Lnext.Org) && hxGeomAlgo__$Tess2_Geom.vertCCW(eSym.get_Lprev().Org,eSym.Org,eCur.Lnext.Lnext.Org)) {
							eNext = eSym.Lnext;
							this.delete(eSym);
							eCur = null;
							eSym = null;
						}
					}
				}
				if(eCur != null && eCur.Lnext.Org == vStart) {
					break;
				}
				eCur = eNext;
			}
			f = f.next;
		}
		return true;
	}
	,check: function() {
		var fHead = this.fHead;
		var vHead = this.vHead;
		var eHead = this.eHead;
		var f;
		var v;
		var e;
		var fPrev = fHead;
		while(true) {
			f = fPrev.next;
			if(!(f != fHead)) {
				break;
			}
			e = f.anEdge;
			while(true) {
				e = e.Lnext;
				if(!(e != f.anEdge)) {
					break;
				}
			}
			fPrev = f;
		}
		var vPrev = vHead;
		while(true) {
			v = vPrev.next;
			if(!(v != vHead)) {
				break;
			}
			e = v.anEdge;
			while(true) {
				e = e.Onext;
				if(!(e != v.anEdge)) {
					break;
				}
			}
			vPrev = v;
		}
		var ePrev = eHead;
		while(true) {
			e = ePrev.next;
			if(!(e != eHead)) {
				break;
			}
			var cond = e.get_Dst() != null;
			ePrev = e;
		}
		var cond1 = e.Sym.next == ePrev.Sym && e.Sym == this.eHeadSym && e.Sym.Sym == e && e.Org == null && e.get_Dst() == null && e.Lface == null && e.get_Rface() == null;
	}
};
var hxGeomAlgo__$Tess2_Geom = function() { };
hxGeomAlgo__$Tess2_Geom.__name__ = true;
hxGeomAlgo__$Tess2_Geom.vertEq = function(u,v) {
	if(u.s == v.s) {
		return u.t == v.t;
	} else {
		return false;
	}
};
hxGeomAlgo__$Tess2_Geom.vertLeq = function(u,v) {
	if(!(u.s < v.s)) {
		if(u.s == v.s) {
			return u.t <= v.t;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxGeomAlgo__$Tess2_Geom.transLeq = function(u,v) {
	if(!(u.t < v.t)) {
		if(u.t == v.t) {
			return u.s <= v.s;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxGeomAlgo__$Tess2_Geom.edgeGoesLeft = function(e) {
	return hxGeomAlgo__$Tess2_Geom.vertLeq(e.get_Dst(),e.Org);
};
hxGeomAlgo__$Tess2_Geom.edgeGoesRight = function(e) {
	return hxGeomAlgo__$Tess2_Geom.vertLeq(e.Org,e.get_Dst());
};
hxGeomAlgo__$Tess2_Geom.edgeIsInternal = function(e) {
	if(e.get_Rface() != null) {
		return e.get_Rface().inside;
	} else {
		return false;
	}
};
hxGeomAlgo__$Tess2_Geom.vertL1dist = function(u,v) {
	return Math.abs(u.s - v.s) + Math.abs(u.t - v.t);
};
hxGeomAlgo__$Tess2_Geom.edgeEval = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(u,v) && hxGeomAlgo__$Tess2_Geom.vertLeq(v,w);
	var gapL = v.s - u.s;
	var gapR = w.s - v.s;
	if(gapL + gapR > 0.0) {
		if(gapL < gapR) {
			return v.t - u.t + (u.t - w.t) * (gapL / (gapL + gapR));
		} else {
			return v.t - w.t + (w.t - u.t) * (gapR / (gapL + gapR));
		}
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.edgeSign = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(u,v) && hxGeomAlgo__$Tess2_Geom.vertLeq(v,w);
	var gapL = v.s - u.s;
	var gapR = w.s - v.s;
	if(gapL + gapR > 0.0) {
		return (v.t - w.t) * gapL + (v.t - u.t) * gapR;
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.transEval = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.transLeq(u,v) && hxGeomAlgo__$Tess2_Geom.transLeq(v,w);
	var gapL = v.t - u.t;
	var gapR = w.t - v.t;
	if(gapL + gapR > 0.0) {
		if(gapL < gapR) {
			return v.s - u.s + (u.s - w.s) * (gapL / (gapL + gapR));
		} else {
			return v.s - w.s + (w.s - u.s) * (gapR / (gapL + gapR));
		}
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.transSign = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.transLeq(u,v) && hxGeomAlgo__$Tess2_Geom.transLeq(v,w);
	var gapL = v.t - u.t;
	var gapR = w.t - v.t;
	if(gapL + gapR > 0.0) {
		return (v.s - w.s) * gapL + (v.s - u.s) * gapR;
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.vertCCW = function(u,v,w) {
	return u.s * (v.t - w.t) + v.s * (w.t - u.t) + w.s * (u.t - v.t) >= 0.0;
};
hxGeomAlgo__$Tess2_Geom.interpolate = function(a,x,b,y) {
	if(a < 0) {
		a = 0;
	}
	if(b < 0) {
		b = 0;
	}
	if(a <= b) {
		if(b == 0) {
			return (x + y) / 2;
		} else {
			return x + (y - x) * (a / (a + b));
		}
	} else {
		return y + (x - y) * (b / (a + b));
	}
};
hxGeomAlgo__$Tess2_Geom.intersect = function(o1,d1,o2,d2,v) {
	var z1;
	var z2;
	var t;
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o1,d1)) {
		t = o1;
		o1 = d1;
		d1 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o2,d2)) {
		t = o2;
		o2 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o1,o2)) {
		t = o1;
		o1 = o2;
		o2 = t;
		t = d1;
		d1 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o2,d1)) {
		v.s = (o2.s + d1.s) / 2;
	} else if(hxGeomAlgo__$Tess2_Geom.vertLeq(d1,d2)) {
		z1 = hxGeomAlgo__$Tess2_Geom.edgeEval(o1,o2,d1);
		z2 = hxGeomAlgo__$Tess2_Geom.edgeEval(o2,d1,d2);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.s = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.s,z2,d1.s);
	} else {
		z1 = hxGeomAlgo__$Tess2_Geom.edgeSign(o1,o2,d1);
		z2 = -hxGeomAlgo__$Tess2_Geom.edgeSign(o1,d2,d1);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.s = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.s,z2,d2.s);
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o1,d1)) {
		t = o1;
		o1 = d1;
		d1 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o2,d2)) {
		t = o2;
		o2 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o1,o2)) {
		t = o1;
		o1 = o2;
		o2 = t;
		t = d1;
		d1 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o2,d1)) {
		v.t = (o2.t + d1.t) / 2;
	} else if(hxGeomAlgo__$Tess2_Geom.transLeq(d1,d2)) {
		z1 = hxGeomAlgo__$Tess2_Geom.transEval(o1,o2,d1);
		z2 = hxGeomAlgo__$Tess2_Geom.transEval(o2,d1,d2);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.t = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.t,z2,d1.t);
	} else {
		z1 = hxGeomAlgo__$Tess2_Geom.transSign(o1,o2,d1);
		z2 = -hxGeomAlgo__$Tess2_Geom.transSign(o1,d2,d1);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.t = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.t,z2,d2.t);
	}
};
hxGeomAlgo__$Tess2_Geom.calcAngle = function(v0,v1,v2) {
	var a_0 = v2.s - v1.s;
	var a_1 = v2.t - v1.t;
	var b_0 = v0.s - v1.s;
	var b_1 = v0.t - v1.t;
	var num = a_0 * b_0 + a_1 * b_1;
	var den = Math.sqrt(a_0 * a_0 + a_1 * a_1) * Math.sqrt(b_0 * b_0 + b_1 * b_1);
	if(den > 0.0) {
		num /= den;
	}
	if(num < -1.0) {
		num = -1.0;
	}
	if(num > 1.0) {
		num = 1.0;
	}
	return Math.acos(num);
};
hxGeomAlgo__$Tess2_Geom.edgeIsLocallyDelaunay = function(e) {
	return hxGeomAlgo__$Tess2_Geom.calcAngle(e.Lnext.Org,e.Lnext.Lnext.Org,e.Org) + hxGeomAlgo__$Tess2_Geom.calcAngle(e.Sym.Lnext.Org,e.Sym.Lnext.Lnext.Org,e.Sym.Org) < Math.PI + 0.01;
};
var hxGeomAlgo__$Tess2_DictNode = function() {
	this.prev = null;
	this.next = null;
	this.key = null;
};
hxGeomAlgo__$Tess2_DictNode.__name__ = true;
var hxGeomAlgo__$Tess2_Dict = function(frame,leq) {
	this.head = new hxGeomAlgo__$Tess2_DictNode();
	this.head.next = this.head;
	this.head.prev = this.head;
	this.frame = frame;
	this.leq = leq;
};
hxGeomAlgo__$Tess2_Dict.__name__ = true;
hxGeomAlgo__$Tess2_Dict.prototype = {
	min: function() {
		return this.head.next;
	}
	,insert: function(k) {
		return this.insertBefore(this.head,k);
	}
	,search: function(key) {
		var node = this.head;
		while(true) {
			node = node.next;
			if(!(node.key != null && !this.leq(this.frame,key,node.key))) {
				break;
			}
		}
		return node;
	}
	,insertBefore: function(node,key) {
		while(true) {
			node = node.prev;
			if(!(node.key != null && !this.leq(this.frame,node.key,key))) {
				break;
			}
		}
		var newNode = new hxGeomAlgo__$Tess2_DictNode();
		newNode.key = key;
		newNode.next = node.next;
		node.next.prev = newNode;
		newNode.prev = node;
		node.next = newNode;
		return newNode;
	}
	,'delete': function(node) {
		node.next.prev = node.prev;
		node.prev.next = node.next;
	}
};
var hxGeomAlgo__$Tess2_PQNode = function() {
	this.handle = -1;
};
hxGeomAlgo__$Tess2_PQNode.__name__ = true;
var hxGeomAlgo__$Tess2_PQHandleElem = function() {
	this.node = -1;
	this.key = null;
};
hxGeomAlgo__$Tess2_PQHandleElem.__name__ = true;
var hxGeomAlgo__$Tess2_PriorityQ = function(size,leq) {
	this.size = 0;
	this.max = size;
	this.nodes = [];
	var _g = 0;
	var _g1 = size + 1;
	while(_g < _g1) {
		var i = _g++;
		this.nodes[i] = new hxGeomAlgo__$Tess2_PQNode();
	}
	this.handles = [];
	var _g2 = 0;
	var _g3 = size + 1;
	while(_g2 < _g3) {
		var i1 = _g2++;
		this.handles[i1] = new hxGeomAlgo__$Tess2_PQHandleElem();
	}
	this.initialized = false;
	this.freeList = 0;
	this.leq = leq;
	this.nodes[1].handle = 1;
	this.handles[1].key = null;
};
hxGeomAlgo__$Tess2_PriorityQ.__name__ = true;
hxGeomAlgo__$Tess2_PriorityQ.prototype = {
	floatDown_: function(curr) {
		var n = this.nodes;
		var h = this.handles;
		var hChild;
		var child;
		var hCurr = n[curr].handle;
		while(true) {
			child = curr << 1;
			if(child < this.size && this.leq(h[n[child + 1].handle].key,h[n[child].handle].key)) {
				++child;
			}
			hChild = n[child].handle;
			if(child > this.size || this.leq(h[hCurr].key,h[hChild].key)) {
				n[curr].handle = hCurr;
				h[hCurr].node = curr;
				break;
			}
			n[curr].handle = hChild;
			h[hChild].node = curr;
			curr = child;
		}
	}
	,floatUp_: function(curr) {
		var n = this.nodes;
		var h = this.handles;
		var hParent;
		var parent;
		var hCurr = n[curr].handle;
		while(true) {
			parent = curr >> 1;
			hParent = n[parent].handle;
			if(parent == 0 || this.leq(h[hParent].key,h[hCurr].key)) {
				n[curr].handle = hCurr;
				h[hCurr].node = curr;
				break;
			}
			n[curr].handle = hParent;
			h[hParent].node = curr;
			curr = parent;
		}
	}
	,init: function() {
		var i = this.size;
		while(i >= 1) {
			this.floatDown_(i);
			--i;
		}
		this.initialized = true;
	}
	,min: function() {
		return this.handles[this.nodes[1].handle].key;
	}
	,insert: function(keyNew) {
		var free;
		var curr = ++this.size;
		if(curr * 2 > this.max) {
			this.max *= 2;
			var s = this.nodes.length;
			var _g = s;
			var _g1 = this.max + 1;
			while(_g < _g1) {
				var i = _g++;
				this.nodes[i] = new hxGeomAlgo__$Tess2_PQNode();
			}
			s = this.handles.length;
			var _g2 = this.handles.length;
			var _g3 = this.max + 1;
			while(_g2 < _g3) {
				var i1 = _g2++;
				this.handles[i1] = new hxGeomAlgo__$Tess2_PQHandleElem();
			}
		}
		if(this.freeList == 0) {
			free = curr;
		} else {
			free = this.freeList;
			this.freeList = this.handles[free].node;
		}
		this.nodes[curr].handle = free;
		this.handles[free].node = curr;
		this.handles[free].key = keyNew;
		if(this.initialized) {
			this.floatUp_(curr);
		}
		return free;
	}
	,extractMin: function() {
		var n = this.nodes;
		var h = this.handles;
		var hMin = n[1].handle;
		var min = h[hMin].key;
		if(this.size > 0) {
			n[1].handle = n[this.size].handle;
			h[n[1].handle].node = 1;
			h[hMin].key = null;
			h[hMin].node = this.freeList;
			this.freeList = hMin;
			--this.size;
			if(this.size > 0) {
				this.floatDown_(1);
			}
		}
		return min;
	}
	,'delete': function(hCurr) {
		var n = this.nodes;
		var h = this.handles;
		var curr = h[hCurr].node;
		n[curr].handle = n[this.size].handle;
		h[n[curr].handle].node = curr;
		--this.size;
		if(curr <= this.size) {
			if(curr <= 1 || this.leq(h[n[curr >> 1].handle].key,h[n[curr].handle].key)) {
				this.floatDown_(curr);
			} else {
				this.floatUp_(curr);
			}
		}
		h[hCurr].key = null;
		h[hCurr].node = this.freeList;
		this.freeList = hCurr;
	}
};
var hxGeomAlgo__$Tess2_ActiveRegion = function() {
	this.fixUpperEdge = false;
	this.dirty = false;
	this.sentinel = false;
	this.inside = false;
	this.windingNumber = 0;
	this.nodeUp = null;
	this.eUp = null;
};
hxGeomAlgo__$Tess2_ActiveRegion.__name__ = true;
var hxGeomAlgo__$Tess2_Sweep = function() { };
hxGeomAlgo__$Tess2_Sweep.__name__ = true;
hxGeomAlgo__$Tess2_Sweep.regionBelow = function(r) {
	return r.nodeUp.prev.key;
};
hxGeomAlgo__$Tess2_Sweep.regionAbove = function(r) {
	return r.nodeUp.next.key;
};
hxGeomAlgo__$Tess2_Sweep.debugEvent = function(tess) {
};
hxGeomAlgo__$Tess2_Sweep.addWinding = function(eDst,eSrc) {
	eDst.winding += eSrc.winding;
	eDst.Sym.winding += eSrc.Sym.winding;
};
hxGeomAlgo__$Tess2_Sweep.edgeLeq = function(tess,reg1,reg2) {
	var ev = tess.event;
	var t1;
	var t2;
	var e1 = reg1.eUp;
	var e2 = reg2.eUp;
	if(e1.get_Dst() == ev) {
		if(e2.get_Dst() == ev) {
			if(hxGeomAlgo__$Tess2_Geom.vertLeq(e1.Org,e2.Org)) {
				return hxGeomAlgo__$Tess2_Geom.edgeSign(e2.get_Dst(),e1.Org,e2.Org) <= 0;
			}
			return hxGeomAlgo__$Tess2_Geom.edgeSign(e1.get_Dst(),e2.Org,e1.Org) >= 0;
		}
		return hxGeomAlgo__$Tess2_Geom.edgeSign(e2.get_Dst(),ev,e2.Org) <= 0;
	}
	if(e2.get_Dst() == ev) {
		return hxGeomAlgo__$Tess2_Geom.edgeSign(e1.get_Dst(),ev,e1.Org) >= 0;
	}
	var t11 = hxGeomAlgo__$Tess2_Geom.edgeEval(e1.get_Dst(),ev,e1.Org);
	var t21 = hxGeomAlgo__$Tess2_Geom.edgeEval(e2.get_Dst(),ev,e2.Org);
	return t11 >= t21;
};
hxGeomAlgo__$Tess2_Sweep.deleteRegion = function(tess,reg) {
	var reg1 = reg.fixUpperEdge;
	reg.eUp.activeRegion = null;
	tess.dict.delete(reg.nodeUp);
};
hxGeomAlgo__$Tess2_Sweep.fixUpperEdge = function(tess,reg,newEdge) {
	tess.mesh.delete(reg.eUp);
	reg.fixUpperEdge = false;
	reg.eUp = newEdge;
	newEdge.activeRegion = reg;
};
hxGeomAlgo__$Tess2_Sweep.topLeftRegion = function(tess,reg) {
	var org = reg.eUp.Org;
	var e;
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
		if(!(reg.eUp.Org == org)) {
			break;
		}
	}
	if(reg.fixUpperEdge) {
		e = tess.mesh.connect(hxGeomAlgo__$Tess2_Sweep.regionBelow(reg).eUp.Sym,reg.eUp.Lnext);
		if(e == null) {
			return null;
		}
		hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,e);
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
	}
	return reg;
};
hxGeomAlgo__$Tess2_Sweep.topRightRegion = function(reg) {
	var dst = reg.eUp.get_Dst();
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
		if(!(reg.eUp.get_Dst() == dst)) {
			break;
		}
	}
	return reg;
};
hxGeomAlgo__$Tess2_Sweep.addRegionBelow = function(tess,regAbove,eNewUp) {
	var regNew = new hxGeomAlgo__$Tess2_ActiveRegion();
	regNew.eUp = eNewUp;
	regNew.nodeUp = tess.dict.insertBefore(regAbove.nodeUp,regNew);
	regNew.fixUpperEdge = false;
	regNew.sentinel = false;
	regNew.dirty = false;
	eNewUp.activeRegion = regNew;
	return regNew;
};
hxGeomAlgo__$Tess2_Sweep.isWindingInside = function(tess,n) {
	switch(tess.windingRule._hx_index) {
	case 0:
		return (n & 1) != 0;
	case 1:
		return n != 0;
	case 2:
		return n > 0;
	case 3:
		return n < 0;
	case 4:
		if(n < 2) {
			return n <= -2;
		} else {
			return true;
		}
		break;
	}
};
hxGeomAlgo__$Tess2_Sweep.computeWinding = function(tess,reg) {
	reg.windingNumber = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;
	reg.inside = hxGeomAlgo__$Tess2_Sweep.isWindingInside(tess,reg.windingNumber);
};
hxGeomAlgo__$Tess2_Sweep.finishRegion = function(tess,reg) {
	var e = reg.eUp;
	var f = e.Lface;
	f.inside = reg.inside;
	f.anEdge = e;
	hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
};
hxGeomAlgo__$Tess2_Sweep.finishLeftRegions = function(tess,regFirst,regLast) {
	var e;
	var ePrev;
	var reg = null;
	var regPrev = regFirst;
	var ePrev1 = regFirst.eUp;
	while(regPrev != regLast) {
		regPrev.fixUpperEdge = false;
		reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regPrev);
		e = reg.eUp;
		if(e.Org != ePrev1.Org) {
			if(!reg.fixUpperEdge) {
				hxGeomAlgo__$Tess2_Sweep.finishRegion(tess,regPrev);
				break;
			}
			e = tess.mesh.connect(ePrev1.get_Lprev(),e.Sym);
			hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,e);
		}
		if(ePrev1.Onext != e) {
			tess.mesh.splice(e.get_Oprev(),e);
			tess.mesh.splice(ePrev1,e);
		}
		hxGeomAlgo__$Tess2_Sweep.finishRegion(tess,regPrev);
		ePrev1 = reg.eUp;
		regPrev = reg;
	}
	return ePrev1;
};
hxGeomAlgo__$Tess2_Sweep.addRightEdges = function(tess,regUp,eFirst,eLast,eTopLeft,cleanUp) {
	var reg = null;
	var firstTime = true;
	var e = eFirst;
	while(true) {
		var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(e.Org,e.get_Dst());
		hxGeomAlgo__$Tess2_Sweep.addRegionBelow(tess,regUp,e.Sym);
		e = e.Onext;
		if(!(e != eLast)) {
			break;
		}
	}
	if(eTopLeft == null) {
		eTopLeft = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp.get_Rprev();
	}
	var regPrev = regUp;
	var ePrev = eTopLeft;
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regPrev);
		e = reg.eUp.Sym;
		if(e.Org != ePrev.Org) {
			break;
		}
		if(e.Onext != ePrev) {
			tess.mesh.splice(e.get_Oprev(),e);
			tess.mesh.splice(ePrev.get_Oprev(),e);
		}
		reg.windingNumber = regPrev.windingNumber - e.winding;
		reg.inside = hxGeomAlgo__$Tess2_Sweep.isWindingInside(tess,reg.windingNumber);
		regPrev.dirty = true;
		if(!firstTime && hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regPrev)) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(e,ePrev);
			hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regPrev);
			tess.mesh.delete(ePrev);
		}
		firstTime = false;
		regPrev = reg;
		ePrev = e;
	}
	regPrev.dirty = true;
	if(cleanUp) {
		hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions(tess,regPrev);
	}
};
hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices = function(tess,e1,e2) {
	tess.mesh.splice(e1,e2);
};
hxGeomAlgo__$Tess2_Sweep.vertexWeights = function(isect,org,dst) {
	var t1 = hxGeomAlgo__$Tess2_Geom.vertL1dist(org,isect);
	var t2 = hxGeomAlgo__$Tess2_Geom.vertL1dist(dst,isect);
	var w0 = 0.5 * t2 / (t1 + t2);
	var w1 = 0.5 * t1 / (t1 + t2);
	isect.coords[0] += w0 * org.coords[0] + w1 * dst.coords[0];
	isect.coords[1] += w0 * org.coords[1] + w1 * dst.coords[1];
	isect.coords[2] += w0 * org.coords[2] + w1 * dst.coords[2];
};
hxGeomAlgo__$Tess2_Sweep.getIntersectData = function(tess,isect,orgUp,dstUp,orgLo,dstLo) {
	var tmp = isect.coords[1] = isect.coords[2] = 0;
	isect.coords[0] = tmp;
	isect.idx = -1;
	hxGeomAlgo__$Tess2_Sweep.vertexWeights(isect,orgUp,dstUp);
	hxGeomAlgo__$Tess2_Sweep.vertexWeights(isect,orgLo,dstLo);
};
hxGeomAlgo__$Tess2_Sweep.checkForRightSplice = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eUp.Org,eLo.Org)) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eLo.get_Dst(),eUp.Org,eLo.Org) > 0) {
			return false;
		}
		if(!hxGeomAlgo__$Tess2_Geom.vertEq(eUp.Org,eLo.Org)) {
			tess.mesh.splitEdge(eLo.Sym);
			tess.mesh.splice(eUp,eLo.get_Oprev());
			regUp.dirty = regLo.dirty = true;
		} else if(eUp.Org != eLo.Org) {
			tess.pq.delete(eUp.Org.pqHandle);
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,eLo.get_Oprev(),eUp);
		}
	} else {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),eLo.Org,eUp.Org) < 0) {
			return false;
		}
		hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
		tess.mesh.splitEdge(eUp.Sym);
		tess.mesh.splice(eLo.get_Oprev(),eUp);
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.checkForLeftSplice = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var e;
	var cond = !hxGeomAlgo__$Tess2_Geom.vertEq(eUp.get_Dst(),eLo.get_Dst());
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eUp.get_Dst(),eLo.get_Dst())) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),eLo.get_Dst(),eUp.Org) < 0) {
			return false;
		}
		hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
		e = tess.mesh.splitEdge(eUp);
		tess.mesh.splice(eLo.Sym,e);
		e.Lface.inside = regUp.inside;
	} else {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eLo.get_Dst(),eUp.get_Dst(),eLo.Org) > 0) {
			return false;
		}
		regUp.dirty = regLo.dirty = true;
		e = tess.mesh.splitEdge(eLo);
		tess.mesh.splice(eUp.Lnext,eLo.Sym);
		e.get_Rface().inside = regUp.inside;
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.checkForIntersect = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var orgUp = eUp.Org;
	var orgLo = eLo.Org;
	var dstUp = eUp.get_Dst();
	var dstLo = eLo.get_Dst();
	var isect = new hxGeomAlgo__$Tess2_TessVertex();
	var e;
	var cond = !hxGeomAlgo__$Tess2_Geom.vertEq(dstLo,dstUp);
	var cond1 = hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,orgUp) <= 0;
	var cond2 = hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,orgLo) >= 0;
	if(orgUp == orgLo) {
		return false;
	}
	var tMinUp = Math.min(orgUp.t,dstUp.t);
	var tMaxLo = Math.max(orgLo.t,dstLo.t);
	if(tMinUp > tMaxLo) {
		return false;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(orgUp,orgLo)) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,orgUp,orgLo) > 0) {
			return false;
		}
	} else if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,orgLo,orgUp) < 0) {
		return false;
	}
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	hxGeomAlgo__$Tess2_Geom.intersect(dstUp,orgUp,dstLo,orgLo,isect);
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(isect,tess.event)) {
		isect.s = tess.event.s;
		isect.t = tess.event.t;
	}
	var orgMin = hxGeomAlgo__$Tess2_Geom.vertLeq(orgUp,orgLo) ? orgUp : orgLo;
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(orgMin,isect)) {
		isect.s = orgMin.s;
		isect.t = orgMin.t;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(isect,orgUp) || hxGeomAlgo__$Tess2_Geom.vertEq(isect,orgLo)) {
		hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regUp);
		return false;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertEq(dstUp,tess.event) && hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,isect) >= 0 || !hxGeomAlgo__$Tess2_Geom.vertEq(dstLo,tess.event) && hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,isect) <= 0) {
		if(dstLo == tess.event) {
			tess.mesh.splitEdge(eUp.Sym);
			tess.mesh.splice(eLo.Sym,eUp);
			regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,regUp);
			eUp = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp;
			hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp),regLo);
			hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eUp.get_Oprev(),eUp,eUp,true);
			return true;
		}
		if(dstUp == tess.event) {
			tess.mesh.splitEdge(eLo.Sym);
			tess.mesh.splice(eUp.Lnext,eLo.get_Oprev());
			regLo = regUp;
			regUp = hxGeomAlgo__$Tess2_Sweep.topRightRegion(regUp);
			e = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp.get_Rprev();
			regLo.eUp = eLo.get_Oprev();
			eLo = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,regLo,null);
			hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eLo.Onext,eUp.get_Rprev(),e,true);
			return true;
		}
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,isect) >= 0) {
			hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
			tess.mesh.splitEdge(eUp.Sym);
			eUp.Org.s = tess.event.s;
			eUp.Org.t = tess.event.t;
		}
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,isect) <= 0) {
			regUp.dirty = regLo.dirty = true;
			tess.mesh.splitEdge(eLo.Sym);
			eLo.Org.s = tess.event.s;
			eLo.Org.t = tess.event.t;
		}
		return false;
	}
	tess.mesh.splitEdge(eUp.Sym);
	tess.mesh.splitEdge(eLo.Sym);
	tess.mesh.splice(eLo.get_Oprev(),eUp);
	eUp.Org.s = isect.s;
	eUp.Org.t = isect.t;
	eUp.Org.pqHandle = tess.pq.insert(eUp.Org);
	hxGeomAlgo__$Tess2_Sweep.getIntersectData(tess,eUp.Org,orgUp,dstUp,orgLo,dstLo);
	hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;
	return false;
};
hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp;
	var eLo;
	while(true) {
		while(regLo.dirty) {
			regUp = regLo;
			regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regLo);
		}
		if(!regUp.dirty) {
			regLo = regUp;
			regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp);
			if(regUp == null || !regUp.dirty) {
				return;
			}
		}
		regUp.dirty = false;
		eUp = regUp.eUp;
		eLo = regLo.eUp;
		if(eUp.get_Dst() != eLo.get_Dst()) {
			if(hxGeomAlgo__$Tess2_Sweep.checkForLeftSplice(tess,regUp)) {
				if(regLo.fixUpperEdge) {
					hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regLo);
					tess.mesh.delete(eLo);
					regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
					eLo = regLo.eUp;
				} else if(regUp.fixUpperEdge) {
					hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regUp);
					tess.mesh.delete(eUp);
					regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regLo);
					eUp = regUp.eUp;
				}
			}
		}
		if(eUp.Org != eLo.Org) {
			if(eUp.get_Dst() != eLo.get_Dst() && !regUp.fixUpperEdge && !regLo.fixUpperEdge && (eUp.get_Dst() == tess.event || eLo.get_Dst() == tess.event)) {
				if(hxGeomAlgo__$Tess2_Sweep.checkForIntersect(tess,regUp)) {
					return;
				}
			} else {
				hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regUp);
			}
		}
		if(eUp.Org == eLo.Org && eUp.get_Dst() == eLo.get_Dst()) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(eLo,eUp);
			hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regUp);
			tess.mesh.delete(eUp);
			regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regLo);
		}
	}
};
hxGeomAlgo__$Tess2_Sweep.connectRightVertex = function(tess,regUp,eBottomLeft) {
	var eNew;
	var eTopLeft = eBottomLeft.Onext;
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var degenerate = false;
	if(eUp.get_Dst() != eLo.get_Dst()) {
		hxGeomAlgo__$Tess2_Sweep.checkForIntersect(tess,regUp);
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(eUp.Org,tess.event)) {
		tess.mesh.splice(eTopLeft.get_Oprev(),eUp);
		regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,regUp);
		eTopLeft = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp;
		hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp),regLo);
		degenerate = true;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(eLo.Org,tess.event)) {
		tess.mesh.splice(eBottomLeft,eLo.get_Oprev());
		eBottomLeft = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,regLo,null);
		degenerate = true;
	}
	if(degenerate) {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eBottomLeft.Onext,eTopLeft,eTopLeft,true);
		return;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eLo.Org,eUp.Org)) {
		eNew = eLo.get_Oprev();
	} else {
		eNew = eUp;
	}
	eNew = tess.mesh.connect(eBottomLeft.get_Lprev(),eNew);
	hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eNew,eNew.Onext,eNew.Onext,false);
	eNew.Sym.activeRegion.fixUpperEdge = true;
	hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions(tess,regUp);
};
hxGeomAlgo__$Tess2_Sweep.connectLeftDegenerate = function(tess,regUp,vEvent) {
	var e = regUp.eUp;
	if(hxGeomAlgo__$Tess2_Geom.vertEq(e.Org,vEvent)) {
		hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,e,vEvent.anEdge);
		return;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertEq(e.get_Dst(),vEvent)) {
		tess.mesh.splitEdge(e.Sym);
		if(regUp.fixUpperEdge) {
			tess.mesh.delete(e.Onext);
			regUp.fixUpperEdge = false;
		}
		tess.mesh.splice(vEvent.anEdge,e);
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,vEvent);
		return;
	}
	regUp = hxGeomAlgo__$Tess2_Sweep.topRightRegion(regUp);
	var reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eTopRight = reg.eUp.Sym;
	var eLast = eTopRight.Onext;
	var eTopLeft = eLast;
	if(reg.fixUpperEdge) {
		hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
		tess.mesh.delete(eTopRight);
		eTopRight = eTopLeft.get_Oprev();
	}
	tess.mesh.splice(vEvent.anEdge,eTopRight);
	if(!hxGeomAlgo__$Tess2_Geom.edgeGoesLeft(eTopLeft)) {
		eTopLeft = null;
	}
	hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eTopRight.Onext,eLast,eTopLeft,true);
};
hxGeomAlgo__$Tess2_Sweep.connectLeftVertex = function(tess,vEvent) {
	var eNew;
	var tmp = new hxGeomAlgo__$Tess2_ActiveRegion();
	tmp.eUp = vEvent.anEdge.Sym;
	var regUp = tess.dict.search(tmp).key;
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	if(regLo == null) {
		return;
	}
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),vEvent,eUp.Org) == 0.0) {
		hxGeomAlgo__$Tess2_Sweep.connectLeftDegenerate(tess,regUp,vEvent);
		return;
	}
	var reg = hxGeomAlgo__$Tess2_Geom.vertLeq(eLo.get_Dst(),eUp.get_Dst()) ? regUp : regLo;
	if(regUp.inside || reg.fixUpperEdge) {
		if(reg == regUp) {
			eNew = tess.mesh.connect(vEvent.anEdge.Sym,eUp.Lnext);
		} else {
			var tempHalfEdge = tess.mesh.connect(eLo.get_Dnext(),vEvent.anEdge);
			eNew = tempHalfEdge.Sym;
		}
		if(reg.fixUpperEdge) {
			hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,eNew);
		} else {
			hxGeomAlgo__$Tess2_Sweep.computeWinding(tess,hxGeomAlgo__$Tess2_Sweep.addRegionBelow(tess,regUp,eNew));
		}
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,vEvent);
	} else {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,vEvent.anEdge,vEvent.anEdge,null,true);
	}
};
hxGeomAlgo__$Tess2_Sweep.sweepEvent = function(tess,vEvent) {
	tess.event = vEvent;
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	var e = vEvent.anEdge;
	while(e.activeRegion == null) {
		e = e.Onext;
		if(e == vEvent.anEdge) {
			hxGeomAlgo__$Tess2_Sweep.connectLeftVertex(tess,vEvent);
			return;
		}
	}
	var regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,e.activeRegion);
	var reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eTopLeft = reg.eUp;
	var eBottomLeft = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,reg,null);
	if(eBottomLeft.Onext == eTopLeft) {
		hxGeomAlgo__$Tess2_Sweep.connectRightVertex(tess,regUp,eBottomLeft);
	} else {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eBottomLeft.Onext,eTopLeft,eTopLeft,true);
	}
};
hxGeomAlgo__$Tess2_Sweep.addSentinel = function(tess,smin,smax,t) {
	var reg = new hxGeomAlgo__$Tess2_ActiveRegion();
	var e = tess.mesh.makeEdge();
	e.Org.s = smax;
	e.Org.t = t;
	e.get_Dst().s = smin;
	e.get_Dst().t = t;
	tess.event = e.get_Dst();
	reg.eUp = e;
	reg.windingNumber = 0;
	reg.inside = false;
	reg.fixUpperEdge = false;
	reg.sentinel = true;
	reg.dirty = false;
	reg.nodeUp = tess.dict.insert(reg);
};
hxGeomAlgo__$Tess2_Sweep.initEdgeDict = function(tess) {
	tess.dict = new hxGeomAlgo__$Tess2_Dict(tess,hxGeomAlgo__$Tess2_Sweep.edgeLeq);
	var w = tess.bmax[0] - tess.bmin[0];
	var h = tess.bmax[1] - tess.bmin[1];
	var smin = tess.bmin[0] - w;
	var smax = tess.bmax[0] + w;
	var tmin = tess.bmin[1] - h;
	var tmax = tess.bmax[1] + h;
	hxGeomAlgo__$Tess2_Sweep.addSentinel(tess,smin,smax,tmin);
	hxGeomAlgo__$Tess2_Sweep.addSentinel(tess,smin,smax,tmax);
};
hxGeomAlgo__$Tess2_Sweep.doneEdgeDict = function(tess) {
	var reg;
	var fixedEdges = 0;
	while(true) {
		reg = tess.dict.min().key;
		if(!(reg != null)) {
			break;
		}
		if(!reg.sentinel) {
			var cond = ++fixedEdges == 1;
		}
		hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
	}
};
hxGeomAlgo__$Tess2_Sweep.removeDegenerateEdges = function(tess) {
	var eNext;
	var eLnext;
	var eHead = tess.mesh.eHead;
	var e = eHead.next;
	while(e != eHead) {
		eNext = e.next;
		eLnext = e.Lnext;
		if(hxGeomAlgo__$Tess2_Geom.vertEq(e.Org,e.get_Dst()) && e.Lnext.Lnext != e) {
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,eLnext,e);
			tess.mesh.delete(e);
			e = eLnext;
			eLnext = e.Lnext;
		}
		if(eLnext.Lnext == e) {
			if(eLnext != e) {
				if(eLnext == eNext || eLnext == eNext.Sym) {
					eNext = eNext.next;
				}
				tess.mesh.delete(eLnext);
			}
			if(e == eNext || e == eNext.Sym) {
				eNext = eNext.next;
			}
			tess.mesh.delete(e);
		}
		e = eNext;
	}
};
hxGeomAlgo__$Tess2_Sweep.initPriorityQ = function(tess) {
	var vertexCount = 0;
	var vHead = tess.mesh.vHead;
	var v = vHead.next;
	while(v != vHead) {
		++vertexCount;
		v = v.next;
	}
	vertexCount += 8;
	var pq = tess.pq = new hxGeomAlgo__$Tess2_PriorityQ(vertexCount,hxGeomAlgo__$Tess2_Geom.vertLeq);
	vHead = tess.mesh.vHead;
	v = vHead.next;
	while(v != vHead) {
		v.pqHandle = pq.insert(v);
		v = v.next;
	}
	if(v != vHead) {
		return false;
	}
	pq.init();
	return true;
};
hxGeomAlgo__$Tess2_Sweep.donePriorityQ = function(tess) {
	tess.pq = null;
};
hxGeomAlgo__$Tess2_Sweep.removeDegenerateFaces = function(tess,mesh) {
	var fNext;
	var e;
	var f = mesh.fHead.next;
	while(f != mesh.fHead) {
		fNext = f.next;
		e = f.anEdge;
		if(e.Lnext.Lnext == e) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(e.Onext,e);
			tess.mesh.delete(e);
		}
		f = fNext;
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.computeInterior = function(tess) {
	var v;
	var vNext;
	hxGeomAlgo__$Tess2_Sweep.removeDegenerateEdges(tess);
	if(!hxGeomAlgo__$Tess2_Sweep.initPriorityQ(tess)) {
		return false;
	}
	hxGeomAlgo__$Tess2_Sweep.initEdgeDict(tess);
	var pq = tess.pq;
	while(true) {
		v = tess.pq.extractMin();
		if(!(v != null)) {
			break;
		}
		while(true) {
			vNext = tess.pq.min();
			if(vNext == null || !hxGeomAlgo__$Tess2_Geom.vertEq(vNext,v)) {
				break;
			}
			vNext = tess.pq.extractMin();
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,v.anEdge,vNext.anEdge);
		}
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,v);
	}
	tess.event = tess.dict.min().key.eUp.Org;
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	hxGeomAlgo__$Tess2_Sweep.doneEdgeDict(tess);
	hxGeomAlgo__$Tess2_Sweep.donePriorityQ(tess);
	if(!hxGeomAlgo__$Tess2_Sweep.removeDegenerateFaces(tess,tess.mesh)) {
		return false;
	}
	tess.mesh.check();
	return true;
};
var hxGeomAlgo_Tesselator = $hx_exports["hxGeomAlgo"]["Tesselator"] = function() {
	this.elementCount = 0;
	this.elements = [];
	this.vertexCount = 0;
	this.vertexIndices = [];
	this.vertices = [];
	this.vertexIndexCounter = 0;
	this.event = null;
	this.pq = null;
	this.dict = null;
	this.bmax = [0.0,0.0];
	this.bmin = [0.0,0.0];
	this.tUnit = [0.0,0.0,0.0];
	this.sUnit = [0.0,0.0,0.0];
	this.normal = [0.0,0.0,0.0];
	this.mesh = null;
	this.windingRule = hxGeomAlgo_WindingRule.ODD;
};
hxGeomAlgo_Tesselator.__name__ = true;
hxGeomAlgo_Tesselator.prototype = {
	dot_: function(u,v) {
		return u[0] * v[0] + u[1] * v[1] + u[2] * v[2];
	}
	,normalize_: function(v) {
		var len = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
		len = Math.sqrt(len);
		v[0] /= len;
		v[1] /= len;
		v[2] /= len;
	}
	,longAxis_: function(v) {
		var i = 0;
		if(Math.abs(v[1]) > Math.abs(v[0])) {
			i = 1;
		}
		if(Math.abs(v[2]) > Math.abs(v[i])) {
			i = 2;
		}
		return i;
	}
	,computeNormal_: function(norm) {
		var c;
		var tLen2;
		var maxVal = [.0,.0,.0];
		var minVal = [.0,.0,.0];
		var d1 = [.0,.0,.0];
		var d2_0 = .0;
		var d2_1 = .0;
		var d2_2 = .0;
		var tNorm_0 = .0;
		var tNorm_1 = .0;
		var tNorm_2 = .0;
		var maxVert = [null,null,null];
		var minVert = [null,null,null];
		var vHead = this.mesh.vHead;
		var v = vHead.next;
		c = v.coords[0];
		minVal[0] = c;
		minVert[0] = v;
		maxVal[0] = c;
		maxVert[0] = v;
		c = v.coords[1];
		minVal[1] = c;
		minVert[1] = v;
		maxVal[1] = c;
		maxVert[1] = v;
		c = v.coords[2];
		minVal[2] = c;
		minVert[2] = v;
		maxVal[2] = c;
		maxVert[2] = v;
		v = vHead.next;
		while(v != vHead) {
			c = v.coords[0];
			if(c < minVal[0]) {
				minVal[0] = c;
				minVert[0] = v;
			}
			if(c > maxVal[0]) {
				maxVal[0] = c;
				maxVert[0] = v;
			}
			c = v.coords[1];
			if(c < minVal[1]) {
				minVal[1] = c;
				minVert[1] = v;
			}
			if(c > maxVal[1]) {
				maxVal[1] = c;
				maxVert[1] = v;
			}
			c = v.coords[2];
			if(c < minVal[2]) {
				minVal[2] = c;
				minVert[2] = v;
			}
			if(c > maxVal[2]) {
				maxVal[2] = c;
				maxVert[2] = v;
			}
			v = v.next;
		}
		var i = 0;
		if(maxVal[1] - minVal[1] > maxVal[0] - minVal[0]) {
			i = 1;
		}
		if(maxVal[2] - minVal[2] > maxVal[i] - minVal[i]) {
			i = 2;
		}
		if(minVal[i] >= maxVal[i]) {
			norm[0] = 0;
			norm[1] = 0;
			norm[2] = 1;
			return;
		}
		var maxLen2 = .0;
		var v1 = minVert[i];
		var v2 = maxVert[i];
		d1[0] = v1.coords[0] - v2.coords[0];
		d1[1] = v1.coords[1] - v2.coords[1];
		d1[2] = v1.coords[2] - v2.coords[2];
		v = vHead.next;
		while(v != vHead) {
			d2_0 = v.coords[0] - v2.coords[0];
			d2_1 = v.coords[1] - v2.coords[1];
			d2_2 = v.coords[2] - v2.coords[2];
			tNorm_0 = d1[1] * d2_2 - d1[2] * d2_1;
			tNorm_1 = d1[2] * d2_0 - d1[0] * d2_2;
			tNorm_2 = d1[0] * d2_1 - d1[1] * d2_0;
			tLen2 = tNorm_0 * tNorm_0 + tNorm_1 * tNorm_1 + tNorm_2 * tNorm_2;
			if(tLen2 > maxLen2) {
				maxLen2 = tLen2;
				norm[0] = tNorm_0;
				norm[1] = tNorm_1;
				norm[2] = tNorm_2;
			}
			v = v.next;
		}
		if(maxLen2 <= 0) {
			norm[0] = norm[1] = norm[2] = 0;
			norm[this.longAxis_(d1)] = 1;
		}
	}
	,checkOrientation_: function() {
		var fHead = this.mesh.fHead;
		var v;
		var vHead = this.mesh.vHead;
		var e;
		var area = .0;
		var f = fHead.next;
		while(f != fHead) {
			e = f.anEdge;
			if(e.winding <= 0) {
				f = f.next;
				continue;
			}
			while(true) {
				area += (e.Org.s - e.get_Dst().s) * (e.Org.t + e.get_Dst().t);
				e = e.Lnext;
				if(!(e != f.anEdge)) {
					break;
				}
			}
			f = f.next;
		}
		if(area < 0) {
			v = vHead.next;
			while(v != vHead) {
				v.t = -v.t;
				v = v.next;
			}
			this.tUnit[0] = -this.tUnit[0];
			this.tUnit[1] = -this.tUnit[1];
			this.tUnit[2] = -this.tUnit[2];
		}
	}
	,projectPolygon_: function() {
		var vHead = this.mesh.vHead;
		var norm = [.0,.0,.0];
		var computedNormal = false;
		norm[0] = this.normal[0];
		norm[1] = this.normal[1];
		norm[2] = this.normal[2];
		if(norm[0] == 0.0 && norm[1] == 0.0 && norm[2] == 0.0) {
			this.computeNormal_(norm);
			computedNormal = true;
		}
		var sUnit = this.sUnit;
		var tUnit = this.tUnit;
		var i = this.longAxis_(norm);
		sUnit[i] = 0;
		sUnit[(i + 1) % 3] = 1.0;
		sUnit[(i + 2) % 3] = 0.0;
		tUnit[i] = 0;
		tUnit[(i + 1) % 3] = 0.0;
		tUnit[(i + 2) % 3] = norm[i] > 0 ? 1.0 : -1.0;
		var v = vHead.next;
		while(v != vHead) {
			v.s = this.dot_(v.coords,sUnit);
			v.t = this.dot_(v.coords,tUnit);
			v = v.next;
		}
		if(computedNormal) {
			this.checkOrientation_();
		}
		var first = true;
		v = vHead.next;
		while(v != vHead) {
			if(first) {
				var tmp = this.bmax[0] = v.s;
				this.bmin[0] = tmp;
				var tmp1 = this.bmax[1] = v.t;
				this.bmin[1] = tmp1;
				first = false;
			} else {
				if(v.s < this.bmin[0]) {
					this.bmin[0] = v.s;
				}
				if(v.s > this.bmax[0]) {
					this.bmax[0] = v.s;
				}
				if(v.t < this.bmin[1]) {
					this.bmin[1] = v.t;
				}
				if(v.t > this.bmax[1]) {
					this.bmax[1] = v.t;
				}
			}
			v = v.next;
		}
	}
	,addWinding_: function(eDst,eSrc) {
		eDst.winding += eSrc.winding;
		eDst.Sym.winding += eSrc.Sym.winding;
	}
	,tessellateMonoRegion_: function(mesh,face) {
		var up = face.anEdge;
		while(hxGeomAlgo__$Tess2_Geom.vertLeq(up.get_Dst(),up.Org)) up = up.get_Lprev();
		while(hxGeomAlgo__$Tess2_Geom.vertLeq(up.Org,up.get_Dst())) up = up.Lnext;
		var lo = up.get_Lprev();
		while(up.Lnext != lo) if(hxGeomAlgo__$Tess2_Geom.vertLeq(up.get_Dst(),lo.Org)) {
			while(lo.Lnext != up && (hxGeomAlgo__$Tess2_Geom.edgeGoesLeft(lo.Lnext) || hxGeomAlgo__$Tess2_Geom.edgeSign(lo.Org,lo.get_Dst(),lo.Lnext.get_Dst()) <= 0.0)) {
				var tempHalfEdge = mesh.connect(lo.Lnext,lo);
				lo = tempHalfEdge.Sym;
			}
			lo = lo.get_Lprev();
		} else {
			while(lo.Lnext != up && (hxGeomAlgo__$Tess2_Geom.edgeGoesRight(up.get_Lprev()) || hxGeomAlgo__$Tess2_Geom.edgeSign(up.get_Dst(),up.Org,up.get_Lprev().Org) >= 0.0)) {
				var tempHalfEdge1 = mesh.connect(up,up.get_Lprev());
				up = tempHalfEdge1.Sym;
			}
			up = up.Lnext;
		}
		while(lo.Lnext.Lnext != up) {
			var tempHalfEdge2 = mesh.connect(lo.Lnext,lo);
			lo = tempHalfEdge2.Sym;
		}
		return true;
	}
	,tessellateInterior_: function(mesh) {
		var next;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			next = f.next;
			if(f.inside) {
				if(!this.tessellateMonoRegion_(mesh,f)) {
					return false;
				}
			}
			f = next;
		}
		return true;
	}
	,refineDelaunay_: function(mesh) {
		var stack = [];
		var e;
		var edges_0 = null;
		var edges_1 = null;
		var edges_2 = null;
		var edges_3 = null;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(f.inside) {
				e = f.anEdge;
				while(true) {
					e.mark = hxGeomAlgo__$Tess2_Geom.edgeIsInternal(e);
					if(e.mark && !e.Sym.mark) {
						stack.push(e);
					}
					e = e.Lnext;
					if(!(e != f.anEdge)) {
						break;
					}
				}
			}
			f = f.next;
		}
		while(stack.length > 0) {
			e = stack.pop();
			e.mark = e.Sym.mark = false;
			if(!hxGeomAlgo__$Tess2_Geom.edgeIsLocallyDelaunay(e)) {
				hxGeomAlgo__$Tess2_TessMesh.flipEdge(mesh,e);
				edges_0 = e.Lnext;
				edges_1 = e.get_Lprev();
				edges_2 = e.Sym.Lnext;
				edges_3 = e.Sym.get_Lprev();
				if(!edges_0.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_0)) {
					edges_0.mark = edges_0.Sym.mark = true;
					stack.push(edges_0);
				}
				if(!edges_1.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_1)) {
					edges_1.mark = edges_1.Sym.mark = true;
					stack.push(edges_1);
				}
				if(!edges_2.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_2)) {
					edges_2.mark = edges_2.Sym.mark = true;
					stack.push(edges_2);
				}
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var e1 = stack[_g];
			++_g;
			stack.pop();
		}
		stack = null;
	}
	,discardExterior_: function(mesh) {
		var next;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			next = f.next;
			if(!f.inside) {
				mesh.zapFace(f);
			}
			f = next;
		}
	}
	,setWindingNumber_: function(mesh,value,keepOnlyBoundary) {
		var eNext;
		var e = mesh.eHead.next;
		while(e != mesh.eHead) {
			eNext = e.next;
			if(e.get_Rface().inside != e.Lface.inside) {
				e.winding = e.Lface.inside ? value : -value;
			} else if(!keepOnlyBoundary) {
				e.winding = 0;
			} else {
				mesh.delete(e);
			}
			e = eNext;
		}
	}
	,getNeighbourFace_: function(edge) {
		if(edge.get_Rface() == null) {
			return -1;
		}
		if(!edge.get_Rface().inside) {
			return -1;
		}
		return edge.get_Rface().n;
	}
	,outputPolymesh_: function(mesh,resultsType,polySize,vertexDim) {
		var edge;
		var maxFaceCount = 0;
		var maxVertexCount = 0;
		var faceVerts;
		var i;
		var elements = 0;
		var vert;
		if(polySize > 3) {
			mesh.mergeConvexFaces(polySize);
		}
		var v = mesh.vHead.next;
		while(v != mesh.vHead) {
			v.n = -1;
			v = v.next;
		}
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			f.n = -1;
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			faceVerts = 0;
			while(true) {
				v = edge.Org;
				if(v.n == -1) {
					v.n = maxVertexCount;
					++maxVertexCount;
				}
				++faceVerts;
				edge = edge.Lnext;
				if(!(edge != f.anEdge)) {
					break;
				}
			}
			f.n = maxFaceCount;
			++maxFaceCount;
			f = f.next;
		}
		this.elementCount = maxFaceCount;
		if(resultsType == hxGeomAlgo_ResultType.CONNECTED_POLYGONS) {
			maxFaceCount *= 2;
		}
		this.elements = [];
		this.vertexCount = maxVertexCount;
		this.vertices = [];
		this.vertexIndices = [];
		v = mesh.vHead.next;
		while(v != mesh.vHead) {
			if(v.n != -1) {
				var idx = v.n * vertexDim;
				this.vertices[idx] = v.coords[0];
				this.vertices[idx + 1] = v.coords[1];
				if(vertexDim > 2) {
					this.vertices[idx + 2] = v.coords[2];
				}
				this.vertexIndices[v.n] = v.idx;
			}
			v = v.next;
		}
		var nel = 0;
		f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			faceVerts = 0;
			while(true) {
				v = edge.Org;
				this.elements[nel++] = v.n;
				++faceVerts;
				edge = edge.Lnext;
				if(!(edge != f.anEdge)) {
					break;
				}
			}
			var _g = faceVerts;
			var _g1 = polySize;
			while(_g < _g1) {
				var i1 = _g++;
				this.elements[nel++] = -1;
			}
			if(resultsType == hxGeomAlgo_ResultType.CONNECTED_POLYGONS) {
				edge = f.anEdge;
				while(true) {
					this.elements[nel++] = this.getNeighbourFace_(edge);
					edge = edge.Lnext;
					if(!(edge != f.anEdge)) {
						break;
					}
				}
				var _g2 = faceVerts;
				var _g3 = polySize;
				while(_g2 < _g3) {
					var i2 = _g2++;
					this.elements[nel++] = -1;
				}
			}
			f = f.next;
		}
	}
	,outputContours_: function(mesh,vertexDim) {
		var edge;
		var start;
		var verts;
		var elements;
		var vertInds;
		var startVert = 0;
		var vertCount = 0;
		this.vertexCount = 0;
		this.elementCount = 0;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			start = edge;
			while(true) {
				this.vertexCount++;
				edge = edge.Lnext;
				if(!(edge != start)) {
					break;
				}
			}
			this.elementCount++;
			f = f.next;
		}
		this.elements = [];
		this.vertices = [];
		this.vertexIndices = [];
		var nv = 0;
		var nvi = 0;
		var nel = 0;
		startVert = 0;
		f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			vertCount = 0;
			edge = f.anEdge;
			start = edge;
			while(true) {
				this.vertices[nv++] = edge.Org.coords[0];
				this.vertices[nv++] = edge.Org.coords[1];
				if(vertexDim > 2) {
					this.vertices[nv++] = edge.Org.coords[2];
				}
				this.vertexIndices[nvi++] = edge.Org.idx;
				++vertCount;
				edge = edge.Lnext;
				if(!(edge != start)) {
					break;
				}
			}
			this.elements[nel++] = startVert;
			this.elements[nel++] = vertCount;
			startVert += vertCount;
			f = f.next;
		}
	}
	,addContour: function(vertexDim,vertices) {
		if(this.mesh == null) {
			this.mesh = new hxGeomAlgo__$Tess2_TessMesh();
		}
		if(vertexDim < 2) {
			vertexDim = 2;
		}
		if(vertexDim > 3) {
			vertexDim = 3;
		}
		var e = null;
		var i = 0;
		while(i < vertices.length) {
			if(e == null) {
				e = this.mesh.makeEdge();
				this.mesh.splice(e,e.Sym);
			} else {
				this.mesh.splitEdge(e);
				e = e.Lnext;
			}
			e.Org.coords[0] = vertices[i];
			e.Org.coords[1] = vertices[i + 1];
			if(vertexDim > 2) {
				e.Org.coords[2] = vertices[i + 2];
			} else {
				e.Org.coords[2] = 0.0;
			}
			e.Org.idx = this.vertexIndexCounter++;
			e.winding = 1;
			e.Sym.winding = -1;
			i += vertexDim;
		}
	}
	,tesselate: function(windingRule,resultType,polySize,vertexDim,normal) {
		this.vertices = [];
		this.elements = [];
		this.vertexIndices = [];
		this.vertexIndexCounter = 0;
		if(normal != null) {
			this.normal[0] = normal[0];
			this.normal[1] = normal[1];
			this.normal[2] = normal[2];
		}
		this.windingRule = windingRule;
		if(vertexDim < 2) {
			vertexDim = 2;
		}
		if(vertexDim > 3) {
			vertexDim = 3;
		}
		if(this.mesh == null) {
			return false;
		}
		this.projectPolygon_();
		hxGeomAlgo__$Tess2_Sweep.computeInterior(this);
		var mesh = this.mesh;
		if(resultType == hxGeomAlgo_ResultType.BOUNDARY_CONTOURS) {
			this.setWindingNumber_(mesh,1,true);
		} else {
			this.tessellateInterior_(mesh);
			if(resultType == hxGeomAlgo_ResultType.EXPERIMENTAL_DELAUNAY) {
				this.refineDelaunay_(mesh);
				polySize = 3;
			}
		}
		mesh.check();
		if(resultType == hxGeomAlgo_ResultType.BOUNDARY_CONTOURS) {
			this.outputContours_(mesh,vertexDim);
		} else {
			this.outputPolymesh_(mesh,resultType,polySize,vertexDim);
		}
		return true;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
var trilateral2_Contour = function(pen_,endLine_) {
	if(endLine_ == null) {
		endLine_ = 0;
	}
	this.count = 0;
	this.pointsAnti = [];
	this.pointsClock = [];
	this.pen = pen_;
	this.endLine = endLine_;
};
trilateral2_Contour.__name__ = true;
trilateral2_Contour.prototype = {
	reset: function() {
		this.angleA = 0;
		this.count = 0;
		this.kax = 0;
		this.kay = 0;
		this.kbx = 0;
		this.kby = 0;
		this.kcx = 0;
		this.kcy = 0;
		this.ncx = 0;
		this.ncy = 0;
		this.ax = 0;
		this.ay = 0;
		this.bx = 0;
		this.by = 0;
		this.cx = 0;
		this.cy = 0;
		this.dx = null;
		this.dy = null;
		this.ex = null;
		this.ey = null;
		this.pointsClock.length = 0;
		this.pointsAnti.length = 0;
	}
	,endEdges: function() {
		var pC = this.pointsClock.length;
		var pA = this.pointsAnti.length;
		this.pointsClock[pC++] = this.penultimateCX;
		this.pointsClock[pC++] = this.penultimateCY;
		this.pointsClock[pC++] = this.lastClockX;
		this.pointsClock[pC++] = this.lastClockY;
		this.pointsAnti[pA++] = this.penultimateAX;
		this.pointsAnti[pA++] = this.penultimateAY;
		this.pointsAnti[pA++] = this.lastAntiX;
		this.pointsAnti[pA++] = this.lastAntiY;
	}
	,addQuads: function(clockWise,width_) {
		var currQuadIndex = this.pen.drawType.get_pos();
		var pC = 0;
		var pA = 0;
		if(clockWise && !this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this1 = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jxOld;
				this.pointsClock[pC++] = this.jyOld;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this2 = this.pen;
				var v1 = this.quadIndex + 1;
				_this2.drawType.set_pos(v1);
				_this2.colorType.set_pos(v1);
				var _this3 = this.pen;
				var color1 = -1;
				if(color1 == null) {
					color1 = -1;
				}
				if(color1 == -1) {
					color1 = _this3.currentColor;
				}
				_this3.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jxOld,this.jyOld,0);
				if(_this3.transformMatrix != null) {
					_this3.drawType.transform(_this3.transformMatrix);
				}
				_this3.drawType.next();
				_this3.colorType.cornerColors(color1,color1,color1);
			}
			var _this4 = this.pen;
			var v2 = this.quadIndex;
			_this4.drawType.set_pos(v2);
			_this4.colorType.set_pos(v2);
			var _this5 = this.pen;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = _this5.currentColor;
			}
			_this5.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jx,this.jy,0);
			if(_this5.transformMatrix != null) {
				_this5.drawType.transform(_this5.transformMatrix);
			}
			_this5.drawType.next();
			_this5.colorType.cornerColors(color2,color2,color2);
		}
		if(clockWise && this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				this.pointsAnti[pA++] = this.kbx;
				this.pointsAnti[pA++] = this.kby;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.kax;
				this.pointsClock[pC++] = this.kay;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this6 = this.pen;
				var v3 = this.quadIndex;
				_this6.drawType.set_pos(v3);
				_this6.colorType.set_pos(v3);
				var _this7 = this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this7.currentColor;
				}
				_this7.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jx,this.jy,0);
				if(_this7.transformMatrix != null) {
					_this7.drawType.transform(_this7.transformMatrix);
				}
				_this7.drawType.next();
				_this7.colorType.cornerColors(color3,color3,color3);
				var _this8 = this.pen;
				var v4 = this.quadIndex + 1;
				_this8.drawType.set_pos(v4);
				_this8.colorType.set_pos(v4);
				var _this9 = this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this9.currentColor;
				}
				_this9.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this9.transformMatrix != null) {
					_this9.drawType.transform(_this9.transformMatrix);
				}
				_this9.drawType.next();
				_this9.colorType.cornerColors(color4,color4,color4);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jxOld;
				this.pointsAnti[pA++] = this.jyOld;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this10 = this.pen;
				var v5 = this.quadIndex;
				_this10.drawType.set_pos(v5);
				_this10.colorType.set_pos(v5);
				var _this11 = this.pen;
				var color5 = -1;
				if(color5 == null) {
					color5 = -1;
				}
				if(color5 == -1) {
					color5 = _this11.currentColor;
				}
				_this11.drawType.triangle(this.jxOld,this.jyOld,0,this.kbx,this.kby,0,this.jx,this.jy,0);
				if(_this11.transformMatrix != null) {
					_this11.drawType.transform(_this11.transformMatrix);
				}
				_this11.drawType.next();
				_this11.colorType.cornerColors(color5,color5,color5);
				var _this12 = this.pen;
				var v6 = this.quadIndex + 1;
				_this12.drawType.set_pos(v6);
				_this12.colorType.set_pos(v6);
				var _this13 = this.pen;
				var color6 = -1;
				if(color6 == null) {
					color6 = -1;
				}
				if(color6 == -1) {
					color6 = _this13.currentColor;
				}
				_this13.drawType.triangle(this.jxOld,this.jyOld,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this13.transformMatrix != null) {
					_this13.drawType.transform(_this13.transformMatrix);
				}
				_this13.drawType.next();
				_this13.colorType.cornerColors(color6,color6,color6);
			}
		}
		if(!clockWise && !this.lastClock) {
			var _this14 = this.pen;
			var v7 = this.quadIndex;
			_this14.drawType.set_pos(v7);
			_this14.colorType.set_pos(v7);
			var _this15 = this.pen;
			var color7 = -1;
			if(color7 == null) {
				color7 = -1;
			}
			if(color7 == -1) {
				color7 = _this15.currentColor;
			}
			_this15.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
			if(_this15.transformMatrix != null) {
				_this15.drawType.transform(_this15.transformMatrix);
			}
			_this15.drawType.next();
			_this15.colorType.cornerColors(color7,color7,color7);
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				var _this16 = this.pen;
				var v8 = this.quadIndex + 1;
				_this16.drawType.set_pos(v8);
				_this16.colorType.set_pos(v8);
				var _this17 = this.pen;
				var color8 = -1;
				if(color8 == null) {
					color8 = -1;
				}
				if(color8 == -1) {
					color8 = _this17.currentColor;
				}
				_this17.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this17.transformMatrix != null) {
					_this17.drawType.transform(_this17.transformMatrix);
				}
				_this17.drawType.next();
				_this17.colorType.cornerColors(color8,color8,color8);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jxOld;
				this.pointsClock[pC++] = this.jyOld;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				var _this18 = this.pen;
				var v9 = this.quadIndex + 1;
				_this18.drawType.set_pos(v9);
				_this18.colorType.set_pos(v9);
				var _this19 = this.pen;
				var color9 = -1;
				if(color9 == null) {
					color9 = -1;
				}
				if(color9 == -1) {
					color9 = _this19.currentColor;
				}
				_this19.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.jxOld,this.jyOld,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color9,color9,color9);
			}
		}
		if(!clockWise && this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this20 = this.pen;
				var v10 = this.quadIndex;
				_this20.drawType.set_pos(v10);
				_this20.colorType.set_pos(v10);
				var _this21 = this.pen;
				var color10 = -1;
				if(color10 == null) {
					color10 = -1;
				}
				if(color10 == -1) {
					color10 = _this21.currentColor;
				}
				_this21.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
				if(_this21.transformMatrix != null) {
					_this21.drawType.transform(_this21.transformMatrix);
				}
				_this21.drawType.next();
				_this21.colorType.cornerColors(color10,color10,color10);
				var _this22 = this.pen;
				var v11 = this.quadIndex + 1;
				_this22.drawType.set_pos(v11);
				_this22.colorType.set_pos(v11);
				var _this23 = this.pen;
				var color11 = -1;
				if(color11 == null) {
					color11 = -1;
				}
				if(color11 == -1) {
					color11 = _this23.currentColor;
				}
				_this23.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this23.transformMatrix != null) {
					_this23.drawType.transform(_this23.transformMatrix);
				}
				_this23.drawType.next();
				_this23.colorType.cornerColors(color11,color11,color11);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jxOld;
				this.pointsAnti[pA++] = this.jyOld;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this24 = this.pen;
				var v12 = this.quadIndex;
				_this24.drawType.set_pos(v12);
				_this24.colorType.set_pos(v12);
				var _this25 = this.pen;
				var color12 = -1;
				if(color12 == null) {
					color12 = -1;
				}
				if(color12 == -1) {
					color12 = _this25.currentColor;
				}
				_this25.drawType.triangle(this.jxOld,this.jyOld,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
				if(_this25.transformMatrix != null) {
					_this25.drawType.transform(_this25.transformMatrix);
				}
				_this25.drawType.next();
				_this25.colorType.cornerColors(color12,color12,color12);
				var _this26 = this.pen;
				var v13 = this.quadIndex + 1;
				_this26.drawType.set_pos(v13);
				_this26.colorType.set_pos(v13);
				var _this27 = this.pen;
				var color13 = -1;
				if(color13 == null) {
					color13 = -1;
				}
				if(color13 == -1) {
					color13 = _this27.currentColor;
				}
				_this27.drawType.triangle(this.jxOld,this.jyOld,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this27.transformMatrix != null) {
					_this27.drawType.transform(_this27.transformMatrix);
				}
				_this27.drawType.next();
				_this27.colorType.cornerColors(color13,color13,color13);
			}
		}
		var _this28 = this.pen;
		_this28.drawType.set_pos(currQuadIndex);
		_this28.colorType.set_pos(currQuadIndex);
	}
};
var trilateral2_IndexRange = function(start,end) {
	this.start = start;
	this.end = end;
};
trilateral2_IndexRange.__name__ = true;
var trilateral2_Pen = function(drawType_,colorType_) {
	this.currentColor = 16435934;
	this.dz = 0.01;
	this.rounded = 30;
	this.drawType = drawType_;
	this.colorType = colorType_;
};
trilateral2_Pen.__name__ = true;
var trilateral2_RegularShape = function(x,y,radius,color) {
	this.x = x;
	this.y = y;
	this.radius = radius;
	this.color = color;
};
trilateral2_RegularShape.__name__ = true;
trilateral2_RegularShape.prototype = {
	clone: function() {
		return new trilateral2_RegularShape(this.x,this.y,this.radius,this.color);
	}
};
var trilateral2_Shaper = function() { };
trilateral2_Shaper.__name__ = true;
var trilateral2_Sketch = function(pen_,sketchForm_,endLine_) {
	if(endLine_ == null) {
		endLine_ = 0;
	}
	this.width = 0.01;
	this.y = 0.;
	this.x = 0.;
	this.contour = new trilateral2_Contour(pen_,endLine_);
	this.pen = pen_;
	this.endLine = endLine_;
	this.sketchForm = sketchForm_;
	switch(sketchForm_._hx_index) {
	case 0:
		this.line = $bind(this,this.tracerLine);
		break;
	case 1:
		this.line = $bind(this,this.baseLine);
		break;
	case 2:
		this.line = $bind(this,this.crudeLine);
		break;
	case 3:
		this.line = $bind(this,this.fillOnlyLine);
		break;
	case 4:
		this.line = $bind(this,this.fineLine);
		break;
	case 5:
		this.line = $bind(this,this.fineOverlapLine);
		break;
	case 6:
		this.line = $bind(this,this.mediumLine);
		break;
	case 7:
		this.line = $bind(this,this.mediumOverlapLine);
		break;
	case 8:
		this.line = $bind(this,this.roundEndLine);
		break;
	}
	this.points = [];
	this.pointsClock = [];
	this.pointsAnti = [];
	this.points[0] = [];
	this.dim = [];
};
trilateral2_Sketch.__name__ = true;
trilateral2_Sketch.prototype = {
	tracerLine: function(x_,y_) {
		haxe_Log.trace("lineTo( " + this.x + ", " + this.y + ", " + x_ + ", " + y_ + ", width )",{ fileName : "trilateral2/Sketch.hx", lineNumber : 27, className : "trilateral2.Sketch", methodName : "tracerLine"});
	}
	,fillOnlyLine: function(x_,y_) {
	}
	,baseLine: function(x_,y_) {
		haxe_Log.trace("lineTo( " + this.x + ", " + this.y + ", " + x_ + ", " + y_ + ", width )",{ fileName : "trilateral2/Sketch.hx", lineNumber : 27, className : "trilateral2.Sketch", methodName : "tracerLine"});
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
		var _this2 = _this.pen;
		var color1 = -1;
		if(color1 == null) {
			color1 = -1;
		}
		if(color1 == -1) {
			color1 = _this2.currentColor;
		}
		_this2.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this2.transformMatrix != null) {
			_this2.drawType.transform(_this2.transformMatrix);
		}
		_this2.drawType.next();
		_this2.colorType.cornerColors(color1,color1,color1);
	}
	,crudeLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
		var _this2 = _this.pen;
		var color1 = -1;
		if(color1 == null) {
			color1 = -1;
		}
		if(color1 == -1) {
			color1 = _this2.currentColor;
		}
		_this2.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this2.transformMatrix != null) {
			_this2.drawType.transform(_this2.transformMatrix);
		}
		_this2.drawType.next();
		_this2.colorType.cornerColors(color1,color1,color1);
	}
	,roundEndLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var endLineCurve = 3;
		if(endLineCurve == null) {
			endLineCurve = 0;
		}
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		switch(endLineCurve) {
		case 0:
			break;
		case 1:
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 + Math.PI;
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f1;
				if(gamma >= 0 && gamma > Math.PI) {
					f1 = gamma;
				} else {
					var a1 = gamma % (2 * Math.PI);
					f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
				}
				var this2 = f1;
				var zb = this2;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f2;
				if(beta >= 0 && beta > Math.PI) {
					f2 = beta;
				} else {
					var a2 = beta % (2 * Math.PI);
					f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
				}
				var this3 = f2;
				var za1 = this3;
				var f3;
				if(gamma >= 0 && gamma > Math.PI) {
					f3 = gamma;
				} else {
					var a3 = gamma % (2 * Math.PI);
					f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
				}
				var this4 = f3;
				var zb1 = this4;
				var fa1 = za1;
				var fb1 = zb1;
				var theta1 = Math.abs(fa1 - fb1);
				var clockwise1 = fa1 < fb1;
				var dif2 = clockwise1 ? theta1 : -theta1;
				dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
				break;
			case 2:
				var f4;
				if(beta >= 0 && beta > Math.PI) {
					f4 = beta;
				} else {
					var a4 = beta % (2 * Math.PI);
					f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
				}
				var this5 = f4;
				var za2 = this5;
				var f5;
				if(gamma >= 0 && gamma > Math.PI) {
					f5 = gamma;
				} else {
					var a5 = gamma % (2 * Math.PI);
					f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
				}
				var this6 = f5;
				var zb2 = this6;
				var fa2 = za2;
				var fb2 = zb2;
				var theta2 = Math.abs(fa2 - fb2);
				var smallest = theta2 <= Math.PI;
				var clockwise2 = fa2 < fb2;
				var dif3 = clockwise2 ? theta2 : -theta2;
				dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
				break;
			case 3:
				var f6;
				if(beta >= 0 && beta > Math.PI) {
					f6 = beta;
				} else {
					var a6 = beta % (2 * Math.PI);
					f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
				}
				var this7 = f6;
				var za3 = this7;
				var f7;
				if(gamma >= 0 && gamma > Math.PI) {
					f7 = gamma;
				} else {
					var a7 = gamma % (2 * Math.PI);
					f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
				}
				var this8 = f7;
				var zb3 = this8;
				var fa3 = za3;
				var fb3 = zb3;
				var theta3 = Math.abs(fa3 - fb3);
				var largest = theta3 > Math.PI;
				var clockwise3 = fa3 < fb3;
				var dif4 = clockwise3 ? theta3 : -theta3;
				dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step1 = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax_ + radius * Math.sin(angle);
				cy = ay_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = 0;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			break;
		case 2:
			var radius1 = width_ / 2;
			var beta1 = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 - Math.PI;
			var drawType1 = _this.pen.drawType;
			var sides1 = 36;
			if(sides1 == null) {
				sides1 = 36;
			}
			var pi1 = Math.PI;
			var step2 = pi1 * 2 / sides1;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f8;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f8 = beta1;
				} else {
					var a8 = beta1 % (2 * Math.PI);
					f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
				}
				var this9 = f8;
				var za4 = this9;
				var f9;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f9 = gamma1;
				} else {
					var a9 = gamma1 % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var zb4 = this10;
				var fa4 = za4;
				var fb4 = zb4;
				var theta4 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta4 : -theta4;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f10;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f10 = beta1;
				} else {
					var a10 = beta1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var za5 = this11;
				var f11;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f11 = gamma1;
				} else {
					var a11 = gamma1 % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var zb5 = this12;
				var fa5 = za5;
				var fb5 = zb5;
				var theta5 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta5 : -theta5;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f12;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f12 = beta1;
				} else {
					var a12 = beta1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var za6 = this13;
				var f13;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f13 = gamma1;
				} else {
					var a13 = gamma1 % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var zb6 = this14;
				var fa6 = za6;
				var fb6 = zb6;
				var theta6 = Math.abs(fa6 - fb6);
				var smallest1 = theta6 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta6 : -theta6;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
				break;
			case 3:
				var f14;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f14 = beta1;
				} else {
					var a14 = beta1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var za7 = this15;
				var f15;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f15 = gamma1;
				} else {
					var a15 = gamma1 % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var zb7 = this16;
				var fa7 = za7;
				var fb7 = zb7;
				var theta7 = Math.abs(fa7 - fb7);
				var largest1 = theta7 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta7 : -theta7;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			}
			var positive1 = dif5 >= 0;
			var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
			var step3 = dif5 / totalSteps1;
			var angle1 = beta1;
			var cx1;
			var cy1;
			var bx1 = 0;
			var by1 = 0;
			var _g2 = 0;
			var _g11 = totalSteps1 + 1;
			while(_g2 < _g11) {
				var i1 = _g2++;
				cx1 = x_ + radius1 * Math.sin(angle1);
				cy1 = y_ + radius1 * Math.cos(angle1);
				if(i1 != 0) {
					drawType1.triangle(x_,y_,0,bx1,by1,0,cx1,cy1,0);
					var m1 = trilateral2_Shaper.transformMatrix;
					if(m1 != null) {
						drawType1.transform(m1);
					}
					drawType1.next();
				}
				angle1 += step3;
				bx1 = cx1;
				by1 = cy1;
			}
			var len1 = totalSteps1;
			var _this2 = _this.pen;
			var color1 = 0;
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.colorType.colorTriangles(color1,len1);
			break;
		case 3:
			var radius2 = width_ / 2;
			var beta2 = -_this.angle1 - Math.PI / 2;
			var gamma2 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var drawType2 = _this.pen.drawType;
			var sides2 = 36;
			if(sides2 == null) {
				sides2 = 36;
			}
			var pi2 = Math.PI;
			var step4 = pi2 * 2 / sides2;
			var dif10;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f16;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f16 = beta2;
				} else {
					var a16 = beta2 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var za8 = this17;
				var f17;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f17 = gamma2;
				} else {
					var a17 = gamma2 % (2 * Math.PI);
					f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
				}
				var this18 = f17;
				var zb8 = this18;
				var fa8 = za8;
				var fb8 = zb8;
				var theta8 = Math.abs(fa8 - fb8);
				var clockwise8 = fa8 < fb8;
				var dif11 = clockwise8 ? theta8 : -theta8;
				dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
				break;
			case 1:
				var f18;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f18 = beta2;
				} else {
					var a18 = beta2 % (2 * Math.PI);
					f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
				}
				var this19 = f18;
				var za9 = this19;
				var f19;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f19 = gamma2;
				} else {
					var a19 = gamma2 % (2 * Math.PI);
					f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
				}
				var this20 = f19;
				var zb9 = this20;
				var fa9 = za9;
				var fb9 = zb9;
				var theta9 = Math.abs(fa9 - fb9);
				var clockwise9 = fa9 < fb9;
				var dif12 = clockwise9 ? theta9 : -theta9;
				dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
				break;
			case 2:
				var f20;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f20 = beta2;
				} else {
					var a20 = beta2 % (2 * Math.PI);
					f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
				}
				var this21 = f20;
				var za10 = this21;
				var f21;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f21 = gamma2;
				} else {
					var a21 = gamma2 % (2 * Math.PI);
					f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
				}
				var this22 = f21;
				var zb10 = this22;
				var fa10 = za10;
				var fb10 = zb10;
				var theta10 = Math.abs(fa10 - fb10);
				var smallest2 = theta10 <= Math.PI;
				var clockwise10 = fa10 < fb10;
				var dif13 = clockwise10 ? theta10 : -theta10;
				dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
				break;
			case 3:
				var f22;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f22 = beta2;
				} else {
					var a22 = beta2 % (2 * Math.PI);
					f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
				}
				var this23 = f22;
				var za11 = this23;
				var f23;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f23 = gamma2;
				} else {
					var a23 = gamma2 % (2 * Math.PI);
					f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
				}
				var this24 = f23;
				var zb11 = this24;
				var fa11 = za11;
				var fb11 = zb11;
				var theta11 = Math.abs(fa11 - fb11);
				var largest2 = theta11 > Math.PI;
				var clockwise11 = fa11 < fb11;
				var dif14 = clockwise11 ? theta11 : -theta11;
				dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
				break;
			}
			var positive2 = dif10 >= 0;
			var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
			var step5 = dif10 / totalSteps2;
			var angle2 = beta2;
			var cx2;
			var cy2;
			var bx2 = 0;
			var by2 = 0;
			var _g3 = 0;
			var _g12 = totalSteps2 + 1;
			while(_g3 < _g12) {
				var i2 = _g3++;
				cx2 = ax_ + radius2 * Math.sin(angle2);
				cy2 = ay_ + radius2 * Math.cos(angle2);
				if(i2 != 0) {
					drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
					var m2 = trilateral2_Shaper.transformMatrix;
					if(m2 != null) {
						drawType2.transform(m2);
					}
					drawType2.next();
				}
				angle2 += step5;
				bx2 = cx2;
				by2 = cy2;
			}
			var len2 = totalSteps2;
			var _this3 = _this.pen;
			var color2 = 0;
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.colorType.colorTriangles(color2,len2);
			var radius3 = width_ / 2;
			var beta3 = -_this.angle1 - Math.PI / 2;
			var gamma3 = -_this.angle1 - Math.PI / 2 - Math.PI;
			var drawType3 = _this.pen.drawType;
			var sides3 = 36;
			if(sides3 == null) {
				sides3 = 36;
			}
			var pi3 = Math.PI;
			var step6 = pi3 * 2 / sides3;
			var dif15;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f24;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f24 = beta3;
				} else {
					var a24 = beta3 % (2 * Math.PI);
					f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
				}
				var this25 = f24;
				var za12 = this25;
				var f25;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f25 = gamma3;
				} else {
					var a25 = gamma3 % (2 * Math.PI);
					f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
				}
				var this26 = f25;
				var zb12 = this26;
				var fa12 = za12;
				var fb12 = zb12;
				var theta12 = Math.abs(fa12 - fb12);
				var clockwise12 = fa12 < fb12;
				var dif16 = clockwise12 ? theta12 : -theta12;
				dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
				break;
			case 1:
				var f26;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f26 = beta3;
				} else {
					var a26 = beta3 % (2 * Math.PI);
					f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
				}
				var this27 = f26;
				var za13 = this27;
				var f27;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f27 = gamma3;
				} else {
					var a27 = gamma3 % (2 * Math.PI);
					f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
				}
				var this28 = f27;
				var zb13 = this28;
				var fa13 = za13;
				var fb13 = zb13;
				var theta13 = Math.abs(fa13 - fb13);
				var clockwise13 = fa13 < fb13;
				var dif17 = clockwise13 ? theta13 : -theta13;
				dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
				break;
			case 2:
				var f28;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f28 = beta3;
				} else {
					var a28 = beta3 % (2 * Math.PI);
					f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
				}
				var this29 = f28;
				var za14 = this29;
				var f29;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f29 = gamma3;
				} else {
					var a29 = gamma3 % (2 * Math.PI);
					f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
				}
				var this30 = f29;
				var zb14 = this30;
				var fa14 = za14;
				var fb14 = zb14;
				var theta14 = Math.abs(fa14 - fb14);
				var smallest3 = theta14 <= Math.PI;
				var clockwise14 = fa14 < fb14;
				var dif18 = clockwise14 ? theta14 : -theta14;
				dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
				break;
			case 3:
				var f30;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f30 = beta3;
				} else {
					var a30 = beta3 % (2 * Math.PI);
					f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
				}
				var this31 = f30;
				var za15 = this31;
				var f31;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f31 = gamma3;
				} else {
					var a31 = gamma3 % (2 * Math.PI);
					f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
				}
				var this32 = f31;
				var zb15 = this32;
				var fa15 = za15;
				var fb15 = zb15;
				var theta15 = Math.abs(fa15 - fb15);
				var largest3 = theta15 > Math.PI;
				var clockwise15 = fa15 < fb15;
				var dif19 = clockwise15 ? theta15 : -theta15;
				dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
				break;
			}
			var positive3 = dif15 >= 0;
			var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
			var step7 = dif15 / totalSteps3;
			var angle3 = beta3;
			var cx3;
			var cy3;
			var bx3 = 0;
			var by3 = 0;
			var _g4 = 0;
			var _g13 = totalSteps3 + 1;
			while(_g4 < _g13) {
				var i3 = _g4++;
				cx3 = x_ + radius3 * Math.sin(angle3);
				cy3 = y_ + radius3 * Math.cos(angle3);
				if(i3 != 0) {
					drawType3.triangle(x_,y_,0,bx3,by3,0,cx3,cy3,0);
					var m3 = trilateral2_Shaper.transformMatrix;
					if(m3 != null) {
						drawType3.transform(m3);
					}
					drawType3.next();
				}
				angle3 += step7;
				bx3 = cx3;
				by3 = cy3;
			}
			var len3 = totalSteps3;
			var _this4 = _this.pen;
			var color3 = 0;
			if(color3 == -1) {
				color3 = _this4.currentColor;
			}
			_this4.colorType.colorTriangles(color3,len3);
			break;
		}
		var _this5 = _this.pen;
		var color4 = -1;
		if(color4 == null) {
			color4 = -1;
		}
		if(color4 == -1) {
			color4 = _this5.currentColor;
		}
		_this5.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this5.transformMatrix != null) {
			_this5.drawType.transform(_this5.transformMatrix);
		}
		_this5.drawType.next();
		_this5.colorType.cornerColors(color4,color4,color4);
		var _this6 = _this.pen;
		var color5 = -1;
		if(color5 == null) {
			color5 = -1;
		}
		if(color5 == -1) {
			color5 = _this6.currentColor;
		}
		_this6.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this6.transformMatrix != null) {
			_this6.drawType.transform(_this6.transformMatrix);
		}
		_this6.drawType.next();
		_this6.colorType.cornerColors(color5,color5,color5);
	}
	,mediumLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = false;
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(_this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(_this.count != 0) {
			_this.addQuads(clockWise,width_);
		}
		_this.quadIndex = _this.pen.drawType.get_pos();
		if(_this.count == 0) {
			_this.penultimateAX = _this.dxPrev;
			_this.penultimateAY = _this.dyPrev;
			_this.lastAntiX = _this.ex;
			_this.lastAntiY = _this.ey;
			_this.penultimateCX = _this.dx;
			_this.penultimateCY = _this.dy;
			_this.lastClockX = _this.exPrev;
			_this.lastClockY = _this.eyPrev;
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == null) {
				color1 = -1;
			}
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(clockWise && !_this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			}
			if(clockWise && _this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this6 = _this.pen;
				var color5 = -1;
				if(color5 == null) {
					color5 = -1;
				}
				if(color5 == -1) {
					color5 = _this6.currentColor;
				}
				_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this6.transformMatrix != null) {
					_this6.drawType.transform(_this6.transformMatrix);
				}
				_this6.drawType.next();
				_this6.colorType.cornerColors(color5,color5,color5);
				var _this7 = _this.pen;
				var color6 = -1;
				if(color6 == null) {
					color6 = -1;
				}
				if(color6 == -1) {
					color6 = _this7.currentColor;
				}
				_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this7.transformMatrix != null) {
					_this7.drawType.transform(_this7.transformMatrix);
				}
				_this7.drawType.next();
				_this7.colorType.cornerColors(color6,color6,color6);
			}
			if(!clockWise && !_this.lastClock) {
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.jx;
				_this.lastClockY = _this.jy;
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				var _this8 = _this.pen;
				var color7 = -1;
				if(color7 == null) {
					color7 = -1;
				}
				if(color7 == -1) {
					color7 = _this8.currentColor;
				}
				_this8.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
				if(_this8.transformMatrix != null) {
					_this8.drawType.transform(_this8.transformMatrix);
				}
				_this8.drawType.next();
				_this8.colorType.cornerColors(color7,color7,color7);
				var _this9 = _this.pen;
				var color8 = -1;
				if(color8 == null) {
					color8 = -1;
				}
				if(color8 == -1) {
					color8 = _this9.currentColor;
				}
				_this9.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this9.transformMatrix != null) {
					_this9.drawType.transform(_this9.transformMatrix);
				}
				_this9.drawType.next();
				_this9.colorType.cornerColors(color8,color8,color8);
			}
			if(!clockWise && _this.lastClock) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.jx;
				_this.penultimateCY = _this.jy;
				_this.lastClockX = _this.dx;
				_this.lastClockY = _this.dy;
				var _this10 = _this.pen;
				var color9 = -1;
				if(color9 == null) {
					color9 = -1;
				}
				if(color9 == -1) {
					color9 = _this10.currentColor;
				}
				_this10.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this10.transformMatrix != null) {
					_this10.drawType.transform(_this10.transformMatrix);
				}
				_this10.drawType.next();
				_this10.colorType.cornerColors(color9,color9,color9);
				var _this11 = _this.pen;
				var color10 = -1;
				if(color10 == null) {
					color10 = -1;
				}
				if(color10 == -1) {
					color10 = _this11.currentColor;
				}
				_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
				if(_this11.transformMatrix != null) {
					_this11.drawType.transform(_this11.transformMatrix);
				}
				_this11.drawType.next();
				_this11.colorType.cornerColors(color10,color10,color10);
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this12 = _this.pen;
				var color11 = -1;
				if(color11 == -1) {
					color11 = _this12.currentColor;
				}
				_this12.colorType.colorTriangles(color11,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this13 = _this.pen;
				var color12 = -1;
				if(color12 == -1) {
					color12 = _this13.currentColor;
				}
				_this13.colorType.colorTriangles(color12,len3);
			}
		} else if(_this.count != 0) {
			if(clockWise) {
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == null) {
					color13 = -1;
				}
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this14.transformMatrix != null) {
					_this14.drawType.transform(_this14.transformMatrix);
				}
				_this14.drawType.next();
				_this14.colorType.cornerColors(color13,color13,color13);
			} else {
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == null) {
					color14 = -1;
				}
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this15.transformMatrix != null) {
					_this15.drawType.transform(_this15.transformMatrix);
				}
				_this15.drawType.next();
				_this15.colorType.cornerColors(color14,color14,color14);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && _this.count != 0) {
			if(clockWise) {
				var _this16 = _this.pen;
				var color15 = -1;
				if(color15 == null) {
					color15 = -1;
				}
				if(color15 == -1) {
					color15 = _this16.currentColor;
				}
				_this16.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this16.transformMatrix != null) {
					_this16.drawType.transform(_this16.transformMatrix);
				}
				_this16.drawType.next();
				_this16.colorType.cornerColors(color15,color15,color15);
				var _this17 = _this.pen;
				var color16 = -1;
				if(color16 == null) {
					color16 = -1;
				}
				if(color16 == -1) {
					color16 = _this17.currentColor;
				}
				_this17.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this17.transformMatrix != null) {
					_this17.drawType.transform(_this17.transformMatrix);
				}
				_this17.drawType.next();
				_this17.colorType.cornerColors(color16,color16,color16);
			} else {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,mediumOverlapLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = false;
		var overlap = true;
		if(overlap == null) {
			overlap = false;
		}
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(!overlap && _this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(overlap) {
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(_this.count != 0) {
				_this.addQuads(clockWise,width_);
			}
			_this.quadIndex = _this.pen.drawType.get_pos();
			if(_this.count == 0) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			} else {
				if(clockWise && !_this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this6 = _this.pen;
					var color5 = -1;
					if(color5 == null) {
						color5 = -1;
					}
					if(color5 == -1) {
						color5 = _this6.currentColor;
					}
					_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this6.transformMatrix != null) {
						_this6.drawType.transform(_this6.transformMatrix);
					}
					_this6.drawType.next();
					_this6.colorType.cornerColors(color5,color5,color5);
					var _this7 = _this.pen;
					var color6 = -1;
					if(color6 == null) {
						color6 = -1;
					}
					if(color6 == -1) {
						color6 = _this7.currentColor;
					}
					_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this7.transformMatrix != null) {
						_this7.drawType.transform(_this7.transformMatrix);
					}
					_this7.drawType.next();
					_this7.colorType.cornerColors(color6,color6,color6);
				}
				if(clockWise && _this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this8 = _this.pen;
					var color7 = -1;
					if(color7 == null) {
						color7 = -1;
					}
					if(color7 == -1) {
						color7 = _this8.currentColor;
					}
					_this8.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this8.transformMatrix != null) {
						_this8.drawType.transform(_this8.transformMatrix);
					}
					_this8.drawType.next();
					_this8.colorType.cornerColors(color7,color7,color7);
					var _this9 = _this.pen;
					var color8 = -1;
					if(color8 == null) {
						color8 = -1;
					}
					if(color8 == -1) {
						color8 = _this9.currentColor;
					}
					_this9.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this9.transformMatrix != null) {
						_this9.drawType.transform(_this9.transformMatrix);
					}
					_this9.drawType.next();
					_this9.colorType.cornerColors(color8,color8,color8);
				}
				if(!clockWise && !_this.lastClock) {
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.jx;
					_this.lastClockY = _this.jy;
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					var _this10 = _this.pen;
					var color9 = -1;
					if(color9 == null) {
						color9 = -1;
					}
					if(color9 == -1) {
						color9 = _this10.currentColor;
					}
					_this10.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
					if(_this10.transformMatrix != null) {
						_this10.drawType.transform(_this10.transformMatrix);
					}
					_this10.drawType.next();
					_this10.colorType.cornerColors(color9,color9,color9);
					var _this11 = _this.pen;
					var color10 = -1;
					if(color10 == null) {
						color10 = -1;
					}
					if(color10 == -1) {
						color10 = _this11.currentColor;
					}
					_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this11.transformMatrix != null) {
						_this11.drawType.transform(_this11.transformMatrix);
					}
					_this11.drawType.next();
					_this11.colorType.cornerColors(color10,color10,color10);
				}
				if(!clockWise && _this.lastClock) {
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.jx;
					_this.penultimateCY = _this.jy;
					_this.lastClockX = _this.dx;
					_this.lastClockY = _this.dy;
					var _this12 = _this.pen;
					var color11 = -1;
					if(color11 == null) {
						color11 = -1;
					}
					if(color11 == -1) {
						color11 = _this12.currentColor;
					}
					_this12.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this12.transformMatrix != null) {
						_this12.drawType.transform(_this12.transformMatrix);
					}
					_this12.drawType.next();
					_this12.colorType.cornerColors(color11,color11,color11);
					var _this13 = _this.pen;
					var color12 = -1;
					if(color12 == null) {
						color12 = -1;
					}
					if(color12 == -1) {
						color12 = _this13.currentColor;
					}
					_this13.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
					if(_this13.transformMatrix != null) {
						_this13.drawType.transform(_this13.transformMatrix);
					}
					_this13.drawType.next();
					_this13.colorType.cornerColors(color12,color12,color12);
				}
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.colorType.colorTriangles(color13,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.colorType.colorTriangles(color14,len3);
			}
		} else if(_this.count != 0) {
			if(overlap) {
				if(clockWise) {
					var _this16 = _this.pen;
					var color15 = -1;
					if(color15 == null) {
						color15 = -1;
					}
					if(color15 == -1) {
						color15 = _this16.currentColor;
					}
					_this16.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.ax,_this.ay,0);
					if(_this16.transformMatrix != null) {
						_this16.drawType.transform(_this16.transformMatrix);
					}
					_this16.drawType.next();
					_this16.colorType.cornerColors(color15,color15,color15);
				} else {
					var _this17 = _this.pen;
					var color16 = -1;
					if(color16 == null) {
						color16 = -1;
					}
					if(color16 == -1) {
						color16 = _this17.currentColor;
					}
					_this17.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.ax,_this.ay,0);
					if(_this17.transformMatrix != null) {
						_this17.drawType.transform(_this17.transformMatrix);
					}
					_this17.drawType.next();
					_this17.colorType.cornerColors(color16,color16,color16);
				}
			} else if(clockWise) {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
			} else {
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && !overlap && _this.count != 0) {
			if(clockWise) {
				var _this20 = _this.pen;
				var color19 = -1;
				if(color19 == null) {
					color19 = -1;
				}
				if(color19 == -1) {
					color19 = _this20.currentColor;
				}
				_this20.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this20.transformMatrix != null) {
					_this20.drawType.transform(_this20.transformMatrix);
				}
				_this20.drawType.next();
				_this20.colorType.cornerColors(color19,color19,color19);
				var _this21 = _this.pen;
				var color20 = -1;
				if(color20 == null) {
					color20 = -1;
				}
				if(color20 == -1) {
					color20 = _this21.currentColor;
				}
				_this21.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this21.transformMatrix != null) {
					_this21.drawType.transform(_this21.transformMatrix);
				}
				_this21.drawType.next();
				_this21.colorType.cornerColors(color20,color20,color20);
			} else {
				var _this22 = _this.pen;
				var color21 = -1;
				if(color21 == null) {
					color21 = -1;
				}
				if(color21 == -1) {
					color21 = _this22.currentColor;
				}
				_this22.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this22.transformMatrix != null) {
					_this22.drawType.transform(_this22.transformMatrix);
				}
				_this22.drawType.next();
				_this22.colorType.cornerColors(color21,color21,color21);
				var _this23 = _this.pen;
				var color22 = -1;
				if(color22 == null) {
					color22 = -1;
				}
				if(color22 == -1) {
					color22 = _this23.currentColor;
				}
				_this23.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this23.transformMatrix != null) {
					_this23.drawType.transform(_this23.transformMatrix);
				}
				_this23.drawType.next();
				_this23.colorType.cornerColors(color22,color22,color22);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,fineLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = true;
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(_this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(_this.count != 0) {
			_this.addQuads(clockWise,width_);
		}
		_this.quadIndex = _this.pen.drawType.get_pos();
		if(_this.count == 0) {
			_this.penultimateAX = _this.dxPrev;
			_this.penultimateAY = _this.dyPrev;
			_this.lastAntiX = _this.ex;
			_this.lastAntiY = _this.ey;
			_this.penultimateCX = _this.dx;
			_this.penultimateCY = _this.dy;
			_this.lastClockX = _this.exPrev;
			_this.lastClockY = _this.eyPrev;
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == null) {
				color1 = -1;
			}
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(clockWise && !_this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			}
			if(clockWise && _this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this6 = _this.pen;
				var color5 = -1;
				if(color5 == null) {
					color5 = -1;
				}
				if(color5 == -1) {
					color5 = _this6.currentColor;
				}
				_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this6.transformMatrix != null) {
					_this6.drawType.transform(_this6.transformMatrix);
				}
				_this6.drawType.next();
				_this6.colorType.cornerColors(color5,color5,color5);
				var _this7 = _this.pen;
				var color6 = -1;
				if(color6 == null) {
					color6 = -1;
				}
				if(color6 == -1) {
					color6 = _this7.currentColor;
				}
				_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this7.transformMatrix != null) {
					_this7.drawType.transform(_this7.transformMatrix);
				}
				_this7.drawType.next();
				_this7.colorType.cornerColors(color6,color6,color6);
			}
			if(!clockWise && !_this.lastClock) {
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.jx;
				_this.lastClockY = _this.jy;
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				var _this8 = _this.pen;
				var color7 = -1;
				if(color7 == null) {
					color7 = -1;
				}
				if(color7 == -1) {
					color7 = _this8.currentColor;
				}
				_this8.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
				if(_this8.transformMatrix != null) {
					_this8.drawType.transform(_this8.transformMatrix);
				}
				_this8.drawType.next();
				_this8.colorType.cornerColors(color7,color7,color7);
				var _this9 = _this.pen;
				var color8 = -1;
				if(color8 == null) {
					color8 = -1;
				}
				if(color8 == -1) {
					color8 = _this9.currentColor;
				}
				_this9.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this9.transformMatrix != null) {
					_this9.drawType.transform(_this9.transformMatrix);
				}
				_this9.drawType.next();
				_this9.colorType.cornerColors(color8,color8,color8);
			}
			if(!clockWise && _this.lastClock) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.jx;
				_this.penultimateCY = _this.jy;
				_this.lastClockX = _this.dx;
				_this.lastClockY = _this.dy;
				var _this10 = _this.pen;
				var color9 = -1;
				if(color9 == null) {
					color9 = -1;
				}
				if(color9 == -1) {
					color9 = _this10.currentColor;
				}
				_this10.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this10.transformMatrix != null) {
					_this10.drawType.transform(_this10.transformMatrix);
				}
				_this10.drawType.next();
				_this10.colorType.cornerColors(color9,color9,color9);
				var _this11 = _this.pen;
				var color10 = -1;
				if(color10 == null) {
					color10 = -1;
				}
				if(color10 == -1) {
					color10 = _this11.currentColor;
				}
				_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
				if(_this11.transformMatrix != null) {
					_this11.drawType.transform(_this11.transformMatrix);
				}
				_this11.drawType.next();
				_this11.colorType.cornerColors(color10,color10,color10);
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this12 = _this.pen;
				var color11 = -1;
				if(color11 == -1) {
					color11 = _this12.currentColor;
				}
				_this12.colorType.colorTriangles(color11,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this13 = _this.pen;
				var color12 = -1;
				if(color12 == -1) {
					color12 = _this13.currentColor;
				}
				_this13.colorType.colorTriangles(color12,len3);
			}
		} else if(_this.count != 0) {
			if(clockWise) {
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == null) {
					color13 = -1;
				}
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this14.transformMatrix != null) {
					_this14.drawType.transform(_this14.transformMatrix);
				}
				_this14.drawType.next();
				_this14.colorType.cornerColors(color13,color13,color13);
			} else {
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == null) {
					color14 = -1;
				}
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this15.transformMatrix != null) {
					_this15.drawType.transform(_this15.transformMatrix);
				}
				_this15.drawType.next();
				_this15.colorType.cornerColors(color14,color14,color14);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && _this.count != 0) {
			if(clockWise) {
				var _this16 = _this.pen;
				var color15 = -1;
				if(color15 == null) {
					color15 = -1;
				}
				if(color15 == -1) {
					color15 = _this16.currentColor;
				}
				_this16.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this16.transformMatrix != null) {
					_this16.drawType.transform(_this16.transformMatrix);
				}
				_this16.drawType.next();
				_this16.colorType.cornerColors(color15,color15,color15);
				var _this17 = _this.pen;
				var color16 = -1;
				if(color16 == null) {
					color16 = -1;
				}
				if(color16 == -1) {
					color16 = _this17.currentColor;
				}
				_this17.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this17.transformMatrix != null) {
					_this17.drawType.transform(_this17.transformMatrix);
				}
				_this17.drawType.next();
				_this17.colorType.cornerColors(color16,color16,color16);
			} else {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,fineOverlapLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = true;
		var overlap = true;
		if(overlap == null) {
			overlap = false;
		}
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(!overlap && _this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(overlap) {
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(_this.count != 0) {
				_this.addQuads(clockWise,width_);
			}
			_this.quadIndex = _this.pen.drawType.get_pos();
			if(_this.count == 0) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			} else {
				if(clockWise && !_this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this6 = _this.pen;
					var color5 = -1;
					if(color5 == null) {
						color5 = -1;
					}
					if(color5 == -1) {
						color5 = _this6.currentColor;
					}
					_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this6.transformMatrix != null) {
						_this6.drawType.transform(_this6.transformMatrix);
					}
					_this6.drawType.next();
					_this6.colorType.cornerColors(color5,color5,color5);
					var _this7 = _this.pen;
					var color6 = -1;
					if(color6 == null) {
						color6 = -1;
					}
					if(color6 == -1) {
						color6 = _this7.currentColor;
					}
					_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this7.transformMatrix != null) {
						_this7.drawType.transform(_this7.transformMatrix);
					}
					_this7.drawType.next();
					_this7.colorType.cornerColors(color6,color6,color6);
				}
				if(clockWise && _this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this8 = _this.pen;
					var color7 = -1;
					if(color7 == null) {
						color7 = -1;
					}
					if(color7 == -1) {
						color7 = _this8.currentColor;
					}
					_this8.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this8.transformMatrix != null) {
						_this8.drawType.transform(_this8.transformMatrix);
					}
					_this8.drawType.next();
					_this8.colorType.cornerColors(color7,color7,color7);
					var _this9 = _this.pen;
					var color8 = -1;
					if(color8 == null) {
						color8 = -1;
					}
					if(color8 == -1) {
						color8 = _this9.currentColor;
					}
					_this9.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this9.transformMatrix != null) {
						_this9.drawType.transform(_this9.transformMatrix);
					}
					_this9.drawType.next();
					_this9.colorType.cornerColors(color8,color8,color8);
				}
				if(!clockWise && !_this.lastClock) {
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.jx;
					_this.lastClockY = _this.jy;
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					var _this10 = _this.pen;
					var color9 = -1;
					if(color9 == null) {
						color9 = -1;
					}
					if(color9 == -1) {
						color9 = _this10.currentColor;
					}
					_this10.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
					if(_this10.transformMatrix != null) {
						_this10.drawType.transform(_this10.transformMatrix);
					}
					_this10.drawType.next();
					_this10.colorType.cornerColors(color9,color9,color9);
					var _this11 = _this.pen;
					var color10 = -1;
					if(color10 == null) {
						color10 = -1;
					}
					if(color10 == -1) {
						color10 = _this11.currentColor;
					}
					_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this11.transformMatrix != null) {
						_this11.drawType.transform(_this11.transformMatrix);
					}
					_this11.drawType.next();
					_this11.colorType.cornerColors(color10,color10,color10);
				}
				if(!clockWise && _this.lastClock) {
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.jx;
					_this.penultimateCY = _this.jy;
					_this.lastClockX = _this.dx;
					_this.lastClockY = _this.dy;
					var _this12 = _this.pen;
					var color11 = -1;
					if(color11 == null) {
						color11 = -1;
					}
					if(color11 == -1) {
						color11 = _this12.currentColor;
					}
					_this12.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this12.transformMatrix != null) {
						_this12.drawType.transform(_this12.transformMatrix);
					}
					_this12.drawType.next();
					_this12.colorType.cornerColors(color11,color11,color11);
					var _this13 = _this.pen;
					var color12 = -1;
					if(color12 == null) {
						color12 = -1;
					}
					if(color12 == -1) {
						color12 = _this13.currentColor;
					}
					_this13.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
					if(_this13.transformMatrix != null) {
						_this13.drawType.transform(_this13.transformMatrix);
					}
					_this13.drawType.next();
					_this13.colorType.cornerColors(color12,color12,color12);
				}
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.colorType.colorTriangles(color13,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.colorType.colorTriangles(color14,len3);
			}
		} else if(_this.count != 0) {
			if(overlap) {
				if(clockWise) {
					var _this16 = _this.pen;
					var color15 = -1;
					if(color15 == null) {
						color15 = -1;
					}
					if(color15 == -1) {
						color15 = _this16.currentColor;
					}
					_this16.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.ax,_this.ay,0);
					if(_this16.transformMatrix != null) {
						_this16.drawType.transform(_this16.transformMatrix);
					}
					_this16.drawType.next();
					_this16.colorType.cornerColors(color15,color15,color15);
				} else {
					var _this17 = _this.pen;
					var color16 = -1;
					if(color16 == null) {
						color16 = -1;
					}
					if(color16 == -1) {
						color16 = _this17.currentColor;
					}
					_this17.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.ax,_this.ay,0);
					if(_this17.transformMatrix != null) {
						_this17.drawType.transform(_this17.transformMatrix);
					}
					_this17.drawType.next();
					_this17.colorType.cornerColors(color16,color16,color16);
				}
			} else if(clockWise) {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
			} else {
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && !overlap && _this.count != 0) {
			if(clockWise) {
				var _this20 = _this.pen;
				var color19 = -1;
				if(color19 == null) {
					color19 = -1;
				}
				if(color19 == -1) {
					color19 = _this20.currentColor;
				}
				_this20.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this20.transformMatrix != null) {
					_this20.drawType.transform(_this20.transformMatrix);
				}
				_this20.drawType.next();
				_this20.colorType.cornerColors(color19,color19,color19);
				var _this21 = _this.pen;
				var color20 = -1;
				if(color20 == null) {
					color20 = -1;
				}
				if(color20 == -1) {
					color20 = _this21.currentColor;
				}
				_this21.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this21.transformMatrix != null) {
					_this21.drawType.transform(_this21.transformMatrix);
				}
				_this21.drawType.next();
				_this21.colorType.cornerColors(color20,color20,color20);
			} else {
				var _this22 = _this.pen;
				var color21 = -1;
				if(color21 == null) {
					color21 = -1;
				}
				if(color21 == -1) {
					color21 = _this22.currentColor;
				}
				_this22.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this22.transformMatrix != null) {
					_this22.drawType.transform(_this22.transformMatrix);
				}
				_this22.drawType.next();
				_this22.colorType.cornerColors(color21,color21,color21);
				var _this23 = _this.pen;
				var color22 = -1;
				if(color22 == null) {
					color22 = -1;
				}
				if(color22 == -1) {
					color22 = _this23.currentColor;
				}
				_this23.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this23.transformMatrix != null) {
					_this23.drawType.transform(_this23.transformMatrix);
				}
				_this23.drawType.next();
				_this23.colorType.cornerColors(color22,color22,color22);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,moveTo: function(x_,y_) {
		if(this.endLine == 2 || this.endLine == 3) {
			var _this = this.contour;
			var width_ = this.width;
			_this.endEdges();
			if(_this.count != 0) {
				var ax = _this.bx;
				var ay = _this.by;
				var radius = width_ / 2;
				var beta = -_this.angle1 - Math.PI / 2;
				var gamma = -_this.angle1 - Math.PI / 2 - Math.PI;
				var temp = [];
				var drawType = _this.pen.drawType;
				var sides = 36;
				if(sides == null) {
					sides = 36;
				}
				var pi = Math.PI;
				var step = pi * 2 / sides;
				var dif;
				switch(fracs_DifferencePreference.SMALL._hx_index) {
				case 0:
					var f;
					if(beta >= 0 && beta > Math.PI) {
						f = beta;
					} else {
						var a = beta % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var za = this1;
					var f1;
					if(gamma >= 0 && gamma > Math.PI) {
						f1 = gamma;
					} else {
						var a1 = gamma % (2 * Math.PI);
						f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
					}
					var this2 = f1;
					var zb = this2;
					var fa = za;
					var fb = zb;
					var theta = Math.abs(fa - fb);
					var clockwise = fa < fb;
					var dif1 = clockwise ? theta : -theta;
					dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
					break;
				case 1:
					var f2;
					if(beta >= 0 && beta > Math.PI) {
						f2 = beta;
					} else {
						var a2 = beta % (2 * Math.PI);
						f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
					}
					var this3 = f2;
					var za1 = this3;
					var f3;
					if(gamma >= 0 && gamma > Math.PI) {
						f3 = gamma;
					} else {
						var a3 = gamma % (2 * Math.PI);
						f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
					}
					var this4 = f3;
					var zb1 = this4;
					var fa1 = za1;
					var fb1 = zb1;
					var theta1 = Math.abs(fa1 - fb1);
					var clockwise1 = fa1 < fb1;
					var dif2 = clockwise1 ? theta1 : -theta1;
					dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
					break;
				case 2:
					var f4;
					if(beta >= 0 && beta > Math.PI) {
						f4 = beta;
					} else {
						var a4 = beta % (2 * Math.PI);
						f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
					}
					var this5 = f4;
					var za2 = this5;
					var f5;
					if(gamma >= 0 && gamma > Math.PI) {
						f5 = gamma;
					} else {
						var a5 = gamma % (2 * Math.PI);
						f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
					}
					var this6 = f5;
					var zb2 = this6;
					var fa2 = za2;
					var fb2 = zb2;
					var theta2 = Math.abs(fa2 - fb2);
					var smallest = theta2 <= Math.PI;
					var clockwise2 = fa2 < fb2;
					var dif3 = clockwise2 ? theta2 : -theta2;
					dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
					break;
				case 3:
					var f6;
					if(beta >= 0 && beta > Math.PI) {
						f6 = beta;
					} else {
						var a6 = beta % (2 * Math.PI);
						f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
					}
					var this7 = f6;
					var za3 = this7;
					var f7;
					if(gamma >= 0 && gamma > Math.PI) {
						f7 = gamma;
					} else {
						var a7 = gamma % (2 * Math.PI);
						f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
					}
					var this8 = f7;
					var zb3 = this8;
					var fa3 = za3;
					var fb3 = zb3;
					var theta3 = Math.abs(fa3 - fb3);
					var largest = theta3 > Math.PI;
					var clockwise3 = fa3 < fb3;
					var dif4 = clockwise3 ? theta3 : -theta3;
					dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
					break;
				}
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step1 = dif / totalSteps;
				var angle = beta;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = temp.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax + radius * Math.sin(angle);
					cy = ay + radius * Math.cos(angle);
					temp[p2++] = cx;
					temp[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step1;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = 0;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
				var pA = _this.pointsAnti.length;
				var len1 = temp.length / 2 | 0;
				var _g2 = 0;
				var _g11 = len1 + 2;
				while(_g2 < _g11) {
					var i1 = _g2++;
					_this.pointsAnti[pA++] = temp[i1];
				}
				var pC = _this.pointsClock.length;
				var _g21 = 1;
				var _g3 = len1 / 2 + 1 | 0;
				while(_g21 < _g3) {
					var i2 = _g21++;
					_this.pointsClock[pC++] = temp[temp.length - 2 * i2];
					_this.pointsClock[pC++] = temp[temp.length - 2 * i2 - 1];
				}
			}
		}
		this.x = x_;
		this.y = y_;
		var l = this.points.length;
		this.points[l] = [];
		this.points[l][0] = x_;
		this.points[l][1] = y_;
		this.pointsClock[this.pointsClock.length] = this.contour.pointsClock.slice();
		this.pointsAnti[this.pointsAnti.length] = this.contour.pointsAnti.slice();
		this.dim[this.dim.length] = { minX : Infinity, maxX : -Infinity, minY : Infinity, maxY : -Infinity};
		var d = this.dim[this.dim.length - 1];
		if(x_ < d.minX) {
			d.minX = x_;
		}
		if(x_ > d.maxX) {
			d.maxX = x_;
		}
		if(y_ < d.minY) {
			d.minY = y_;
		}
		if(y_ > d.maxY) {
			d.maxY = y_;
		}
		this.contour.reset();
	}
};
var trilateral2_SketchForm = $hxEnums["trilateral2.SketchForm"] = { __ename__ : "trilateral2.SketchForm", __constructs__ : ["Tracer","Base","Crude","FillOnly","Fine","FineOverlap","Medium","MediumOverlap","RoundEnd"]
	,Tracer: {_hx_index:0,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Base: {_hx_index:1,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Crude: {_hx_index:2,__enum__:"trilateral2.SketchForm",toString:$estr}
	,FillOnly: {_hx_index:3,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Fine: {_hx_index:4,__enum__:"trilateral2.SketchForm",toString:$estr}
	,FineOverlap: {_hx_index:5,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Medium: {_hx_index:6,__enum__:"trilateral2.SketchForm",toString:$estr}
	,MediumOverlap: {_hx_index:7,__enum__:"trilateral2.SketchForm",toString:$estr}
	,RoundEnd: {_hx_index:8,__enum__:"trilateral2.SketchForm",toString:$estr}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
hxGeomAlgo_PolyTools.exposeEnum(hxGeomAlgo_WindingRule);
hxGeomAlgo_PolyTools.exposeEnum(hxGeomAlgo_ResultType);
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
htmlHelper_webgl_WebGLSetup.posName = "pos";
htmlHelper_webgl_WebGLSetup.colorName = "color";
htmlHelper_webgl_WebGLSetup.textureName = "aTexture";
dice_helpers_ViewGL.largeEnough = 2000000;
htmlHelper_tools_AnimateTimer.counter = 0;
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.EMPTY = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(NaN,NaN);
hxGeomAlgo_PolyTools.point = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
hxGeomAlgo_PolyTools.zero = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(0,0);
hxGeomAlgo_PolyTools.EPSILON = .00000001;
dice_Dice.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
