// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["hxGeomAlgo"] = $hx_exports["hxGeomAlgo"] || {};
$hx_exports["hxGeomAlgo"]["_HxPoint"] = $hx_exports["hxGeomAlgo"]["_HxPoint"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var dice_Dice = function() {
	this.angle = 0.;
	this.e1 = 0;
	this.s1 = 0;
	this.e0 = 0;
	this.s0 = 0;
	this.len = 0;
	this.size = 80;
	this.viewGL = new dice_helpers_ViewGL();
	new htmlHelper_tools_DivertTrace();
	this.instructions();
	this.layoutPos = new dice_helpers_LayoutPos(600);
	this.pen = this.viewGL.pen;
	var gridLines = new dice_helpers_GridLines(this.pen,600);
	gridLines.draw(10,60226304,-258540557);
	var tmp = this.viewGL;
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-0.1);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	tmp.transform(this4);
	var range0 = this.drawDotSide(-983041);
	this.s0 = range0.start;
	this.e0 = range0.end;
	var tmp1 = this.viewGL;
	var this5 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this6 = this5;
	var theta = this.angle;
	var c = Math.cos(theta);
	var s1 = Math.sin(theta);
	var this7 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s1,0.,0.,s1,c,0.);
	var s2 = this7;
	var this8 = new geom_structure_Mat4x3(this6.a * s2.a + this6.b * s2.e + this6.c * s2.i,this6.a * s2.b + this6.b * s2.f + this6.c * s2.j,this6.a * s2.c + this6.b * s2.g + this6.c * s2.k,this6.a * s2.d + this6.b * s2.h + this6.c * s2.l + this6.d,this6.e * s2.a + this6.f * s2.e + this6.g * s2.i,this6.e * s2.b + this6.f * s2.f + this6.g * s2.j,this6.e * s2.c + this6.f * s2.g + this6.g * s2.k,this6.e * s2.d + this6.f * s2.h + this6.g * s2.l + this6.h,this6.i * s2.a + this6.j * s2.e + this6.k * s2.i,this6.i * s2.b + this6.j * s2.f + this6.k * s2.j,this6.i * s2.c + this6.j * s2.g + this6.k * s2.k,this6.i * s2.d + this6.j * s2.h + this6.k * s2.l + this6.l);
	tmp1.transformRange(this8,this.s0,this.e0);
	var range1 = this.drawDotSide(-983296);
	this.s1 = range1.start;
	this.e1 = range1.end;
	var tmp2 = this.viewGL;
	var this9 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this10 = this9;
	var this11 = new geom_structure_Mat4x3(1.,0.,0.,0.01,0.,1.,0.,0.,0.,0.,1.,0.);
	var s3 = this11;
	var this12 = new geom_structure_Mat4x3(this10.a * s3.a + this10.b * s3.e + this10.c * s3.i,this10.a * s3.b + this10.b * s3.f + this10.c * s3.j,this10.a * s3.c + this10.b * s3.g + this10.c * s3.k,this10.a * s3.d + this10.b * s3.h + this10.c * s3.l + this10.d,this10.e * s3.a + this10.f * s3.e + this10.g * s3.i,this10.e * s3.b + this10.f * s3.f + this10.g * s3.j,this10.e * s3.c + this10.f * s3.g + this10.g * s3.k,this10.e * s3.d + this10.f * s3.h + this10.g * s3.l + this10.h,this10.i * s3.a + this10.j * s3.e + this10.k * s3.i,this10.i * s3.b + this10.j * s3.f + this10.k * s3.j,this10.i * s3.c + this10.j * s3.g + this10.k * s3.k,this10.i * s3.d + this10.j * s3.h + this10.k * s3.l + this10.l);
	tmp2.transformRange(this12,this.s1,this.e1);
	var tmp3 = this.viewGL;
	var this13 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this14 = this13;
	var theta1 = Math.PI + this.angle;
	var c1 = Math.cos(theta1);
	var s4 = Math.sin(theta1);
	var this15 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c1,-s4,0.,0.,s4,c1,0.);
	var s5 = this15;
	var this16 = new geom_structure_Mat4x3(this14.a * s5.a + this14.b * s5.e + this14.c * s5.i,this14.a * s5.b + this14.b * s5.f + this14.c * s5.j,this14.a * s5.c + this14.b * s5.g + this14.c * s5.k,this14.a * s5.d + this14.b * s5.h + this14.c * s5.l + this14.d,this14.e * s5.a + this14.f * s5.e + this14.g * s5.i,this14.e * s5.b + this14.f * s5.f + this14.g * s5.j,this14.e * s5.c + this14.f * s5.g + this14.g * s5.k,this14.e * s5.d + this14.f * s5.h + this14.g * s5.l + this14.h,this14.i * s5.a + this14.j * s5.e + this14.k * s5.i,this14.i * s5.b + this14.j * s5.f + this14.k * s5.j,this14.i * s5.c + this14.j * s5.g + this14.k * s5.k,this14.i * s5.d + this14.j * s5.h + this14.k * s5.l + this14.l);
	tmp3.transformRange(this16,this.s1,this.e1);
	this.viewGL.update = $bind(this,this.update);
	this.viewGL.uploadVectors();
	var _this = this.viewGL;
	if(htmlHelper_tools_AnimateTimer.s == null) {
		htmlHelper_tools_AnimateTimer.s = window.document.createElement("style");
		htmlHelper_tools_AnimateTimer.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
		window.document.getElementsByTagName("head")[0].appendChild(htmlHelper_tools_AnimateTimer.s);
		htmlHelper_tools_AnimateTimer.s.animation = "spin 1s linear infinite";
		htmlHelper_tools_AnimateTimer.loop(60.0);
	}
	htmlHelper_tools_AnimateTimer.onFrame = $bind(_this,_this.render_);
};
dice_Dice.__name__ = true;
dice_Dice.main = function() {
	new dice_Dice();
};
dice_Dice.prototype = {
	drawDotSide: function(color) {
		var drawType = this.pen.drawType;
		var ax = this.layoutPos.centre.x;
		var ay = this.layoutPos.centre.y;
		var radius = this.size;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = ax + radius * Math.sin(theta);
			by = ay + radius * Math.cos(theta);
			theta += step;
			cx = ax + radius * Math.sin(theta);
			cy = ay + radius * Math.cos(theta);
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		this.len = 36;
		var _this = this.pen;
		var color1 = color;
		if(color1 == -1) {
			color1 = _this.currentColor;
		}
		_this.colorType.colorTriangles(color1,this.len);
		return { start : (this.viewGL.verts[1] | 0) - this.len, end : (this.viewGL.verts[1] | 0) - 1};
	}
	,update: function() {
		var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
		var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
		var this3 = new geom_structure_DualQ(this1,this2);
		var model = this3;
		model = this.viewGL.itemModel.updateCalculate(model);
		var a = model.real;
		var b = model.real;
		var mag = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
		var q;
		if(mag < 0) {
			q = null;
		} else {
			var oneOver = 1 / mag;
			var a1 = model.real;
			var this4 = new geom_structure_Mat1x4(a1.x * oneOver,a1.y * oneOver,a1.z * oneOver,a1.w * oneOver);
			var a2 = model.dual;
			var this5 = new geom_structure_Mat1x4(a2.x * oneOver,a2.y * oneOver,a2.z * oneOver,a2.w * oneOver);
			var this6 = new geom_structure_DualQ(this4,this5);
			q = this6;
		}
		var this7 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var m = this7;
		var w = q.real.w;
		var x = q.real.x;
		var y = q.real.y;
		var z = q.real.z;
		m.a = w * w + x * x - y * y - z * z;
		m.e = 2 * x * y + 2 * w * z;
		m.i = 2 * x * z - 2 * w * y;
		m.b = 2 * x * y - 2 * w * z;
		m.f = w * w + y * y - x * x - z * z;
		m.j = 2 * y * z + 2 * w * x;
		m.c = 2 * x * z + 2 * w * y;
		m.g = 2 * y * z - 2 * w * x;
		m.k = w * w + z * z - x * x - y * y;
		var a3 = q.dual;
		var this8 = new geom_structure_Mat1x4(a3.x * 2.,a3.y * 2.,a3.z * 2.,a3.w * 2.);
		var q1 = this8;
		var a4 = q.real;
		var this9 = new geom_structure_Mat1x4(-a4.x,-a4.y,-a4.z,a4.w);
		var q2 = this9;
		var this10 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
		q1 = this10;
		var this11 = new geom_structure_Mat1x4(q1.x,q1.y,q1.z,1.);
		var t = this11;
		m.d = t.x;
		m.h = t.y;
		m.l = t.z;
		var trans = m;
		this.viewGL.transformRange(trans,this.s0,this.e1);
		this.viewGL.uploadVectors();
	}
	,instructions: function() {
		haxe_Log.trace("use keys to transform",{ fileName : "src/dice/Dice.hx", lineNumber : 106, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("to swap between disc and scene: a",{ fileName : "src/dice/Dice.hx", lineNumber : 107, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("rotate: arrow keys",{ fileName : "src/dice/Dice.hx", lineNumber : 108, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("zoom: delete/return",{ fileName : "src/dice/Dice.hx", lineNumber : 109, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("translate up/down: tab/shift",{ fileName : "src/dice/Dice.hx", lineNumber : 110, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("translate left/right: ctrl/space",{ fileName : "src/dice/Dice.hx", lineNumber : 111, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("spin: alt/cmd",{ fileName : "src/dice/Dice.hx", lineNumber : 112, className : "dice.Dice", methodName : "instructions"});
		haxe_Log.trace("reset scene position: r",{ fileName : "src/dice/Dice.hx", lineNumber : 113, className : "dice.Dice", methodName : "instructions"});
	}
};
var dice_helpers_AxisKeys = function(axisModel_,itemModel_) {
	this.sceneTransform = true;
	this.showTrace = false;
	this.axisModel = axisModel_;
	this.sceneModel = axisModel_;
	this.itemModel = itemModel_;
	this.characterInput = new htmlHelper_tools_CharacterInput();
	this.characterInput.commandSignal = $bind(this,this.commandDown);
	this.characterInput.navSignal = $bind(this,this.navDown);
	this.characterInput.letterSignal = $bind(this,this.letterDown);
};
dice_helpers_AxisKeys.__name__ = true;
dice_helpers_AxisKeys.prototype = {
	commandDown: function() {
		if(this.characterInput.cmdDown) {
			var v = 1.;
			var _this = this.axisModel.rz;
			_this.trinary.set_trit(v);
			if(_this.trinary.changed) {
				if(v == 0.) {
					_this.value = 0.;
				} else {
					var f = v;
					_this.value = -f * _this.step;
				}
			}
		} else if(this.characterInput.altDown) {
			var v1 = -1.;
			var _this1 = this.axisModel.rz;
			_this1.trinary.set_trit(v1);
			if(_this1.trinary.changed) {
				if(v1 == 0.) {
					_this1.value = 0.;
				} else {
					var f1 = v1;
					_this1.value = -f1 * _this1.step;
				}
			}
		} else {
			var v2 = 0.;
			var _this2 = this.axisModel.rz;
			_this2.trinary.set_trit(v2);
			if(_this2.trinary.changed) {
				if(v2 == 0.) {
					_this2.value = 0.;
				} else {
					var f2 = v2;
					_this2.value = -f2 * _this2.step;
				}
			}
		}
		if(this.characterInput.tabDown) {
			var v3 = -1.;
			var _this3 = this.axisModel.ty;
			_this3.trinary.set_trit(v3);
			if(_this3.trinary.changed) {
				if(v3 == 0.) {
					_this3.value = 0.;
				} else {
					var f3 = v3;
					_this3.value = -f3 * _this3.step;
				}
			}
		} else if(this.characterInput.shiftDown) {
			var v4 = 1.;
			var _this4 = this.axisModel.ty;
			_this4.trinary.set_trit(v4);
			if(_this4.trinary.changed) {
				if(v4 == 0.) {
					_this4.value = 0.;
				} else {
					var f4 = v4;
					_this4.value = -f4 * _this4.step;
				}
			}
		} else {
			var v5 = 0.;
			var _this5 = this.axisModel.ty;
			_this5.trinary.set_trit(v5);
			if(_this5.trinary.changed) {
				if(v5 == 0.) {
					_this5.value = 0.;
				} else {
					var f5 = v5;
					_this5.value = -f5 * _this5.step;
				}
			}
		}
		if(this.characterInput.spaceDown) {
			var v6 = -1.;
			var _this6 = this.axisModel.tx;
			_this6.trinary.set_trit(v6);
			if(_this6.trinary.changed) {
				if(v6 == 0.) {
					_this6.value = 0.;
				} else {
					var f6 = v6;
					_this6.value = -f6 * _this6.step;
				}
			}
		} else if(this.characterInput.controlDown) {
			var v7 = 1.;
			var _this7 = this.axisModel.tx;
			_this7.trinary.set_trit(v7);
			if(_this7.trinary.changed) {
				if(v7 == 0.) {
					_this7.value = 0.;
				} else {
					var f7 = v7;
					_this7.value = -f7 * _this7.step;
				}
			}
		} else {
			var v8 = 0.;
			var _this8 = this.axisModel.tx;
			_this8.trinary.set_trit(v8);
			if(_this8.trinary.changed) {
				if(v8 == 0.) {
					_this8.value = 0.;
				} else {
					var f8 = v8;
					_this8.value = -f8 * _this8.step;
				}
			}
		}
		if(this.characterInput.deleteDown) {
			var v9 = -1.;
			var _this9 = this.axisModel.tz;
			_this9.trinary.set_trit(v9);
			if(_this9.trinary.changed) {
				if(v9 == 0.) {
					_this9.value = 0.;
				} else {
					var f9 = v9;
					_this9.value = -f9 * _this9.step;
				}
			}
		} else if(this.characterInput.enterDown) {
			var v10 = 1.;
			var _this10 = this.axisModel.tz;
			_this10.trinary.set_trit(v10);
			if(_this10.trinary.changed) {
				if(v10 == 0.) {
					_this10.value = 0.;
				} else {
					var f10 = v10;
					_this10.value = -f10 * _this10.step;
				}
			}
		} else {
			var v11 = 0.;
			var _this11 = this.axisModel.tz;
			_this11.trinary.set_trit(v11);
			if(_this11.trinary.changed) {
				if(v11 == 0.) {
					_this11.value = 0.;
				} else {
					var f11 = v11;
					_this11.value = -f11 * _this11.step;
				}
			}
		}
		if(this.showTrace) {
			haxe_Log.trace(this.characterInput.commandDown(),{ fileName : "src/dice/helpers/AxisKeys.hx", lineNumber : 46, className : "dice.helpers.AxisKeys", methodName : "commandDown"});
		}
	}
	,navDown: function() {
		if(this.showTrace) {
			haxe_Log.trace(this.characterInput.navDown(),{ fileName : "src/dice/helpers/AxisKeys.hx", lineNumber : 50, className : "dice.helpers.AxisKeys", methodName : "navDown"});
		}
		if(this.characterInput.leftDown) {
			var v = -1.;
			var _this = this.axisModel.ry;
			_this.trinary.set_trit(v);
			if(_this.trinary.changed) {
				if(v == 0.) {
					_this.value = 0.;
				} else {
					var f = v;
					_this.value = -f * _this.step;
				}
			}
		} else if(this.characterInput.rightDown) {
			var v1 = 1.;
			var _this1 = this.axisModel.ry;
			_this1.trinary.set_trit(v1);
			if(_this1.trinary.changed) {
				if(v1 == 0.) {
					_this1.value = 0.;
				} else {
					var f1 = v1;
					_this1.value = -f1 * _this1.step;
				}
			}
		} else {
			var v2 = 0.;
			var _this2 = this.axisModel.ry;
			_this2.trinary.set_trit(v2);
			if(_this2.trinary.changed) {
				if(v2 == 0.) {
					_this2.value = 0.;
				} else {
					var f2 = v2;
					_this2.value = -f2 * _this2.step;
				}
			}
		}
		if(this.characterInput.upDown) {
			var v3 = -1.;
			var _this3 = this.axisModel.rx;
			_this3.trinary.set_trit(v3);
			if(_this3.trinary.changed) {
				if(v3 == 0.) {
					_this3.value = 0.;
				} else {
					var f3 = v3;
					_this3.value = -f3 * _this3.step;
				}
			}
		} else if(this.characterInput.downDown) {
			var v4 = 1.;
			var _this4 = this.axisModel.rx;
			_this4.trinary.set_trit(v4);
			if(_this4.trinary.changed) {
				if(v4 == 0.) {
					_this4.value = 0.;
				} else {
					var f4 = v4;
					_this4.value = -f4 * _this4.step;
				}
			}
		} else {
			var v5 = 0.;
			var _this5 = this.axisModel.rx;
			_this5.trinary.set_trit(v5);
			if(_this5.trinary.changed) {
				if(v5 == 0.) {
					_this5.value = 0.;
				} else {
					var f5 = v5;
					_this5.value = -f5 * _this5.step;
				}
			}
		}
	}
	,letterDown: function(letter) {
		if(letter == "r" || letter == "p") {
			var _this = this.axisModel;
			_this.rx.value = 0.;
			_this.ry.value = 0.;
			_this.rz.value = 0.;
			_this.tx.value = 0.;
			_this.ty.value = 0.;
			_this.tz.value = 0.;
			if(this.showTrace) {
				haxe_Log.trace("reset",{ fileName : "src/dice/helpers/AxisKeys.hx", lineNumber : 64, className : "dice.helpers.AxisKeys", methodName : "letterDown"});
			}
			if(this.reset != null) {
				this.reset();
			}
		}
		if(letter == "a") {
			this.swapAxisModel();
		}
	}
	,swapAxisModel: function() {
		this.sceneTransform = !this.sceneTransform;
		if(this.sceneTransform) {
			this.axisModel = this.sceneModel;
		} else {
			this.axisModel = this.itemModel;
		}
	}
};
var dice_helpers_GridLines = function(pen,stageRadius) {
	this.pen = pen;
	this.stageRadius = stageRadius;
};
dice_helpers_GridLines.__name__ = true;
dice_helpers_GridLines.prototype = {
	draw: function(spacing,colorA,colorB) {
		var gap = 15;
		var len = Math.ceil((this.stageRadius * 2 - 2 * gap) / spacing);
		this.pen.currentColor = colorB;
		var sketch = new trilateral2_Sketch(this.pen,trilateral2_SketchForm.Crude,3);
		sketch.width = spacing / 4;
		var delta = 0.;
		sketch.moveTo(0,0);
		var _g = 1;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var delta1 = i * spacing;
			if(i % 10 == 0) {
				this.pen.currentColor = colorA;
			} else {
				this.pen.currentColor = colorB;
			}
			sketch.moveTo(gap,delta1 + gap);
			var x_ = this.stageRadius * 2 - gap;
			var y_ = delta1 + gap;
			var repeat = sketch.x == x_ && sketch.y == y_;
			if(!repeat) {
				if(sketch.widthFunction != null) {
					sketch.width = sketch.widthFunction(sketch.width,sketch.x,sketch.y,x_,y_);
				}
				if(sketch.colourFunction != null) {
					sketch.pen.currentColor = sketch.colourFunction(sketch.pen.currentColor,sketch.x,sketch.y,x_,y_);
				}
				sketch.line(x_,y_);
				var l = sketch.points.length;
				var p = sketch.points[l - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = sketch.dim[sketch.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				sketch.x = x_;
				sketch.y = y_;
			}
			sketch.moveTo(delta1 + gap,gap);
			var x_1 = delta1 + gap;
			var y_1 = this.stageRadius * 2 - gap;
			var repeat1 = sketch.x == x_1 && sketch.y == y_1;
			if(!repeat1) {
				if(sketch.widthFunction != null) {
					sketch.width = sketch.widthFunction(sketch.width,sketch.x,sketch.y,x_1,y_1);
				}
				if(sketch.colourFunction != null) {
					sketch.pen.currentColor = sketch.colourFunction(sketch.pen.currentColor,sketch.x,sketch.y,x_1,y_1);
				}
				sketch.line(x_1,y_1);
				var l1 = sketch.points.length;
				var p1 = sketch.points[l1 - 1];
				var l21 = p1.length;
				p1[l21] = x_1;
				p1[l21 + 1] = y_1;
				var d1 = sketch.dim[sketch.dim.length - 1];
				if(x_1 < d1.minX) {
					d1.minX = x_1;
				}
				if(x_1 > d1.maxX) {
					d1.maxX = x_1;
				}
				if(y_1 < d1.minY) {
					d1.minY = y_1;
				}
				if(y_1 > d1.maxY) {
					d1.maxY = y_1;
				}
				sketch.x = x_1;
				sketch.y = y_1;
			}
		}
	}
};
var dice_helpers_LayoutPos = function(stageRadius_) {
	this.stageRadius = stageRadius_;
	this.centre = new geom_structure_Mat1x2(this.stageRadius,this.stageRadius);
	this.quarter = this.stageRadius / 2;
	this.bottomLeft = new geom_structure_Mat1x2(this.stageRadius - this.quarter,this.stageRadius + this.quarter);
	this.bottomRight = new geom_structure_Mat1x2(this.stageRadius + this.quarter,this.stageRadius + this.quarter);
	this.topLeft = new geom_structure_Mat1x2(this.stageRadius - this.quarter,this.stageRadius - this.quarter);
	this.topRight = new geom_structure_Mat1x2(this.stageRadius + this.quarter,this.stageRadius - this.quarter);
};
dice_helpers_LayoutPos.__name__ = true;
var htmlHelper_webgl_WebGLSetup = function(width_,height_,autoChild) {
	if(autoChild == null) {
		autoChild = true;
	}
	this.colors = new Float32Array(100);
	this.indices = new Uint16Array(100);
	this.vertices = new Float32Array(100);
	this.BACK = true;
	this.CULL_FACE = true;
	this.DEPTH_TEST = true;
	this.bgAlpha = 1.;
	this.bgBlue = 1.;
	this.bgGreen = 1.;
	this.bgRed = 1.;
	haxe_Log.trace("dev htmlHelper",{ fileName : "htmlHelper/webgl/WebGLSetup.hx", lineNumber : 97, className : "htmlHelper.webgl.WebGLSetup", methodName : "new"});
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = 1.0;
	arr[1] = 0.0;
	arr[2] = 0.0;
	arr[3] = 0.0;
	arr[4] = 1.0;
	arr[5] = 0.0;
	arr[6] = 0.0;
	arr[7] = 0.0;
	arr[8] = 1.0;
	arr[9] = 0.0;
	arr[10] = 0.0;
	arr[11] = 0.0;
	arr[12] = 1.0;
	arr[13] = 0.0;
	arr[14] = 0.0;
	arr[15] = 0.0;
	this.matrix32Array = arr;
	this.setupCanvas(width_,height_,autoChild);
};
htmlHelper_webgl_WebGLSetup.__name__ = true;
htmlHelper_webgl_WebGLSetup.prototype = {
	setupCanvas: function(width_,height_,autoChild) {
		if(autoChild == null) {
			autoChild = true;
		}
		this.width = width_;
		this.height = height_;
		this.canvas = window.document.createElement("canvas");
		this.canvas.width = this.width;
		this.canvas.height = this.height;
		var dom = this.canvas;
		var style = dom.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = Std.string(0 + "px");
		style.top = Std.string(0 + "px");
		style.position = "absolute";
		if(autoChild) {
			window.document.body.appendChild(this.canvas);
		}
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
	}
	,setupProgram: function(vertexString,fragmentString) {
		var gl = this.gl;
		var shader = gl.createShader(35633);
		gl.shaderSource(shader,vertexString);
		gl.compileShader(shader);
		var vertex = shader;
		var gl1 = this.gl;
		var shader1 = gl1.createShader(35632);
		gl1.shaderSource(shader1,fragmentString);
		gl1.compileShader(shader1);
		var fragment = shader1;
		var gl2 = this.gl;
		var program = gl2.createProgram();
		gl2.attachShader(program,vertex);
		gl2.attachShader(program,fragment);
		gl2.linkProgram(program);
		gl2.useProgram(program);
		this.program = program;
		return this.program;
	}
	,render: function() {
		this.gl.clearColor(this.bgRed,this.bgGreen,this.bgBlue,this.bgAlpha);
		if(this.DEPTH_TEST) {
			this.gl.enable(2929);
		}
		if(this.CULL_FACE) {
			this.gl.enable(2884);
		}
		if(this.BACK) {
			this.gl.cullFace(1029);
		}
		this.gl.clear(16384);
		this.gl.viewport(0,0,this.canvas.width,this.canvas.height);
		var modelViewProjectionID = this.gl.getUniformLocation(this.program,"modelViewProjection");
		this.gl.uniformMatrix4fv(modelViewProjectionID,false,this.matrix32Array);
		this.gl.drawArrays(4,0,this.indices.length);
	}
};
var dice_helpers_ViewGL = function() {
	var qReal = new geom_structure_Mat1x4(0.,0.,Math.sin(0.),Math.cos(0.));
	var qDual = new geom_structure_Mat1x4(0.,0.,-1.,1.);
	var currentLength = Math.sqrt(qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		qReal.x *= mul;
		qReal.y *= mul;
		qReal.z *= mul;
		qReal.w *= mul;
	}
	var real = qReal;
	var q = new geom_structure_Mat1x4(qDual.x,qDual.y,qDual.z,0.);
	q = new geom_structure_Mat1x4(q.x * 0.5,q.y * 0.5,q.z * 0.5,q.w * 0.5);
	this.offset = new geom_structure_DualQ(real,new geom_structure_Mat1x4(q.x * real.w + q.y * real.z - q.z * real.y + q.w * real.x,-q.x * real.z + q.y * real.w + q.z * real.x + q.w * real.y,q.x * real.y - q.y * real.x + q.z * real.w + q.w * real.z,-q.x * real.x - q.y * real.y - q.z * real.z + q.w * real.w));
	this.model = new geom_structure_DualQ(new geom_structure_Mat1x4(0.,0.,0.,1.),new geom_structure_Mat1x4(0.,0.,0.,0.));
	var this1 = new Uint16Array(dice_helpers_ViewGL.largeEnough + 4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this.ind = this1;
	var this11 = new Float32Array(dice_helpers_ViewGL.largeEnough + 2);
	this11[0] = 0.;
	this11[1] = 0.;
	this.cols = this11;
	var this12 = new Float32Array(dice_helpers_ViewGL.largeEnough + 2);
	this12[0] = 0.;
	this12[1] = 0.;
	this.textPos = this12;
	var this13 = new Float32Array(dice_helpers_ViewGL.largeEnough + 2);
	this13[0] = 0.;
	this13[1] = 0.;
	this.verts = this13;
	this.itemModel = new geom_move_Axis3();
	this.axisModel = new geom_move_Axis3();
	htmlHelper_webgl_WebGLSetup.call(this,600,600);
	var axisKeys = new dice_helpers_AxisKeys(this.axisModel,this.itemModel);
	axisKeys.showTrace = false;
	axisKeys.reset = $bind(this,this.resetPosition);
	this.DEPTH_TEST = false;
	this.BACK = false;
	this.darkBackground();
	this.setupProgram("attribute vec3 pos;" + "attribute vec4 color;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(pos, 1.);" + " vcol = color;" + "}","precision mediump float;" + "varying vec4 vcol;" + "void main(void) {" + " gl_FragColor = vcol;" + "}");
	var verts = this.verts;
	var cols = this.cols;
	var _e = verts;
	var _e1 = verts;
	var _e2 = verts;
	var _e3 = verts;
	var _e4 = cols;
	var tmp = function(colorA,colorB,colorC) {
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e4,(colorA >> 16 & 255) / 255);
		var v = (colorA & 255) / 255;
		_e4[(_e4[0] | 0) * 4 + 2 + 2] = v;
		var v1 = (colorA >> 8 & 255) / 255;
		_e4[(_e4[0] | 0) * 4 + 1 + 2] = v1;
		var v2 = (colorA >> 24 & 255) / 255;
		_e4[(_e4[0] | 0) * 4 + 3 + 2] = v2;
		var pos_ = _e4[0] + 1.;
		_e4[0] = pos_;
		if(_e4[0] > _e4[1]) {
			_e4[1] = _e4[0];
		}
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e4,(colorB >> 16 & 255) / 255);
		var v3 = (colorB & 255) / 255;
		_e4[(_e4[0] | 0) * 4 + 2 + 2] = v3;
		var v4 = (colorB >> 8 & 255) / 255;
		_e4[(_e4[0] | 0) * 4 + 1 + 2] = v4;
		var v5 = (colorB >> 24 & 255) / 255;
		_e4[(_e4[0] | 0) * 4 + 3 + 2] = v5;
		var pos_1 = _e4[0] + 1.;
		_e4[0] = pos_1;
		if(_e4[0] > _e4[1]) {
			_e4[1] = _e4[0];
		}
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e4,(colorC >> 16 & 255) / 255);
		var v6 = (colorC & 255) / 255;
		_e4[(_e4[0] | 0) * 4 + 2 + 2] = v6;
		var v7 = (colorC >> 8 & 255) / 255;
		_e4[(_e4[0] | 0) * 4 + 1 + 2] = v7;
		var v8 = (colorC >> 24 & 255) / 255;
		_e4[(_e4[0] | 0) * 4 + 3 + 2] = v8;
		var pos_2 = _e4[0] + 1.;
		_e4[0] = pos_2;
		if(_e4[0] > _e4[1]) {
			_e4[1] = _e4[0];
		}
	};
	var _e5 = cols;
	var tmp1 = function(color,times) {
		var _g = 0;
		var _g1 = times;
		while(_g < _g1) {
			var i = _g++;
			geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e5,(color >> 16 & 255) / 255);
			var v9 = (color & 255) / 255;
			_e5[(_e5[0] | 0) * 4 + 2 + 2] = v9;
			var v10 = (color >> 8 & 255) / 255;
			_e5[(_e5[0] | 0) * 4 + 1 + 2] = v10;
			var v11 = (color >> 24 & 255) / 255;
			_e5[(_e5[0] | 0) * 4 + 3 + 2] = v11;
			var pos_3 = _e5[0] + 1.;
			_e5[0] = pos_3;
			if(_e5[0] > _e5[1]) {
				_e5[1] = _e5[0];
			}
			geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e5,(color >> 16 & 255) / 255);
			var v12 = (color & 255) / 255;
			_e5[(_e5[0] | 0) * 4 + 2 + 2] = v12;
			var v13 = (color >> 8 & 255) / 255;
			_e5[(_e5[0] | 0) * 4 + 1 + 2] = v13;
			var v14 = (color >> 24 & 255) / 255;
			_e5[(_e5[0] | 0) * 4 + 3 + 2] = v14;
			var pos_4 = _e5[0] + 1.;
			_e5[0] = pos_4;
			if(_e5[0] > _e5[1]) {
				_e5[1] = _e5[0];
			}
			geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e5,(color >> 16 & 255) / 255);
			var v15 = (color & 255) / 255;
			_e5[(_e5[0] | 0) * 4 + 2 + 2] = v15;
			var v16 = (color >> 8 & 255) / 255;
			_e5[(_e5[0] | 0) * 4 + 1 + 2] = v16;
			var v17 = (color >> 24 & 255) / 255;
			_e5[(_e5[0] | 0) * 4 + 3 + 2] = v17;
			var pos_5 = _e5[0] + 1.;
			_e5[0] = pos_5;
			if(_e5[0] > _e5[1]) {
				_e5[1] = _e5[0];
			}
		}
	};
	this.pen = new trilateral2_Pen({ triangle : function(ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
		return geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.triangle(_e,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
	}, transform : function(m) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(_e1,m);
	}, next : function() {
		var pos_6 = _e2[0] + 1.;
		_e2[0] = pos_6;
		if(_e2[0] > _e2[1]) {
			_e2[1] = _e2[0];
		}
		return _e2[0];
	}, hasNext : function() {
		return _e3[0] < (_e3[1] | 0);
	}, pos : verts[0], length : verts[1] | 0},{ cornerColors : tmp, colorTriangles : tmp1, pos : verts[0], length : verts[1] | 0});
	this.pen.transformMatrix = this.scaleToGL();
	trilateral2_Shaper.transformMatrix = this.scaleToGL();
};
dice_helpers_ViewGL.__name__ = true;
dice_helpers_ViewGL.__super__ = htmlHelper_webgl_WebGLSetup;
dice_helpers_ViewGL.prototype = $extend(htmlHelper_webgl_WebGLSetup.prototype,{
	transform: function(m) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformAll(this.verts,m);
	}
	,transformRange: function(m,start,end) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformRange(this.verts,m,start,end);
	}
	,scaleToGL: function() {
		this.scale = 0.00166666666666666677;
		var this1 = new geom_structure_Mat1x4(this.scale,-this.scale,1.,1.);
		var p = this1;
		var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this3 = this2;
		var this4 = new geom_structure_Mat4x3(1.,0.,0.,-1.,0.,1.,0.,1.,0.,0.,1.,0.);
		var s = this4;
		var this5 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
		var m = this5;
		var this6 = new geom_structure_Mat4x3(m.a * p.x,m.b,m.c,m.d,m.e,m.f * p.y,m.g,m.h,m.i,m.j,m.k * p.z,m.l);
		return this6;
	}
	,uploadVectors: function() {
		var this1 = this.verts;
		this.vertices = this1.subarray(2,(this1[1] | 0) * 9 + 2);
		var this2 = this.cols;
		this.colors = this2.subarray(2,(this2[1] | 0) * 4 + 2);
		var this3 = this.textPos;
		var texs = this3.subarray(2,(this3[1] | 0) * 6 + 2);
		this.indices = this.createIndices();
		var gl = this.gl;
		var indices = this.indices;
		var indexBuffer = gl.createBuffer();
		gl.bindBuffer(34963,indexBuffer);
		gl.bufferData(34963,indices,35044);
		gl.bindBuffer(34963,null);
		var gl1 = this.gl;
		var program = this.program;
		var vertices = this.vertices;
		var colors = this.colors;
		var texture = null;
		var name = htmlHelper_webgl_WebGLSetup.posName;
		var buffer = gl1.createBuffer();
		var arrBuffer = 34962;
		gl1.bindBuffer(arrBuffer,buffer);
		gl1.bufferData(arrBuffer,vertices,35044);
		var flo = gl1.getAttribLocation(program,name);
		gl1.vertexAttribPointer(flo,3,5126,false,0,0);
		gl1.enableVertexAttribArray(flo);
		gl1.bindBuffer(arrBuffer,null);
		var name1 = htmlHelper_webgl_WebGLSetup.colorName;
		var buffer1 = gl1.createBuffer();
		var arrBuffer1 = 34962;
		gl1.bindBuffer(arrBuffer1,buffer1);
		gl1.bufferData(arrBuffer1,colors,35044);
		var flo1 = gl1.getAttribLocation(program,name1);
		gl1.vertexAttribPointer(flo1,4,5126,false,0,0);
		gl1.enableVertexAttribArray(flo1);
		gl1.bindBuffer(arrBuffer1,null);
		if(texture != null) {
			var name2 = htmlHelper_webgl_WebGLSetup.textureName;
			var buffer2 = gl1.createBuffer();
			var arrBuffer2 = 34962;
			gl1.bindBuffer(arrBuffer2,buffer2);
			gl1.bufferData(arrBuffer2,texture,35044);
			var flo2 = gl1.getAttribLocation(program,name2);
			gl1.vertexAttribPointer(flo2,2,5126,false,0,0);
			gl1.enableVertexAttribArray(flo2);
			gl1.bindBuffer(arrBuffer2,null);
		}
	}
	,resetPosition: function() {
		var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
		var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
		var this3 = new geom_structure_DualQ(this1,this2);
		this.model = this3;
	}
	,darkBackground: function() {
		var dark = 0.09375;
		this.bgRed = dark;
		this.bgGreen = dark;
		this.bgBlue = dark;
	}
	,createIndices: function() {
		var this1 = this.ind;
		this1[0] = 0;
		this1[1] = 0;
		if(0 > (this1[2] << 16) + this1[3]) {
			var v = 1;
			this1[2] = v >>> 16;
			this1[3] = v & 65535;
		}
		var _g = 0;
		var _g1 = this.verts[1] | 0;
		while(_g < _g1) {
			var i = _g++;
			var this2 = this.ind;
			var v1 = i * 3;
			this2[((this2[0] << 16) + this2[1]) * 3 + 0 + 4] = v1;
			var this3 = this.ind;
			var v2 = i * 3 + 1;
			this3[((this3[0] << 16) + this3[1]) * 3 + 1 + 4] = v2;
			var this4 = this.ind;
			var v3 = i * 3 + 2;
			this4[((this4[0] << 16) + this4[1]) * 3 + 2 + 4] = v3;
			var this5 = this.ind;
			var pos_ = (this5[0] << 16) + this5[1] + 1;
			this5[0] = pos_ >>> 16;
			this5[1] = pos_ & 65535;
			if(pos_ > (this5[2] << 16) + this5[3]) {
				var v4 = pos_ + 1;
				this5[2] = v4 >>> 16;
				this5[3] = v4 & 65535;
			}
		}
		var this6 = this.ind;
		var arr = this6.subarray(4,((this6[2] << 16) + this6[3]) * 3 + 4);
		return arr;
	}
	,render_: function(i) {
		if(this.update != null) {
			this.update();
		}
		this.model = this.axisModel.updateCalculate(this.model);
		var q1 = this.offset;
		var q2 = this.model;
		var q11 = q2.real;
		var q21 = q1.real;
		var this1 = new geom_structure_Mat1x4(q11.x * q21.w + q11.y * q21.z - q11.z * q21.y + q11.w * q21.x,-q11.x * q21.z + q11.y * q21.w + q11.z * q21.x + q11.w * q21.y,q11.x * q21.y - q11.y * q21.x + q11.z * q21.w + q11.w * q21.z,-q11.x * q21.x - q11.y * q21.y - q11.z * q21.z + q11.w * q21.w);
		var q12 = q2.dual;
		var q22 = q1.real;
		var this2 = new geom_structure_Mat1x4(q12.x * q22.w + q12.y * q22.z - q12.z * q22.y + q12.w * q22.x,-q12.x * q22.z + q12.y * q22.w + q12.z * q22.x + q12.w * q22.y,q12.x * q22.y - q12.y * q22.x + q12.z * q22.w + q12.w * q22.z,-q12.x * q22.x - q12.y * q22.y - q12.z * q22.z + q12.w * q22.w);
		var a = this2;
		var q13 = q1.dual;
		var q23 = q2.real;
		var this3 = new geom_structure_Mat1x4(q13.x * q23.w + q13.y * q23.z - q13.z * q23.y + q13.w * q23.x,-q13.x * q23.z + q13.y * q23.w + q13.z * q23.x + q13.w * q23.y,q13.x * q23.y - q13.y * q23.x + q13.z * q23.w + q13.w * q23.z,-q13.x * q23.x - q13.y * q23.y - q13.z * q23.z + q13.w * q23.w);
		var b = this3;
		var this4 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
		var this5 = new geom_structure_DualQ(this1,this4);
		var this6 = this5;
		var a1 = this6.real;
		var b1 = this6.real;
		var mag = a1.x * b1.x + a1.y * b1.y + a1.z * b1.z + a1.w * b1.w;
		var this7;
		if(mag < 0) {
			this7 = null;
		} else {
			var oneOver = 1 / mag;
			var a2 = this6.real;
			var this8 = new geom_structure_Mat1x4(a2.x * oneOver,a2.y * oneOver,a2.z * oneOver,a2.w * oneOver);
			var a3 = this6.dual;
			var this9 = new geom_structure_Mat1x4(a3.x * oneOver,a3.y * oneOver,a3.z * oneOver,a3.w * oneOver);
			var this10 = new geom_structure_DualQ(this8,this9);
			this7 = this10;
		}
		var a4 = this7.real;
		var b2 = this7.real;
		var mag1 = a4.x * b2.x + a4.y * b2.y + a4.z * b2.z + a4.w * b2.w;
		var q;
		if(mag1 < 0) {
			q = null;
		} else {
			var oneOver1 = 1 / mag1;
			var a5 = this7.real;
			var this11 = new geom_structure_Mat1x4(a5.x * oneOver1,a5.y * oneOver1,a5.z * oneOver1,a5.w * oneOver1);
			var a6 = this7.dual;
			var this12 = new geom_structure_Mat1x4(a6.x * oneOver1,a6.y * oneOver1,a6.z * oneOver1,a6.w * oneOver1);
			var this13 = new geom_structure_DualQ(this11,this12);
			q = this13;
		}
		var this14 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var m = this14;
		var w = q.real.w;
		var x = q.real.x;
		var y = q.real.y;
		var z = q.real.z;
		m.a = w * w + x * x - y * y - z * z;
		m.e = 2 * x * y + 2 * w * z;
		m.i = 2 * x * z - 2 * w * y;
		m.b = 2 * x * y - 2 * w * z;
		m.f = w * w + y * y - x * x - z * z;
		m.j = 2 * y * z + 2 * w * x;
		m.c = 2 * x * z + 2 * w * y;
		m.g = 2 * y * z - 2 * w * x;
		m.k = w * w + z * z - x * x - y * y;
		var a7 = q.dual;
		var this15 = new geom_structure_Mat1x4(a7.x * 2.,a7.y * 2.,a7.z * 2.,a7.w * 2.);
		var q3 = this15;
		var a8 = q.real;
		var this16 = new geom_structure_Mat1x4(-a8.x,-a8.y,-a8.z,a8.w);
		var q24 = this16;
		var this17 = new geom_structure_Mat1x4(q3.x * q24.w + q3.y * q24.z - q3.z * q24.y + q3.w * q24.x,-q3.x * q24.z + q3.y * q24.w + q3.z * q24.x + q3.w * q24.y,q3.x * q24.y - q3.y * q24.x + q3.z * q24.w + q3.w * q24.z,-q3.x * q24.x - q3.y * q24.y - q3.z * q24.z + q3.w * q24.w);
		q3 = this17;
		var this18 = new geom_structure_Mat1x4(q3.x,q3.y,q3.z,1.);
		var t = this18;
		m.d = t.x;
		m.h = t.y;
		m.l = t.z;
		var trans = m;
		var scale = 1 / Math.tan(0.785398163395);
		var dif = 99.9;
		var this19 = new geom_structure_Mat4x4(scale,0.,0.,0.,0.,scale,0.,0.,0.,0.,-100. / dif,-10. / dif,0.,0.,-1.,0.);
		var r = this19;
		var this20 = new geom_structure_Mat4x4(trans.a,trans.b,trans.c,trans.d,trans.e,trans.f,trans.g,trans.h,trans.i,trans.j,trans.k,trans.l,0.,0.,0.,1.);
		var s = this20;
		var this21 = new geom_structure_Mat4x4(r.a * s.a + r.b * s.e + r.c * s.i + r.d * s.m,r.a * s.b + r.b * s.f + r.c * s.j + r.d * s.n,r.a * s.c + r.b * s.g + r.c * s.k + r.d * s.o,r.a * s.d + r.b * s.h + r.c * s.l + r.d * s.p,r.e * s.a + r.f * s.e + r.g * s.i + r.h * s.m,r.e * s.b + r.f * s.f + r.g * s.j + r.h * s.n,r.e * s.c + r.f * s.g + r.g * s.k + r.h * s.o,r.e * s.d + r.f * s.h + r.g * s.l + r.h * s.p,r.i * s.a + r.j * s.e + r.k * s.i + r.l * s.m,r.i * s.b + r.j * s.f + r.k * s.j + r.l * s.n,r.i * s.c + r.j * s.g + r.k * s.k + r.l * s.o,r.i * s.d + r.j * s.h + r.k * s.l + r.l * s.p,r.m * s.a + r.n * s.e + r.o * s.i + r.p * s.m,r.m * s.b + r.n * s.f + r.o * s.j + r.p * s.n,r.m + s.c + r.n * s.g + r.o * s.k + r.p * s.o,r.m * s.d + r.n * s.h + r.o * s.l + r.p * s.p);
		var arr = this.matrix32Array;
		var here = this21;
		arr[0] = here.a;
		arr[1] = here.e;
		arr[2] = here.i;
		arr[3] = here.m;
		arr[4] = here.b;
		arr[5] = here.f;
		arr[6] = here.j;
		arr[7] = here.n;
		arr[8] = here.c;
		arr[9] = here.g;
		arr[10] = here.k;
		arr[11] = here.o;
		arr[12] = here.d;
		arr[13] = here.h;
		arr[14] = here.l;
		arr[15] = here.p;
		this.render();
	}
});
var fracs_DifferencePreference = $hxEnums["fracs.DifferencePreference"] = { __ename__ : "fracs.DifferencePreference", __constructs__ : ["CLOCKWISE","ANTICLOCKWISE","SMALL","LARGE"]
	,CLOCKWISE: {_hx_index:0,__enum__:"fracs.DifferencePreference",toString:$estr}
	,ANTICLOCKWISE: {_hx_index:1,__enum__:"fracs.DifferencePreference",toString:$estr}
	,SMALL: {_hx_index:2,__enum__:"fracs.DifferencePreference",toString:$estr}
	,LARGE: {_hx_index:3,__enum__:"fracs.DifferencePreference",toString:$estr}
};
var geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$ = {};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.__name__ = true;
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red = function(this1,v) {
	this1[(this1[0] | 0) * 4 + 2] = v;
	return v;
};
var geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$ = {};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.__name__ = true;
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax = function(this1) {
	return this1[(this1[0] | 0) * 9 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay = function(this1) {
	return this1[(this1[0] | 0) * 9 + 1 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 1 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az = function(this1) {
	return this1[(this1[0] | 0) * 9 + 2 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_az = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 2 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx = function(this1) {
	return this1[(this1[0] | 0) * 9 + 3 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 3 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by = function(this1) {
	return this1[(this1[0] | 0) * 9 + 4 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 4 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz = function(this1) {
	return this1[(this1[0] | 0) * 9 + 5 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bz = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 5 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx = function(this1) {
	return this1[(this1[0] | 0) * 9 + 6 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 6 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy = function(this1) {
	return this1[(this1[0] | 0) * 9 + 7 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 7 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz = function(this1) {
	return this1[(this1[0] | 0) * 9 + 8 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cz = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 8 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform = function(this1,m) {
	var this2 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az(this1),1.);
	var pa = this2;
	var this3 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz(this1),1.);
	var pb = this3;
	var this4 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz(this1),1.);
	var pc = this4;
	var this5 = new geom_structure_Mat1x4(m.a * pa.x + m.b * pa.y + m.c * pa.z + m.d,m.e * pa.x + m.f * pa.y + m.g * pa.z + m.h,m.i * pa.x + m.j * pa.y + m.k * pa.z + m.l,1.);
	pa = this5;
	var this6 = new geom_structure_Mat1x4(m.a * pb.x + m.b * pb.y + m.c * pb.z + m.d,m.e * pb.x + m.f * pb.y + m.g * pb.z + m.h,m.i * pb.x + m.j * pb.y + m.k * pb.z + m.l,1.);
	pb = this6;
	var this7 = new geom_structure_Mat1x4(m.a * pc.x + m.b * pc.y + m.c * pc.z + m.d,m.e * pc.x + m.f * pc.y + m.g * pc.z + m.h,m.i * pc.x + m.j * pc.y + m.k * pc.z + m.l,1.);
	pc = this7;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,pa.x);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,pa.y);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_az(this1,pa.z);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,pb.x);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,pb.y);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bz(this1,pb.z);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,pc.x);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,pc.y);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cz(this1,pc.z);
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformAll = function(this1,m) {
	this1[0] = 0;
	if(this1[0] > this1[1]) {
		this1[1] = this1[0];
	}
	var _g = 0;
	var _g1 = this1[1] | 0;
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1]) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformRange = function(this1,m,start,end) {
	this1[0] = start;
	if(this1[0] > this1[1]) {
		this1[1] = this1[0];
	}
	var tmp = end > (this1[1] | 0) - 1;
	var _g = start;
	var _g1 = end + 1;
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1]) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.triangle = function(this1,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,ax_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,ay_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_az(this1,az_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,bx_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,by_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bz(this1,bz_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,cx_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,cy_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cz(this1,cz_);
	var windingAdjusted = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.adjustWinding(this1);
	if(windingAdjusted) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,ax_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,ay_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,cx_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,cy_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,bx_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,by_);
	}
	return windingAdjusted;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.adjustWinding = function(this1) {
	return geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1) - geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) + (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1) - geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1)) + (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) - geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1)) > 0;
};
var geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$ = {};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.__name__ = true;
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax = function(this1) {
	return this1[(this1[0] | 0) * 6 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay = function(this1) {
	return this1[(this1[0] | 0) * 6 + 1 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 1 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx = function(this1) {
	return this1[(this1[0] | 0) * 6 + 3 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 3 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by = function(this1) {
	return this1[(this1[0] | 0) * 6 + 4 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 4 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx = function(this1) {
	return this1[(this1[0] | 0) * 6 + 6 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 6 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy = function(this1) {
	return this1[(this1[0] | 0) * 6 + 7 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 7 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.triangle = function(this1,ax_,ay_,bx_,by_,cx_,cy_) {
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,ax_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,ay_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,bx_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,by_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,cx_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,cy_);
	var windingAdjusted = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.adjustWinding(this1);
	if(windingAdjusted) {
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,ax_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,ay_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,cx_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,cy_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,bx_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,by_);
	}
	return windingAdjusted;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.adjustWinding = function(this1) {
	return geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1) - geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) + (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1) - geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1)) + (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) - geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1)) > 0;
};
var geom_move_Axis3 = function() {
	this.tz = new geom_move_Parameter();
	this.ty = new geom_move_Parameter();
	this.tx = new geom_move_Parameter();
	this.rz = new geom_move_Parameter();
	this.ry = new geom_move_Parameter();
	this.rx = new geom_move_Parameter();
};
geom_move_Axis3.__name__ = true;
geom_move_Axis3.prototype = {
	updateCalculate: function(q) {
		var rotations = this.rx.trinary.changed || this.ry.trinary.changed || this.rz.trinary.changed;
		var translations = this.tx.trinary.changed || this.ty.trinary.changed || this.tz.trinary.changed;
		if(translations || rotations) {
			var qReal;
			if(rotations) {
				var n9 = this.rz.value * 0.5;
				var n6 = Math.sin(n9);
				var n5 = Math.cos(n9);
				var n8 = this.rx.value * 0.5;
				var n4 = Math.sin(n8);
				var n3 = Math.cos(n8);
				var n7 = this.ry.value * 0.5;
				var n2 = Math.sin(n7);
				var n1 = Math.cos(n7);
				var this1 = new geom_structure_Mat1x4(n1 * n4 * n5 + n2 * n3 * n6,n2 * n3 * n5 - n1 * n4 * n6,n1 * n3 * n6 - n2 * n4 * n5,n1 * n3 * n5 + n2 * n4 * n6);
				qReal = this1;
			} else {
				var this2 = new geom_structure_Mat1x4(0.,0.,0.,1.);
				qReal = this2;
			}
			var qDual;
			if(translations) {
				var this3 = new geom_structure_Mat1x4(this.tx.value,this.ty.value,this.tz.value,1.);
				qDual = this3;
			} else {
				var this4 = new geom_structure_Mat1x4(0.,0.,0.,0.);
				qDual = this4;
			}
			var currentLength = Math.sqrt(qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w);
			if(currentLength != 0.) {
				var mul = 1. / currentLength;
				qReal.x *= mul;
				qReal.y *= mul;
				qReal.z *= mul;
				qReal.w *= mul;
				var real = qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w;
			}
			var real1 = qReal;
			var this5 = new geom_structure_Mat1x4(qDual.x,qDual.y,qDual.z,0.);
			var q1 = this5;
			var this6 = new geom_structure_Mat1x4(q1.x * 0.5,q1.y * 0.5,q1.z * 0.5,q1.w * 0.5);
			q1 = this6;
			var this7 = new geom_structure_Mat1x4(q1.x * real1.w + q1.y * real1.z - q1.z * real1.y + q1.w * real1.x,-q1.x * real1.z + q1.y * real1.w + q1.z * real1.x + q1.w * real1.y,q1.x * real1.y - q1.y * real1.x + q1.z * real1.w + q1.w * real1.z,-q1.x * real1.x - q1.y * real1.y - q1.z * real1.z + q1.w * real1.w);
			var dual = this7;
			var this8 = new geom_structure_DualQ(real1,dual);
			var dualQuaternion = this8;
			var q11 = q.real;
			var q2 = dualQuaternion.real;
			var this9 = new geom_structure_Mat1x4(q11.x * q2.w + q11.y * q2.z - q11.z * q2.y + q11.w * q2.x,-q11.x * q2.z + q11.y * q2.w + q11.z * q2.x + q11.w * q2.y,q11.x * q2.y - q11.y * q2.x + q11.z * q2.w + q11.w * q2.z,-q11.x * q2.x - q11.y * q2.y - q11.z * q2.z + q11.w * q2.w);
			var q12 = q.dual;
			var q21 = dualQuaternion.real;
			var this10 = new geom_structure_Mat1x4(q12.x * q21.w + q12.y * q21.z - q12.z * q21.y + q12.w * q21.x,-q12.x * q21.z + q12.y * q21.w + q12.z * q21.x + q12.w * q21.y,q12.x * q21.y - q12.y * q21.x + q12.z * q21.w + q12.w * q21.z,-q12.x * q21.x - q12.y * q21.y - q12.z * q21.z + q12.w * q21.w);
			var a = this10;
			var q13 = dualQuaternion.dual;
			var q22 = q.real;
			var this11 = new geom_structure_Mat1x4(q13.x * q22.w + q13.y * q22.z - q13.z * q22.y + q13.w * q22.x,-q13.x * q22.z + q13.y * q22.w + q13.z * q22.x + q13.w * q22.y,q13.x * q22.y - q13.y * q22.x + q13.z * q22.w + q13.w * q22.z,-q13.x * q22.x - q13.y * q22.y - q13.z * q22.z + q13.w * q22.w);
			var b = this11;
			var this12 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
			var this13 = new geom_structure_DualQ(this9,this12);
			return this13;
		} else {
			return q;
		}
	}
};
var geom_move_Parameter = function() {
	this.trinary = new geom_move_Trinary(0.);
	this.value = 0.;
	this.step = 0.005;
};
geom_move_Parameter.__name__ = true;
var geom_move_Trinary = function(v) {
	this.changed = false;
	this.set_trit(v);
};
geom_move_Trinary.__name__ = true;
geom_move_Trinary.prototype = {
	set_trit: function(v) {
		if(this.get_trit() == v) {
			this.changed = false;
		} else {
			this.trit = v;
			this.changed = true;
		}
		return v;
	}
	,get_trit: function() {
		return this.trit;
	}
};
var geom_structure_DualQ = function(real,dual) {
	this.real = real;
	this.dual = dual;
};
geom_structure_DualQ.__name__ = true;
var geom_structure_Mat1x2 = function(x,y) {
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
};
geom_structure_Mat1x2.__name__ = true;
var geom_structure_Mat1x3 = function() { };
geom_structure_Mat1x3.__name__ = true;
var geom_structure_Mat1x4 = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	this.w = 1.;
	this.z = 0.;
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
geom_structure_Mat1x4.__name__ = true;
var geom_structure_Mat2x2 = function() { };
geom_structure_Mat2x2.__name__ = true;
var geom_structure_Mat3x3 = function() { };
geom_structure_Mat3x3.__name__ = true;
var geom_structure_Mat4x3 = function(a,b,c,d,e,f,g,h,i,j,k,l) {
	this.l = 0.;
	this.k = 0.;
	this.j = 0.;
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
	this.j = j;
	this.k = k;
	this.l = l;
};
geom_structure_Mat4x3.__name__ = true;
var geom_structure_Mat4x4 = function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) {
	this.p = 0.;
	this.o = 0.;
	this.n = 0.;
	this.m = 0.;
	this.l = 0.;
	this.k = 0.;
	this.j = 0.;
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
	this.j = j;
	this.k = k;
	this.l = l;
	this.m = m;
	this.n = n;
	this.o = o;
	this.p = p;
};
geom_structure_Mat4x4.__name__ = true;
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
var htmlHelper_tools_AnimateTimer = function() { };
htmlHelper_tools_AnimateTimer.__name__ = true;
htmlHelper_tools_AnimateTimer.loop = function(tim) {
	window.requestAnimationFrame(htmlHelper_tools_AnimateTimer.loop);
	if(htmlHelper_tools_AnimateTimer.onFrame != null) {
		htmlHelper_tools_AnimateTimer.onFrame(htmlHelper_tools_AnimateTimer.counter);
	}
	htmlHelper_tools_AnimateTimer.counter++;
	return true;
};
var htmlHelper_tools_CharacterInput = function() {
	this.controlDown = false;
	this.spaceDown = false;
	this.cmdDown = false;
	this.altDown = false;
	this.tabDown = false;
	this.deleteDown = false;
	this.enterDown = false;
	this.shiftDown = false;
	this.upDown = false;
	this.downDown = false;
	this.rightDown = false;
	this.leftDown = false;
	var _gthis = this;
	window.document.onkeydown = $bind(this,this.keyDown);
	window.document.onkeyup = $bind(this,this.keyUp);
	this.navSignal = function() {
		haxe_Log.trace(_gthis.navDown(),{ fileName : "htmlHelper/tools/CharacterInput.hx", lineNumber : 26, className : "htmlHelper.tools.CharacterInput", methodName : "new"});
	};
	this.commandSignal = function() {
		haxe_Log.trace(_gthis.commandDown(),{ fileName : "htmlHelper/tools/CharacterInput.hx", lineNumber : 27, className : "htmlHelper.tools.CharacterInput", methodName : "new"});
	};
	this.letterSignal = function(s) {
		haxe_Log.trace("letter pressed " + s,{ fileName : "htmlHelper/tools/CharacterInput.hx", lineNumber : 28, className : "htmlHelper.tools.CharacterInput", methodName : "new"});
	};
};
htmlHelper_tools_CharacterInput.__name__ = true;
htmlHelper_tools_CharacterInput.prototype = {
	navDown: function() {
		var str = "";
		if(this.leftDown) {
			str += "left,";
		}
		if(this.rightDown) {
			str += "right,";
		}
		if(this.downDown) {
			str += "down,";
		}
		if(this.upDown) {
			str += "up,";
		}
		return str;
	}
	,commandDown: function() {
		var str = "";
		if(this.shiftDown) {
			str += "shift,";
		}
		if(this.enterDown) {
			str += "enter,";
		}
		if(this.tabDown) {
			str += "tab,";
		}
		if(this.altDown) {
			str += "alt,";
		}
		if(this.cmdDown) {
			str += "cmd,";
		}
		if(this.spaceDown) {
			str += "space,";
		}
		if(this.controlDown) {
			str += "control,";
		}
		if(this.deleteDown) {
			str += "delete";
		}
		return str;
	}
	,keyDown: function(e) {
		e.preventDefault();
		var keyCode = e.keyCode;
		switch(keyCode) {
		case 8:
			this.deleteDown = true;
			this.commandSignal();
			break;
		case 9:
			this.tabDown = true;
			this.commandSignal();
			break;
		case 13:
			this.enterDown = true;
			this.commandSignal();
			break;
		case 16:
			this.shiftDown = true;
			this.commandSignal();
			break;
		case 17:
			this.controlDown = true;
			this.commandSignal();
			break;
		case 18:
			this.altDown = true;
			this.commandSignal();
			break;
		case 32:
			this.spaceDown = true;
			this.commandSignal();
			break;
		case 37:
			this.leftDown = true;
			this.navSignal();
			break;
		case 38:
			this.upDown = true;
			this.navSignal();
			break;
		case 39:
			this.rightDown = true;
			this.navSignal();
			break;
		case 40:
			this.downDown = true;
			this.navSignal();
			break;
		case 224:
			this.cmdDown = true;
			this.commandSignal();
			break;
		default:
			if(e.key != null) {
				this.letterSignal(e.key);
			}
		}
	}
	,keyUp: function(e) {
		e.preventDefault();
		var keyCode = e.keyCode;
		switch(keyCode) {
		case 8:
			this.deleteDown = false;
			this.commandSignal();
			break;
		case 9:
			this.tabDown = false;
			this.commandSignal();
			break;
		case 13:
			this.enterDown = false;
			this.commandSignal();
			break;
		case 16:
			this.shiftDown = false;
			this.commandSignal();
			break;
		case 17:
			this.controlDown = false;
			this.commandSignal();
			break;
		case 18:
			this.altDown = false;
			this.commandSignal();
			break;
		case 32:
			this.spaceDown = false;
			this.commandSignal();
			break;
		case 37:
			this.leftDown = false;
			this.navSignal();
			break;
		case 38:
			this.upDown = false;
			this.navSignal();
			break;
		case 39:
			this.rightDown = false;
			this.navSignal();
			break;
		case 40:
			this.downDown = false;
			this.navSignal();
			break;
		case 224:
			this.cmdDown = false;
			this.commandSignal();
			break;
		default:
		}
	}
};
var htmlHelper_tools_DivertTrace = function(left,d) {
	if(left == null) {
		left = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	this.divertTrace(left,d);
};
htmlHelper_tools_DivertTrace.__name__ = true;
htmlHelper_tools_DivertTrace.prototype = {
	divertTrace: function(left,d) {
		if(d == null) {
			var doc = window.document;
			this.traceDiv = doc.createElement("div");
			doc.body.appendChild(this.traceDiv);
			var dom = this.traceDiv;
			var style = dom.style;
			style.position = "absolute";
			style.top = "0px";
			style.left = (left == null ? "null" : "" + left) + "px";
			style.height = "500px";
			style.width = "500px";
			style.zIndex = "99";
			style.overflow = "auto";
		} else {
			this.traceDiv = d;
		}
		haxe_Log.trace = $bind(this,this.myTrace);
	}
	,myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
};
var hxGeomAlgo_HomogCoord = function(x,y,w) {
	if(w == null) {
		w = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.w = w;
};
hxGeomAlgo_HomogCoord.__name__ = true;
var hxGeomAlgo_HxPointData = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
hxGeomAlgo_HxPointData.__name__ = true;
var hxGeomAlgo__$HxPoint_HxPoint_$Impl_$ = $hx_exports["hxGeomAlgo"]["_HxPoint"]["HxPoint_Impl_"] = {};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.__name__ = true;
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.get_x = function(this1) {
	return this1.x;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.set_x = function(this1,value) {
	return this1.x = value;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.get_y = function(this1) {
	return this1.y;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.set_y = function(this1,value) {
	return this1.y = value;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new hxGeomAlgo_HxPointData(x,y);
	return this1;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.setTo = function(this1,newX,newY) {
	this1.x = newX;
	this1.y = newY;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.equals = function(this1,p) {
	if(p != null && this1.x == p.x) {
		return this1.y == p.y;
	} else {
		return false;
	}
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.clone = function(this1) {
	return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(this1.x,this1.y);
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.toString = function(this1) {
	return "(" + this1.x + ", " + this1.y + ")";
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.fromPointStruct = function(p) {
	return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(p.x,p.y);
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.toPointStruct = function(this1) {
	return { x : this1.x, y : this1.y};
};
var hxGeomAlgo_PolyTools = $hx_exports["hxGeomAlgo"]["PolyTools"] = function() { };
hxGeomAlgo_PolyTools.__name__ = true;
hxGeomAlgo_PolyTools.isCCW = function(poly) {
	if(poly.length <= 2) {
		return true;
	}
	var signedArea = 0.;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var idx = i - 1;
		var idx1 = idx;
		var len = poly.length;
		if(idx1 < 0) {
			idx1 += len;
		}
		idx = idx1 % len;
		var idx2 = i - 1;
		var idx3 = idx2;
		var len1 = poly.length;
		if(idx3 < 0) {
			idx3 += len1;
		}
		idx2 = idx3 % len1;
		signedArea += poly[idx].x * poly[i].y - poly[i].x * poly[idx2].y;
	}
	return signedArea < 0;
};
hxGeomAlgo_PolyTools.isCW = function(poly) {
	if(poly.length <= 2) {
		return true;
	}
	var signedArea = 0.;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var idx = i - 1;
		var idx1 = idx;
		var len = poly.length;
		if(idx1 < 0) {
			idx1 += len;
		}
		idx = idx1 % len;
		var idx2 = i - 1;
		var idx3 = idx2;
		var len1 = poly.length;
		if(idx3 < 0) {
			idx3 += len1;
		}
		idx2 = idx3 % len1;
		signedArea += poly[idx].x * poly[i].y - poly[i].x * poly[idx2].y;
	}
	return signedArea > 0;
};
hxGeomAlgo_PolyTools.makeCCW = function(poly) {
	var reversed = false;
	if(!hxGeomAlgo_PolyTools.isCCW(poly)) {
		poly.reverse();
		reversed = true;
	}
	return reversed;
};
hxGeomAlgo_PolyTools.makeCW = function(poly) {
	var reversed = false;
	if(hxGeomAlgo_PolyTools.isCCW(poly)) {
		poly.reverse();
		reversed = true;
	}
	return reversed;
};
hxGeomAlgo_PolyTools.isConvex = function(poly) {
	var isPositive = null;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var lower = i == 0 ? poly.length - 1 : i - 1;
		var middle = i;
		var upper = i == poly.length - 1 ? 0 : i + 1;
		var dx0 = poly[middle].x - poly[lower].x;
		var dy0 = poly[middle].y - poly[lower].y;
		var dx1 = poly[upper].x - poly[middle].x;
		var dy1 = poly[upper].y - poly[middle].y;
		var cross = dx0 * dy1 - dx1 * dy0;
		var newIsPositive = cross > 0;
		if(cross == 0) {
			continue;
		}
		if(isPositive == null) {
			isPositive = newIsPositive;
		} else if(isPositive != newIsPositive) {
			return false;
		}
	}
	return true;
};
hxGeomAlgo_PolyTools.isSimple = function(poly) {
	var len = poly.length;
	if(len <= 3) {
		return true;
	}
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var p0 = i;
		var p1 = i == len - 1 ? 0 : i + 1;
		var _g2 = i + 1;
		var _g11 = len;
		while(_g2 < _g11) {
			var j = _g2++;
			var q0 = j;
			var q1 = j == len - 1 ? 0 : j + 1;
			var intersection = hxGeomAlgo_PolyTools.segmentIntersect(poly[p0],poly[p1],poly[q0],poly[q1]);
			var tmp;
			var tmp1;
			if(intersection != null) {
				var tmp2;
				var w = poly[p0];
				var x = intersection.x - w.x;
				var x1 = intersection.y - w.y;
				if(!(Math.sqrt(x * x + x1 * x1) < hxGeomAlgo_PolyTools.EPSILON)) {
					var w1 = poly[p1];
					var x2 = intersection.x - w1.x;
					var x3 = intersection.y - w1.y;
					tmp2 = Math.sqrt(x2 * x2 + x3 * x3) < hxGeomAlgo_PolyTools.EPSILON;
				} else {
					tmp2 = true;
				}
				tmp1 = !tmp2;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var tmp3;
				var w2 = poly[q0];
				var x4 = intersection.x - w2.x;
				var x5 = intersection.y - w2.y;
				if(!(Math.sqrt(x4 * x4 + x5 * x5) < hxGeomAlgo_PolyTools.EPSILON)) {
					var w3 = poly[q1];
					var x6 = intersection.x - w3.x;
					var x7 = intersection.y - w3.y;
					tmp3 = Math.sqrt(x6 * x6 + x7 * x7) < hxGeomAlgo_PolyTools.EPSILON;
				} else {
					tmp3 = true;
				}
				tmp = !tmp3;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
		}
	}
	return true;
};
hxGeomAlgo_PolyTools.segmentIntersect = function(p0,p1,q0,q1) {
	var a1 = p1.y - p0.y;
	var b1 = p0.x - p1.x;
	var c1 = p1.x * p0.y - p0.x * p1.y;
	var a2 = q1.y - q0.y;
	var b2 = q0.x - q1.x;
	var c2 = q1.x * q0.y - q0.x * q1.y;
	var denom = a1 * b2 - a2 * b1;
	if(denom == 0) {
		return null;
	}
	var intersectionPoint = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	intersectionPoint.x = (b1 * c2 - b2 * c1) / denom;
	intersectionPoint.y = (a2 * c1 - a1 * c2) / denom;
	var x = p0.x - p1.x;
	var x1 = p0.y - p1.y;
	var p0p1 = x * x + x1 * x1;
	var x2 = q0.x - q1.x;
	var x3 = q0.y - q1.y;
	var q0q1 = x2 * x2 + x3 * x3;
	var x4 = intersectionPoint.x - p1.x;
	var x5 = intersectionPoint.y - p1.y;
	if(x4 * x4 + x5 * x5 > p0p1) {
		return null;
	}
	var x6 = intersectionPoint.x - p0.x;
	var x7 = intersectionPoint.y - p0.y;
	if(x6 * x6 + x7 * x7 > p0p1) {
		return null;
	}
	var x8 = intersectionPoint.x - q1.x;
	var x9 = intersectionPoint.y - q1.y;
	if(x8 * x8 + x9 * x9 > q0q1) {
		return null;
	}
	var x10 = intersectionPoint.x - q0.x;
	var x11 = intersectionPoint.y - q0.y;
	if(x10 * x10 + x11 * x11 > q0q1) {
		return null;
	}
	return intersectionPoint;
};
hxGeomAlgo_PolyTools.findDuplicatePoints = function(poly,consecutiveOnly,wrapAround) {
	if(wrapAround == null) {
		wrapAround = true;
	}
	if(consecutiveOnly == null) {
		consecutiveOnly = true;
	}
	var len = poly.length;
	if(len <= 1) {
		return [];
	}
	var dupIndices = [];
	var _g = 0;
	var _g1 = len - 1;
	while(_g < _g1) {
		var i = _g++;
		var j = i + 1;
		while(j < len) {
			var this1 = poly[i];
			var p = poly[j];
			var foundDup = p != null && this1.x == p.x && this1.y == p.y;
			if(foundDup) {
				dupIndices.push(i);
			}
			if(consecutiveOnly || foundDup && !consecutiveOnly) {
				break;
			}
			++j;
		}
	}
	var tmp;
	if(wrapAround && consecutiveOnly) {
		var this2 = poly[0];
		var p1 = poly[len - 1];
		tmp = p1 != null && this2.x == p1.x && this2.y == p1.y;
	} else {
		tmp = false;
	}
	if(tmp) {
		dupIndices.push(len - 1);
	}
	return dupIndices;
};
hxGeomAlgo_PolyTools.intersection = function(p1,p2,q1,q2) {
	var res = null;
	var a1 = p2.y - p1.y;
	var b1 = p1.x - p2.x;
	var c1 = a1 * p1.x + b1 * p1.y;
	var a2 = q2.y - q1.y;
	var b2 = q1.x - q2.x;
	var c2 = a2 * q1.x + b2 * q1.y;
	var det = a1 * b2 - a2 * b1;
	if(!(Math.abs(det) <= hxGeomAlgo_PolyTools.EPSILON)) {
		res = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
		res.x = (b2 * c1 - b1 * c2) / det;
		res.y = (a1 * c2 - a2 * c1) / det;
	}
	return res;
};
hxGeomAlgo_PolyTools.isReflex = function(poly,idx) {
	var idx1 = idx - 1;
	var idx2 = idx1;
	var len = poly.length;
	if(idx2 < 0) {
		idx2 += len;
	}
	idx1 = idx2 % len;
	var p = poly[idx1];
	var idx3 = idx;
	var idx4 = idx3;
	var len1 = poly.length;
	if(idx4 < 0) {
		idx4 += len1;
	}
	idx3 = idx4 % len1;
	var a = poly[idx3];
	var idx5 = idx + 1;
	var idx6 = idx5;
	var len2 = poly.length;
	if(idx6 < 0) {
		idx6 += len2;
	}
	idx5 = idx6 % len2;
	var b = poly[idx5];
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) < 0;
};
hxGeomAlgo_PolyTools.at = function(poly,idx) {
	var idx1 = idx;
	var len = poly.length;
	if(idx1 < 0) {
		idx1 += len;
	}
	idx = idx1 % len;
	return poly[idx];
};
hxGeomAlgo_PolyTools.wrappedIdx = function(poly,idx) {
	var len = poly.length;
	if(idx < 0) {
		idx += len;
	}
	return idx % len;
};
hxGeomAlgo_PolyTools.side = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y);
};
hxGeomAlgo_PolyTools.isLeft = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) > 0;
};
hxGeomAlgo_PolyTools.isLeftOrOn = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) >= 0;
};
hxGeomAlgo_PolyTools.isRight = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) < 0;
};
hxGeomAlgo_PolyTools.isRightOrOn = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) <= 0;
};
hxGeomAlgo_PolyTools.isCollinear = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) == 0;
};
hxGeomAlgo_PolyTools.distance = function(v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	return Math.sqrt(x * x + x1 * x1);
};
hxGeomAlgo_PolyTools.distanceToSegment = function(p,v,w) {
	return Math.sqrt(hxGeomAlgo_PolyTools.distanceToSegmentSquared(p,v,w));
};
hxGeomAlgo_PolyTools.distanceSquared = function(v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	return x * x + x1 * x1;
};
hxGeomAlgo_PolyTools.distanceToSegmentSquared = function(p,v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	var l2 = x * x + x1 * x1;
	if(l2 == 0) {
		var x2 = p.x - v.x;
		var x3 = p.y - v.y;
		return x2 * x2 + x3 * x3;
	}
	var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;
	if(t < 0) {
		var x4 = p.x - v.x;
		var x5 = p.y - v.y;
		return x4 * x4 + x5 * x5;
	}
	if(t > 1) {
		var x6 = p.x - w.x;
		var x7 = p.y - w.y;
		return x6 * x6 + x7 * x7;
	}
	hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.setTo(hxGeomAlgo_PolyTools.point,v.x + t * (w.x - v.x),v.y + t * (w.y - v.y));
	var w1 = hxGeomAlgo_PolyTools.point;
	var x8 = p.x - w1.x;
	var x9 = p.y - w1.y;
	return x8 * x8 + x9 * x9;
};
hxGeomAlgo_PolyTools.getCentroid = function(poly) {
	var c = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	var area = hxGeomAlgo_PolyTools.getArea(poly);
	if(area != 0) {
		var len = poly.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var p0 = poly[i];
			var p1 = poly[(i + 1) % len];
			var m = p0.x * p1.y - p1.x * p0.y;
			c.x += (p0.x + p1.x) * m;
			c.y += (p0.y + p1.y) * m;
		}
		c.x /= 6 * area;
		c.y /= 6 * area;
	} else {
		c = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.EMPTY;
	}
	return c;
};
hxGeomAlgo_PolyTools.getArea = function(poly) {
	var area = 0.0;
	var len = poly.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var p0 = poly[i];
		var p1 = poly[(i + 1) % len];
		area += p0.x * p1.y - p1.x * p0.y;
	}
	area = .5 * area;
	return area;
};
hxGeomAlgo_PolyTools.meet = function(p,q) {
	return new hxGeomAlgo_HomogCoord(p.y - q.y,q.x - p.x,p.x * q.y - p.y * q.x);
};
hxGeomAlgo_PolyTools.dot = function(p,q) {
	return p.x * q.x + p.y * q.y;
};
hxGeomAlgo_PolyTools.sqr = function(x) {
	return x * x;
};
hxGeomAlgo_PolyTools.eq = function(a,b) {
	return Math.abs(a - b) <= hxGeomAlgo_PolyTools.EPSILON;
};
hxGeomAlgo_PolyTools.clear = function(array) {
	array.length = 0;
};
hxGeomAlgo_PolyTools.toFloatArray = function(poly,out) {
	out = out != null ? out : [];
	var _g = 0;
	while(_g < poly.length) {
		var p = poly[_g];
		++_g;
		out.push(p.x);
		out.push(p.y);
	}
	return out;
};
hxGeomAlgo_PolyTools.reverseFloatArray = function(poly,inPlace) {
	if(inPlace == null) {
		inPlace = false;
	}
	var res = inPlace ? poly : [];
	var nPoints = poly.length >> 1;
	var _g = 0;
	var _g1 = nPoints;
	while(_g < _g1) {
		var i = _g++;
		var xPos = (nPoints - i - 1) * 2;
		res[i * 2] = poly[xPos];
		res[i * 2 + 1] = poly[xPos + 1];
	}
	return res;
};
hxGeomAlgo_PolyTools.flatten = function(array,out) {
	var res = out != null ? out : [];
	var _g = 0;
	while(_g < array.length) {
		var arr = array[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var item = arr[_g1];
			++_g1;
			res.push(item);
		}
	}
	return res;
};
hxGeomAlgo_PolyTools.toPointArray = function(poly,out) {
	out = out != null ? out : [];
	var size = poly.length;
	if(poly.length % 2 == 1) {
		--size;
	}
	var _g = 0;
	var _g1 = size >> 1;
	while(_g < _g1) {
		var i = _g++;
		out.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(poly[i * 2],poly[i * 2 + 1]));
	}
	return out;
};
hxGeomAlgo_PolyTools.inflateLine = function(start,end,thickness) {
	var halfWidth = thickness / 2;
	var dx = end.x - start.x;
	var dy = end.y - start.y;
	var len = Math.sqrt(dx * dx + dy * dy);
	var nx = dx / len * halfWidth;
	var ny = dy / len * halfWidth;
	return [hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(start.x - ny,start.y + nx),hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(end.x - ny,end.y + nx),hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(end.x + ny,end.y - nx),hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(start.x + ny,start.y - nx)];
};
hxGeomAlgo_PolyTools.clip = function(subjPoly,clipPoly) {
	var cond = clipPoly.length >= 3 && hxGeomAlgo_PolyTools.isConvex(clipPoly);
	var res = [];
	var output = subjPoly;
	var isInside = hxGeomAlgo_PolyTools.isCCW(clipPoly) ? hxGeomAlgo_PolyTools.isRight : hxGeomAlgo_PolyTools.isLeft;
	var clipEdgeStart;
	var clipEdgeEnd;
	var inputEdgeStart;
	var inputEdgeEnd;
	var clipLen = clipPoly.length;
	var i = 0;
	var _g = 0;
	var _g1 = clipLen;
	while(_g < _g1) {
		var i1 = _g++;
		clipEdgeStart = clipPoly[i1];
		var idx = i1 + 1;
		var len = clipPoly.length;
		if(idx < 0) {
			idx += len;
		}
		clipEdgeEnd = clipPoly[idx % len];
		var input = output;
		output = [];
		inputEdgeStart = input[input.length - 1];
		var _g2 = 0;
		var _g11 = input.length;
		while(_g2 < _g11) {
			var j = _g2++;
			inputEdgeEnd = input[j];
			if(isInside(inputEdgeEnd,clipEdgeStart,clipEdgeEnd)) {
				if(!isInside(inputEdgeStart,clipEdgeStart,clipEdgeEnd)) {
					var intersectionPoint = hxGeomAlgo_PolyTools.intersection(inputEdgeStart,inputEdgeEnd,clipEdgeStart,clipEdgeEnd);
					if(intersectionPoint != null) {
						output.push(intersectionPoint);
					}
				}
				output.push(inputEdgeEnd);
			} else if(isInside(inputEdgeStart,clipEdgeStart,clipEdgeEnd)) {
				var intersectionPoint1 = hxGeomAlgo_PolyTools.intersection(inputEdgeStart,inputEdgeEnd,clipEdgeStart,clipEdgeEnd);
				if(intersectionPoint1 != null) {
					output.push(intersectionPoint1);
				}
			}
			inputEdgeStart = inputEdgeEnd;
		}
		res.push(output);
	}
	return res;
};
hxGeomAlgo_PolyTools.exposeEnum = function(enumClass,as) {
	var dotPath = (as != null ? as : enumClass.__ename__).split(".");
	var exports = $hx_exports;
	var i = 0;
	while(i < dotPath.length - 1) {
		var currPath = dotPath[i];
		exports[currPath] = exports[currPath] || { };
		exports = exports[currPath];
		++i;
	}
	exports[dotPath[i]] = enumClass;
};
var hxGeomAlgo_WindingRule = $hxEnums["hxGeomAlgo.WindingRule"] = { __ename__ : "hxGeomAlgo.WindingRule", __constructs__ : ["ODD","NON_ZERO","POSITIVE","NEGATIVE","ABS_GEQ_TWO"]
	,ODD: {_hx_index:0,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,NON_ZERO: {_hx_index:1,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,POSITIVE: {_hx_index:2,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,NEGATIVE: {_hx_index:3,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,ABS_GEQ_TWO: {_hx_index:4,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
};
var hxGeomAlgo_ResultType = $hxEnums["hxGeomAlgo.ResultType"] = { __ename__ : "hxGeomAlgo.ResultType", __constructs__ : ["POLYGONS","CONNECTED_POLYGONS","BOUNDARY_CONTOURS","EXPERIMENTAL_DELAUNAY"]
	,POLYGONS: {_hx_index:0,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,CONNECTED_POLYGONS: {_hx_index:1,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,BOUNDARY_CONTOURS: {_hx_index:2,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,EXPERIMENTAL_DELAUNAY: {_hx_index:3,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
};
var hxGeomAlgo_Tess2 = $hx_exports["hxGeomAlgo"]["Tess2"] = function() { };
hxGeomAlgo_Tess2.__name__ = true;
hxGeomAlgo_Tess2.tesselate = function(contours,windingRule,resultType,polySize,vertexDim,normal) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var tess = new hxGeomAlgo_Tesselator();
	var _g = 0;
	var _g1 = contours.length;
	while(_g < _g1) {
		var i = _g++;
		tess.addContour(vertexDim,contours[i]);
	}
	tess.tesselate(windingRule == null ? hxGeomAlgo_WindingRule.ODD : windingRule,resultType == null ? hxGeomAlgo_ResultType.POLYGONS : resultType,polySize,vertexDim,normal == null ? [0,0,1] : normal);
	return { vertices : tess.vertices, vertexIndices : tess.vertexIndices, vertexCount : tess.vertexCount, elements : tess.elements, elementCount : tess.elementCount};
};
hxGeomAlgo_Tess2.union = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var contours = contoursA.concat(contoursB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.NON_ZERO,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.intersection = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var contours = contoursA.concat(contoursB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.ABS_GEQ_TWO,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.difference = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < contoursB.length) {
		var poly = contoursB[_g1];
		++_g1;
		_g.push(hxGeomAlgo_PolyTools.reverseFloatArray(poly));
	}
	var diffB = _g;
	var contours = contoursA.concat(diffB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.POSITIVE,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.convertResult = function(vertices,elements,resultType,polySize,out) {
	out = out != null ? out : [];
	var tmp = resultType._hx_index != 2;
	var i = 0;
	switch(resultType._hx_index) {
	case 0:case 3:
		while(i < elements.length) {
			var poly = [];
			var _g = 0;
			var _g1 = polySize;
			while(_g < _g1) {
				var j = _g++;
				var idx = elements[i + j];
				if(idx == -1) {
					continue;
				}
				poly.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(vertices[idx * 2],vertices[idx * 2 + 1]));
			}
			out.push(poly);
			i += polySize;
		}
		break;
	case 1:
		while(i < elements.length) {
			var poly1 = [];
			var _g2 = 0;
			var _g11 = polySize;
			while(_g2 < _g11) {
				var j1 = _g2++;
				var idx1 = elements[i + j1];
				if(idx1 == -1) {
					continue;
				}
				poly1.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(vertices[idx1 * 2],vertices[idx1 * 2 + 1]));
			}
			out.push(poly1);
			i += polySize * 2;
		}
		break;
	case 2:
		while(i < elements.length) {
			var poly2 = [];
			var start = elements[i];
			var count = elements[i + 1];
			var _g3 = 0;
			var _g12 = count;
			while(_g3 < _g12) {
				var j2 = _g3++;
				var idx2 = start + j2;
				poly2.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(vertices[idx2 * 2],vertices[idx2 * 2 + 1]));
			}
			out.push(poly2);
			i += 2;
		}
		break;
	}
	return out;
};
var hxGeomAlgo__$Tess2_TessVertex = function() {
	this.idx = 0;
	this.n = 0;
	this.pqHandle = 0;
	this.t = 0.0;
	this.s = 0.0;
	this.coords = [0,0,0];
	this.anEdge = null;
	this.prev = null;
	this.next = null;
};
hxGeomAlgo__$Tess2_TessVertex.__name__ = true;
var hxGeomAlgo__$Tess2_TessFace = function() {
	this.inside = false;
	this.marked = false;
	this.n = 0;
	this.trail = null;
	this.anEdge = null;
	this.prev = null;
	this.next = null;
};
hxGeomAlgo__$Tess2_TessFace.__name__ = true;
var hxGeomAlgo__$Tess2_TessHalfEdge = function(side) {
	this.winding = 0;
	this.activeRegion = null;
	this.Lface = null;
	this.Org = null;
	this.Lnext = null;
	this.Onext = null;
	this.Sym = null;
	this.next = null;
	this.side = side;
};
hxGeomAlgo__$Tess2_TessHalfEdge.__name__ = true;
hxGeomAlgo__$Tess2_TessHalfEdge.prototype = {
	get_Rface: function() {
		return this.Sym.Lface;
	}
	,set_Rface: function(v) {
		return this.Sym.Lface = v;
	}
	,get_Dst: function() {
		return this.Sym.Org;
	}
	,set_Dst: function(v) {
		return this.Sym.Org = v;
	}
	,get_Oprev: function() {
		return this.Sym.Lnext;
	}
	,get_Lprev: function() {
		return this.Onext.Sym;
	}
	,get_Rprev: function() {
		return this.Sym.Onext;
	}
	,get_Dnext: function() {
		return this.Sym.Onext.Sym;
	}
};
var hxGeomAlgo__$Tess2_TessMesh = function() {
	this.eSym = new hxGeomAlgo__$Tess2_TessHalfEdge(1);
	this.e = new hxGeomAlgo__$Tess2_TessHalfEdge(0);
	this.f = new hxGeomAlgo__$Tess2_TessFace();
	this.v = new hxGeomAlgo__$Tess2_TessVertex();
	this.v.next = this.v.prev = this.v;
	this.v.anEdge = null;
	this.f.next = this.f.prev = this.f;
	this.f.anEdge = null;
	this.f.trail = null;
	this.f.marked = false;
	this.f.inside = false;
	this.e.next = this.e;
	this.e.Sym = this.eSym;
	this.e.Onext = null;
	this.e.Lnext = null;
	this.e.Org = null;
	this.e.Lface = null;
	this.e.winding = 0;
	this.e.activeRegion = null;
	this.e.mark = false;
	this.eSym.next = this.eSym;
	this.eSym.Sym = this.e;
	this.eSym.Onext = null;
	this.eSym.Lnext = null;
	this.eSym.Org = null;
	this.eSym.Lface = null;
	this.eSym.winding = 0;
	this.eSym.activeRegion = null;
	this.e.Sym.mark = false;
	this.vHead = this.v;
	this.fHead = this.f;
	this.eHead = this.e;
	this.eHeadSym = this.eSym;
};
hxGeomAlgo__$Tess2_TessMesh.__name__ = true;
hxGeomAlgo__$Tess2_TessMesh.flipEdge = function(mesh,edge) {
	var a0 = edge;
	var a1 = a0.Lnext;
	var a2 = a1.Lnext;
	var b0 = edge.Sym;
	var b1 = b0.Lnext;
	var b2 = b1.Lnext;
	var aOrg = a0.Org;
	var aOpp = a2.Org;
	var bOrg = b0.Org;
	var bOpp = b2.Org;
	var fa = a0.Lface;
	var fb = b0.Lface;
	var cond = hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edge);
	a0.Org = bOpp;
	a0.Onext = b1.Sym;
	b0.Org = aOpp;
	b0.Onext = a1.Sym;
	a2.Onext = b0;
	b2.Onext = a0;
	b1.Onext = a2.Sym;
	a1.Onext = b2.Sym;
	a0.Lnext = a2;
	a2.Lnext = b1;
	b1.Lnext = a0;
	b0.Lnext = b2;
	b2.Lnext = a1;
	a1.Lnext = b0;
	a1.Lface = fb;
	b1.Lface = fa;
	fa.anEdge = a0;
	fb.anEdge = b0;
	if(aOrg.anEdge == a0) {
		aOrg.anEdge = b1;
	}
	if(bOrg.anEdge == b0) {
		bOrg.anEdge = a1;
	}
	var cond1 = a0.get_Oprev().Onext.Org == a0.Org;
};
hxGeomAlgo__$Tess2_TessMesh.prototype = {
	makeEdge_: function(eNext) {
		var e = new hxGeomAlgo__$Tess2_TessHalfEdge(0);
		var eSym = new hxGeomAlgo__$Tess2_TessHalfEdge(1);
		if(eNext.Sym.side < eNext.side) {
			eNext = eNext.Sym;
		}
		var ePrev = eNext.Sym.next;
		eSym.next = ePrev;
		ePrev.Sym.next = e;
		e.next = eNext;
		eNext.Sym.next = eSym;
		e.Sym = eSym;
		e.Onext = e;
		e.Lnext = eSym;
		e.Org = null;
		e.Lface = null;
		e.winding = 0;
		e.activeRegion = null;
		eSym.Sym = e;
		eSym.Onext = eSym;
		eSym.Lnext = e;
		eSym.Org = null;
		eSym.Lface = null;
		eSym.winding = 0;
		eSym.activeRegion = null;
		return e;
	}
	,splice_: function(a,b) {
		var aOnext = a.Onext;
		var bOnext = b.Onext;
		aOnext.Sym.Lnext = b;
		bOnext.Sym.Lnext = a;
		a.Onext = bOnext;
		b.Onext = aOnext;
	}
	,makeVertex_: function(newVertex,eOrig,vNext) {
		var vNew = newVertex;
		var vPrev = vNext.prev;
		vNew.prev = vPrev;
		vPrev.next = vNew;
		vNew.next = vNext;
		vNext.prev = vNew;
		vNew.anEdge = eOrig;
		var e = eOrig;
		while(true) {
			e.Org = vNew;
			e = e.Onext;
			if(!(e != eOrig)) {
				break;
			}
		}
	}
	,makeFace_: function(newFace,eOrig,fNext) {
		var fNew = newFace;
		var fPrev = fNext.prev;
		fNew.prev = fPrev;
		fPrev.next = fNew;
		fNew.next = fNext;
		fNext.prev = fNew;
		fNew.anEdge = eOrig;
		fNew.trail = null;
		fNew.marked = false;
		fNew.inside = fNext.inside;
		var e = eOrig;
		while(true) {
			e.Lface = fNew;
			e = e.Lnext;
			if(!(e != eOrig)) {
				break;
			}
		}
	}
	,killEdge_: function(eDel) {
		if(eDel.Sym.side < eDel.side) {
			eDel = eDel.Sym;
		}
		var eNext = eDel.next;
		var ePrev = eDel.Sym.next;
		eNext.Sym.next = ePrev;
		ePrev.Sym.next = eNext;
	}
	,killVertex_: function(vDel,newOrg) {
		var eStart = vDel.anEdge;
		var e = eStart;
		while(true) {
			e.Org = newOrg;
			e = e.Onext;
			if(!(e != eStart)) {
				break;
			}
		}
		var vPrev = vDel.prev;
		var vNext = vDel.next;
		vNext.prev = vPrev;
		vPrev.next = vNext;
	}
	,killFace_: function(fDel,newLface) {
		var eStart = fDel.anEdge;
		var e = eStart;
		while(true) {
			e.Lface = newLface;
			e = e.Lnext;
			if(!(e != eStart)) {
				break;
			}
		}
		var fPrev = fDel.prev;
		var fNext = fDel.next;
		fNext.prev = fPrev;
		fPrev.next = fNext;
	}
	,makeEdge: function() {
		var newVertex1 = new hxGeomAlgo__$Tess2_TessVertex();
		var newVertex2 = new hxGeomAlgo__$Tess2_TessVertex();
		var newFace = new hxGeomAlgo__$Tess2_TessFace();
		var e = this.makeEdge_(this.eHead);
		this.makeVertex_(newVertex1,e,this.vHead);
		this.makeVertex_(newVertex2,e.Sym,this.vHead);
		this.makeFace_(newFace,e,this.fHead);
		return e;
	}
	,splice: function(eOrg,eDst) {
		var joiningLoops = false;
		var joiningVertices = false;
		if(eOrg == eDst) {
			return;
		}
		if(eDst.Org != eOrg.Org) {
			joiningVertices = true;
			this.killVertex_(eDst.Org,eOrg.Org);
		}
		if(eDst.Lface != eOrg.Lface) {
			joiningLoops = true;
			this.killFace_(eDst.Lface,eOrg.Lface);
		}
		this.splice_(eDst,eOrg);
		if(!joiningVertices) {
			var newVertex = new hxGeomAlgo__$Tess2_TessVertex();
			this.makeVertex_(newVertex,eDst,eOrg.Org);
			eOrg.Org.anEdge = eOrg;
		}
		if(!joiningLoops) {
			var newFace = new hxGeomAlgo__$Tess2_TessFace();
			this.makeFace_(newFace,eDst,eOrg.Lface);
			eOrg.Lface.anEdge = eOrg;
		}
	}
	,'delete': function(eDel) {
		var eDelSym = eDel.Sym;
		var joiningLoops = false;
		if(eDel.Lface != eDel.get_Rface()) {
			joiningLoops = true;
			this.killFace_(eDel.Lface,eDel.get_Rface());
		}
		if(eDel.Onext == eDel) {
			this.killVertex_(eDel.Org,null);
		} else {
			eDel.get_Rface().anEdge = eDel.get_Oprev();
			eDel.Org.anEdge = eDel.Onext;
			this.splice_(eDel,eDel.get_Oprev());
			if(!joiningLoops) {
				var newFace = new hxGeomAlgo__$Tess2_TessFace();
				this.makeFace_(newFace,eDel,eDel.Lface);
			}
		}
		if(eDelSym.Onext == eDelSym) {
			this.killVertex_(eDelSym.Org,null);
			this.killFace_(eDelSym.Lface,null);
		} else {
			eDel.Lface.anEdge = eDelSym.get_Oprev();
			eDelSym.Org.anEdge = eDelSym.Onext;
			this.splice_(eDelSym,eDelSym.get_Oprev());
		}
		this.killEdge_(eDel);
	}
	,addEdgeVertex: function(eOrg) {
		var eNew = this.makeEdge_(eOrg);
		var eNewSym = eNew.Sym;
		this.splice_(eNew,eOrg.Lnext);
		eNew.Org = eOrg.get_Dst();
		var newVertex = new hxGeomAlgo__$Tess2_TessVertex();
		this.makeVertex_(newVertex,eNewSym,eNew.Org);
		eNew.Lface = eNewSym.Lface = eOrg.Lface;
		return eNew;
	}
	,splitEdge: function(eOrg) {
		var tempHalfEdge = this.addEdgeVertex(eOrg);
		var eNew = tempHalfEdge.Sym;
		this.splice_(eOrg.Sym,eOrg.Sym.get_Oprev());
		this.splice_(eOrg.Sym,eNew);
		eOrg.set_Dst(eNew.Org);
		eNew.get_Dst().anEdge = eNew.Sym;
		eNew.set_Rface(eOrg.get_Rface());
		eNew.winding = eOrg.winding;
		eNew.Sym.winding = eOrg.Sym.winding;
		return eNew;
	}
	,connect: function(eOrg,eDst) {
		var joiningLoops = false;
		var eNew = this.makeEdge_(eOrg);
		var eNewSym = eNew.Sym;
		if(eDst.Lface != eOrg.Lface) {
			joiningLoops = true;
			this.killFace_(eDst.Lface,eOrg.Lface);
		}
		this.splice_(eNew,eOrg.Lnext);
		this.splice_(eNewSym,eDst);
		eNew.Org = eOrg.get_Dst();
		eNewSym.Org = eDst.Org;
		eNew.Lface = eNewSym.Lface = eOrg.Lface;
		eOrg.Lface.anEdge = eNewSym;
		if(!joiningLoops) {
			var newFace = new hxGeomAlgo__$Tess2_TessFace();
			this.makeFace_(newFace,eNew,eOrg.Lface);
		}
		return eNew;
	}
	,zapFace: function(fZap) {
		var eStart = fZap.anEdge;
		var e;
		var eSym;
		var eNext = eStart.Lnext;
		while(true) {
			e = eNext;
			eNext = e.Lnext;
			e.Lface = null;
			if(e.get_Rface() == null) {
				if(e.Onext == e) {
					this.killVertex_(e.Org,null);
				} else {
					e.Org.anEdge = e.Onext;
					this.splice_(e,e.get_Oprev());
				}
				eSym = e.Sym;
				if(eSym.Onext == eSym) {
					this.killVertex_(eSym.Org,null);
				} else {
					eSym.Org.anEdge = eSym.Onext;
					this.splice_(eSym,eSym.get_Oprev());
				}
				this.killEdge_(e);
			}
			if(!(e != eStart)) {
				break;
			}
		}
		var fPrev = fZap.prev;
		var fNext = fZap.next;
		fNext.prev = fPrev;
		fPrev.next = fNext;
	}
	,countFaceVerts_: function(f) {
		var eCur = f.anEdge;
		var n = 0;
		while(true) {
			++n;
			eCur = eCur.Lnext;
			if(!(eCur != f.anEdge)) {
				break;
			}
		}
		return n;
	}
	,mergeConvexFaces: function(maxVertsPerFace) {
		var eCur;
		var eNext;
		var eSym;
		var vStart;
		var curNv;
		var symNv;
		var f = this.fHead.next;
		while(f != this.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			eCur = f.anEdge;
			vStart = eCur.Org;
			while(true) {
				eNext = eCur.Lnext;
				eSym = eCur.Sym;
				if(eSym != null && eSym.Lface != null && eSym.Lface.inside) {
					curNv = this.countFaceVerts_(f);
					symNv = this.countFaceVerts_(eSym.Lface);
					if(curNv + symNv - 2 <= maxVertsPerFace) {
						if(hxGeomAlgo__$Tess2_Geom.vertCCW(eCur.get_Lprev().Org,eCur.Org,eSym.Lnext.Lnext.Org) && hxGeomAlgo__$Tess2_Geom.vertCCW(eSym.get_Lprev().Org,eSym.Org,eCur.Lnext.Lnext.Org)) {
							eNext = eSym.Lnext;
							this.delete(eSym);
							eCur = null;
							eSym = null;
						}
					}
				}
				if(eCur != null && eCur.Lnext.Org == vStart) {
					break;
				}
				eCur = eNext;
			}
			f = f.next;
		}
		return true;
	}
	,check: function() {
		var fHead = this.fHead;
		var vHead = this.vHead;
		var eHead = this.eHead;
		var f;
		var v;
		var e;
		var fPrev = fHead;
		while(true) {
			f = fPrev.next;
			if(!(f != fHead)) {
				break;
			}
			e = f.anEdge;
			while(true) {
				e = e.Lnext;
				if(!(e != f.anEdge)) {
					break;
				}
			}
			fPrev = f;
		}
		var vPrev = vHead;
		while(true) {
			v = vPrev.next;
			if(!(v != vHead)) {
				break;
			}
			e = v.anEdge;
			while(true) {
				e = e.Onext;
				if(!(e != v.anEdge)) {
					break;
				}
			}
			vPrev = v;
		}
		var ePrev = eHead;
		while(true) {
			e = ePrev.next;
			if(!(e != eHead)) {
				break;
			}
			var cond = e.get_Dst() != null;
			ePrev = e;
		}
		var cond1 = e.Sym.next == ePrev.Sym && e.Sym == this.eHeadSym && e.Sym.Sym == e && e.Org == null && e.get_Dst() == null && e.Lface == null && e.get_Rface() == null;
	}
};
var hxGeomAlgo__$Tess2_Geom = function() { };
hxGeomAlgo__$Tess2_Geom.__name__ = true;
hxGeomAlgo__$Tess2_Geom.vertEq = function(u,v) {
	if(u.s == v.s) {
		return u.t == v.t;
	} else {
		return false;
	}
};
hxGeomAlgo__$Tess2_Geom.vertLeq = function(u,v) {
	if(!(u.s < v.s)) {
		if(u.s == v.s) {
			return u.t <= v.t;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxGeomAlgo__$Tess2_Geom.transLeq = function(u,v) {
	if(!(u.t < v.t)) {
		if(u.t == v.t) {
			return u.s <= v.s;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxGeomAlgo__$Tess2_Geom.edgeGoesLeft = function(e) {
	return hxGeomAlgo__$Tess2_Geom.vertLeq(e.get_Dst(),e.Org);
};
hxGeomAlgo__$Tess2_Geom.edgeGoesRight = function(e) {
	return hxGeomAlgo__$Tess2_Geom.vertLeq(e.Org,e.get_Dst());
};
hxGeomAlgo__$Tess2_Geom.edgeIsInternal = function(e) {
	if(e.get_Rface() != null) {
		return e.get_Rface().inside;
	} else {
		return false;
	}
};
hxGeomAlgo__$Tess2_Geom.vertL1dist = function(u,v) {
	return Math.abs(u.s - v.s) + Math.abs(u.t - v.t);
};
hxGeomAlgo__$Tess2_Geom.edgeEval = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(u,v) && hxGeomAlgo__$Tess2_Geom.vertLeq(v,w);
	var gapL = v.s - u.s;
	var gapR = w.s - v.s;
	if(gapL + gapR > 0.0) {
		if(gapL < gapR) {
			return v.t - u.t + (u.t - w.t) * (gapL / (gapL + gapR));
		} else {
			return v.t - w.t + (w.t - u.t) * (gapR / (gapL + gapR));
		}
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.edgeSign = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(u,v) && hxGeomAlgo__$Tess2_Geom.vertLeq(v,w);
	var gapL = v.s - u.s;
	var gapR = w.s - v.s;
	if(gapL + gapR > 0.0) {
		return (v.t - w.t) * gapL + (v.t - u.t) * gapR;
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.transEval = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.transLeq(u,v) && hxGeomAlgo__$Tess2_Geom.transLeq(v,w);
	var gapL = v.t - u.t;
	var gapR = w.t - v.t;
	if(gapL + gapR > 0.0) {
		if(gapL < gapR) {
			return v.s - u.s + (u.s - w.s) * (gapL / (gapL + gapR));
		} else {
			return v.s - w.s + (w.s - u.s) * (gapR / (gapL + gapR));
		}
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.transSign = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.transLeq(u,v) && hxGeomAlgo__$Tess2_Geom.transLeq(v,w);
	var gapL = v.t - u.t;
	var gapR = w.t - v.t;
	if(gapL + gapR > 0.0) {
		return (v.s - w.s) * gapL + (v.s - u.s) * gapR;
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.vertCCW = function(u,v,w) {
	return u.s * (v.t - w.t) + v.s * (w.t - u.t) + w.s * (u.t - v.t) >= 0.0;
};
hxGeomAlgo__$Tess2_Geom.interpolate = function(a,x,b,y) {
	if(a < 0) {
		a = 0;
	}
	if(b < 0) {
		b = 0;
	}
	if(a <= b) {
		if(b == 0) {
			return (x + y) / 2;
		} else {
			return x + (y - x) * (a / (a + b));
		}
	} else {
		return y + (x - y) * (b / (a + b));
	}
};
hxGeomAlgo__$Tess2_Geom.intersect = function(o1,d1,o2,d2,v) {
	var z1;
	var z2;
	var t;
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o1,d1)) {
		t = o1;
		o1 = d1;
		d1 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o2,d2)) {
		t = o2;
		o2 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o1,o2)) {
		t = o1;
		o1 = o2;
		o2 = t;
		t = d1;
		d1 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o2,d1)) {
		v.s = (o2.s + d1.s) / 2;
	} else if(hxGeomAlgo__$Tess2_Geom.vertLeq(d1,d2)) {
		z1 = hxGeomAlgo__$Tess2_Geom.edgeEval(o1,o2,d1);
		z2 = hxGeomAlgo__$Tess2_Geom.edgeEval(o2,d1,d2);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.s = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.s,z2,d1.s);
	} else {
		z1 = hxGeomAlgo__$Tess2_Geom.edgeSign(o1,o2,d1);
		z2 = -hxGeomAlgo__$Tess2_Geom.edgeSign(o1,d2,d1);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.s = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.s,z2,d2.s);
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o1,d1)) {
		t = o1;
		o1 = d1;
		d1 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o2,d2)) {
		t = o2;
		o2 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o1,o2)) {
		t = o1;
		o1 = o2;
		o2 = t;
		t = d1;
		d1 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o2,d1)) {
		v.t = (o2.t + d1.t) / 2;
	} else if(hxGeomAlgo__$Tess2_Geom.transLeq(d1,d2)) {
		z1 = hxGeomAlgo__$Tess2_Geom.transEval(o1,o2,d1);
		z2 = hxGeomAlgo__$Tess2_Geom.transEval(o2,d1,d2);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.t = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.t,z2,d1.t);
	} else {
		z1 = hxGeomAlgo__$Tess2_Geom.transSign(o1,o2,d1);
		z2 = -hxGeomAlgo__$Tess2_Geom.transSign(o1,d2,d1);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.t = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.t,z2,d2.t);
	}
};
hxGeomAlgo__$Tess2_Geom.calcAngle = function(v0,v1,v2) {
	var a_0 = v2.s - v1.s;
	var a_1 = v2.t - v1.t;
	var b_0 = v0.s - v1.s;
	var b_1 = v0.t - v1.t;
	var num = a_0 * b_0 + a_1 * b_1;
	var den = Math.sqrt(a_0 * a_0 + a_1 * a_1) * Math.sqrt(b_0 * b_0 + b_1 * b_1);
	if(den > 0.0) {
		num /= den;
	}
	if(num < -1.0) {
		num = -1.0;
	}
	if(num > 1.0) {
		num = 1.0;
	}
	return Math.acos(num);
};
hxGeomAlgo__$Tess2_Geom.edgeIsLocallyDelaunay = function(e) {
	return hxGeomAlgo__$Tess2_Geom.calcAngle(e.Lnext.Org,e.Lnext.Lnext.Org,e.Org) + hxGeomAlgo__$Tess2_Geom.calcAngle(e.Sym.Lnext.Org,e.Sym.Lnext.Lnext.Org,e.Sym.Org) < Math.PI + 0.01;
};
var hxGeomAlgo__$Tess2_DictNode = function() {
	this.prev = null;
	this.next = null;
	this.key = null;
};
hxGeomAlgo__$Tess2_DictNode.__name__ = true;
var hxGeomAlgo__$Tess2_Dict = function(frame,leq) {
	this.head = new hxGeomAlgo__$Tess2_DictNode();
	this.head.next = this.head;
	this.head.prev = this.head;
	this.frame = frame;
	this.leq = leq;
};
hxGeomAlgo__$Tess2_Dict.__name__ = true;
hxGeomAlgo__$Tess2_Dict.prototype = {
	min: function() {
		return this.head.next;
	}
	,insert: function(k) {
		return this.insertBefore(this.head,k);
	}
	,search: function(key) {
		var node = this.head;
		while(true) {
			node = node.next;
			if(!(node.key != null && !this.leq(this.frame,key,node.key))) {
				break;
			}
		}
		return node;
	}
	,insertBefore: function(node,key) {
		while(true) {
			node = node.prev;
			if(!(node.key != null && !this.leq(this.frame,node.key,key))) {
				break;
			}
		}
		var newNode = new hxGeomAlgo__$Tess2_DictNode();
		newNode.key = key;
		newNode.next = node.next;
		node.next.prev = newNode;
		newNode.prev = node;
		node.next = newNode;
		return newNode;
	}
	,'delete': function(node) {
		node.next.prev = node.prev;
		node.prev.next = node.next;
	}
};
var hxGeomAlgo__$Tess2_PQNode = function() {
	this.handle = -1;
};
hxGeomAlgo__$Tess2_PQNode.__name__ = true;
var hxGeomAlgo__$Tess2_PQHandleElem = function() {
	this.node = -1;
	this.key = null;
};
hxGeomAlgo__$Tess2_PQHandleElem.__name__ = true;
var hxGeomAlgo__$Tess2_PriorityQ = function(size,leq) {
	this.size = 0;
	this.max = size;
	this.nodes = [];
	var _g = 0;
	var _g1 = size + 1;
	while(_g < _g1) {
		var i = _g++;
		this.nodes[i] = new hxGeomAlgo__$Tess2_PQNode();
	}
	this.handles = [];
	var _g2 = 0;
	var _g3 = size + 1;
	while(_g2 < _g3) {
		var i1 = _g2++;
		this.handles[i1] = new hxGeomAlgo__$Tess2_PQHandleElem();
	}
	this.initialized = false;
	this.freeList = 0;
	this.leq = leq;
	this.nodes[1].handle = 1;
	this.handles[1].key = null;
};
hxGeomAlgo__$Tess2_PriorityQ.__name__ = true;
hxGeomAlgo__$Tess2_PriorityQ.prototype = {
	floatDown_: function(curr) {
		var n = this.nodes;
		var h = this.handles;
		var hChild;
		var child;
		var hCurr = n[curr].handle;
		while(true) {
			child = curr << 1;
			if(child < this.size && this.leq(h[n[child + 1].handle].key,h[n[child].handle].key)) {
				++child;
			}
			hChild = n[child].handle;
			if(child > this.size || this.leq(h[hCurr].key,h[hChild].key)) {
				n[curr].handle = hCurr;
				h[hCurr].node = curr;
				break;
			}
			n[curr].handle = hChild;
			h[hChild].node = curr;
			curr = child;
		}
	}
	,floatUp_: function(curr) {
		var n = this.nodes;
		var h = this.handles;
		var hParent;
		var parent;
		var hCurr = n[curr].handle;
		while(true) {
			parent = curr >> 1;
			hParent = n[parent].handle;
			if(parent == 0 || this.leq(h[hParent].key,h[hCurr].key)) {
				n[curr].handle = hCurr;
				h[hCurr].node = curr;
				break;
			}
			n[curr].handle = hParent;
			h[hParent].node = curr;
			curr = parent;
		}
	}
	,init: function() {
		var i = this.size;
		while(i >= 1) {
			this.floatDown_(i);
			--i;
		}
		this.initialized = true;
	}
	,min: function() {
		return this.handles[this.nodes[1].handle].key;
	}
	,insert: function(keyNew) {
		var free;
		var curr = ++this.size;
		if(curr * 2 > this.max) {
			this.max *= 2;
			var s = this.nodes.length;
			var _g = s;
			var _g1 = this.max + 1;
			while(_g < _g1) {
				var i = _g++;
				this.nodes[i] = new hxGeomAlgo__$Tess2_PQNode();
			}
			s = this.handles.length;
			var _g2 = this.handles.length;
			var _g3 = this.max + 1;
			while(_g2 < _g3) {
				var i1 = _g2++;
				this.handles[i1] = new hxGeomAlgo__$Tess2_PQHandleElem();
			}
		}
		if(this.freeList == 0) {
			free = curr;
		} else {
			free = this.freeList;
			this.freeList = this.handles[free].node;
		}
		this.nodes[curr].handle = free;
		this.handles[free].node = curr;
		this.handles[free].key = keyNew;
		if(this.initialized) {
			this.floatUp_(curr);
		}
		return free;
	}
	,extractMin: function() {
		var n = this.nodes;
		var h = this.handles;
		var hMin = n[1].handle;
		var min = h[hMin].key;
		if(this.size > 0) {
			n[1].handle = n[this.size].handle;
			h[n[1].handle].node = 1;
			h[hMin].key = null;
			h[hMin].node = this.freeList;
			this.freeList = hMin;
			--this.size;
			if(this.size > 0) {
				this.floatDown_(1);
			}
		}
		return min;
	}
	,'delete': function(hCurr) {
		var n = this.nodes;
		var h = this.handles;
		var curr = h[hCurr].node;
		n[curr].handle = n[this.size].handle;
		h[n[curr].handle].node = curr;
		--this.size;
		if(curr <= this.size) {
			if(curr <= 1 || this.leq(h[n[curr >> 1].handle].key,h[n[curr].handle].key)) {
				this.floatDown_(curr);
			} else {
				this.floatUp_(curr);
			}
		}
		h[hCurr].key = null;
		h[hCurr].node = this.freeList;
		this.freeList = hCurr;
	}
};
var hxGeomAlgo__$Tess2_ActiveRegion = function() {
	this.fixUpperEdge = false;
	this.dirty = false;
	this.sentinel = false;
	this.inside = false;
	this.windingNumber = 0;
	this.nodeUp = null;
	this.eUp = null;
};
hxGeomAlgo__$Tess2_ActiveRegion.__name__ = true;
var hxGeomAlgo__$Tess2_Sweep = function() { };
hxGeomAlgo__$Tess2_Sweep.__name__ = true;
hxGeomAlgo__$Tess2_Sweep.regionBelow = function(r) {
	return r.nodeUp.prev.key;
};
hxGeomAlgo__$Tess2_Sweep.regionAbove = function(r) {
	return r.nodeUp.next.key;
};
hxGeomAlgo__$Tess2_Sweep.debugEvent = function(tess) {
};
hxGeomAlgo__$Tess2_Sweep.addWinding = function(eDst,eSrc) {
	eDst.winding += eSrc.winding;
	eDst.Sym.winding += eSrc.Sym.winding;
};
hxGeomAlgo__$Tess2_Sweep.edgeLeq = function(tess,reg1,reg2) {
	var ev = tess.event;
	var t1;
	var t2;
	var e1 = reg1.eUp;
	var e2 = reg2.eUp;
	if(e1.get_Dst() == ev) {
		if(e2.get_Dst() == ev) {
			if(hxGeomAlgo__$Tess2_Geom.vertLeq(e1.Org,e2.Org)) {
				return hxGeomAlgo__$Tess2_Geom.edgeSign(e2.get_Dst(),e1.Org,e2.Org) <= 0;
			}
			return hxGeomAlgo__$Tess2_Geom.edgeSign(e1.get_Dst(),e2.Org,e1.Org) >= 0;
		}
		return hxGeomAlgo__$Tess2_Geom.edgeSign(e2.get_Dst(),ev,e2.Org) <= 0;
	}
	if(e2.get_Dst() == ev) {
		return hxGeomAlgo__$Tess2_Geom.edgeSign(e1.get_Dst(),ev,e1.Org) >= 0;
	}
	var t11 = hxGeomAlgo__$Tess2_Geom.edgeEval(e1.get_Dst(),ev,e1.Org);
	var t21 = hxGeomAlgo__$Tess2_Geom.edgeEval(e2.get_Dst(),ev,e2.Org);
	return t11 >= t21;
};
hxGeomAlgo__$Tess2_Sweep.deleteRegion = function(tess,reg) {
	var reg1 = reg.fixUpperEdge;
	reg.eUp.activeRegion = null;
	tess.dict.delete(reg.nodeUp);
};
hxGeomAlgo__$Tess2_Sweep.fixUpperEdge = function(tess,reg,newEdge) {
	tess.mesh.delete(reg.eUp);
	reg.fixUpperEdge = false;
	reg.eUp = newEdge;
	newEdge.activeRegion = reg;
};
hxGeomAlgo__$Tess2_Sweep.topLeftRegion = function(tess,reg) {
	var org = reg.eUp.Org;
	var e;
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
		if(!(reg.eUp.Org == org)) {
			break;
		}
	}
	if(reg.fixUpperEdge) {
		e = tess.mesh.connect(hxGeomAlgo__$Tess2_Sweep.regionBelow(reg).eUp.Sym,reg.eUp.Lnext);
		if(e == null) {
			return null;
		}
		hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,e);
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
	}
	return reg;
};
hxGeomAlgo__$Tess2_Sweep.topRightRegion = function(reg) {
	var dst = reg.eUp.get_Dst();
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
		if(!(reg.eUp.get_Dst() == dst)) {
			break;
		}
	}
	return reg;
};
hxGeomAlgo__$Tess2_Sweep.addRegionBelow = function(tess,regAbove,eNewUp) {
	var regNew = new hxGeomAlgo__$Tess2_ActiveRegion();
	regNew.eUp = eNewUp;
	regNew.nodeUp = tess.dict.insertBefore(regAbove.nodeUp,regNew);
	regNew.fixUpperEdge = false;
	regNew.sentinel = false;
	regNew.dirty = false;
	eNewUp.activeRegion = regNew;
	return regNew;
};
hxGeomAlgo__$Tess2_Sweep.isWindingInside = function(tess,n) {
	switch(tess.windingRule._hx_index) {
	case 0:
		return (n & 1) != 0;
	case 1:
		return n != 0;
	case 2:
		return n > 0;
	case 3:
		return n < 0;
	case 4:
		if(n < 2) {
			return n <= -2;
		} else {
			return true;
		}
		break;
	}
};
hxGeomAlgo__$Tess2_Sweep.computeWinding = function(tess,reg) {
	reg.windingNumber = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;
	reg.inside = hxGeomAlgo__$Tess2_Sweep.isWindingInside(tess,reg.windingNumber);
};
hxGeomAlgo__$Tess2_Sweep.finishRegion = function(tess,reg) {
	var e = reg.eUp;
	var f = e.Lface;
	f.inside = reg.inside;
	f.anEdge = e;
	hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
};
hxGeomAlgo__$Tess2_Sweep.finishLeftRegions = function(tess,regFirst,regLast) {
	var e;
	var ePrev;
	var reg = null;
	var regPrev = regFirst;
	var ePrev1 = regFirst.eUp;
	while(regPrev != regLast) {
		regPrev.fixUpperEdge = false;
		reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regPrev);
		e = reg.eUp;
		if(e.Org != ePrev1.Org) {
			if(!reg.fixUpperEdge) {
				hxGeomAlgo__$Tess2_Sweep.finishRegion(tess,regPrev);
				break;
			}
			e = tess.mesh.connect(ePrev1.get_Lprev(),e.Sym);
			hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,e);
		}
		if(ePrev1.Onext != e) {
			tess.mesh.splice(e.get_Oprev(),e);
			tess.mesh.splice(ePrev1,e);
		}
		hxGeomAlgo__$Tess2_Sweep.finishRegion(tess,regPrev);
		ePrev1 = reg.eUp;
		regPrev = reg;
	}
	return ePrev1;
};
hxGeomAlgo__$Tess2_Sweep.addRightEdges = function(tess,regUp,eFirst,eLast,eTopLeft,cleanUp) {
	var reg = null;
	var firstTime = true;
	var e = eFirst;
	while(true) {
		var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(e.Org,e.get_Dst());
		hxGeomAlgo__$Tess2_Sweep.addRegionBelow(tess,regUp,e.Sym);
		e = e.Onext;
		if(!(e != eLast)) {
			break;
		}
	}
	if(eTopLeft == null) {
		eTopLeft = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp.get_Rprev();
	}
	var regPrev = regUp;
	var ePrev = eTopLeft;
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regPrev);
		e = reg.eUp.Sym;
		if(e.Org != ePrev.Org) {
			break;
		}
		if(e.Onext != ePrev) {
			tess.mesh.splice(e.get_Oprev(),e);
			tess.mesh.splice(ePrev.get_Oprev(),e);
		}
		reg.windingNumber = regPrev.windingNumber - e.winding;
		reg.inside = hxGeomAlgo__$Tess2_Sweep.isWindingInside(tess,reg.windingNumber);
		regPrev.dirty = true;
		if(!firstTime && hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regPrev)) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(e,ePrev);
			hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regPrev);
			tess.mesh.delete(ePrev);
		}
		firstTime = false;
		regPrev = reg;
		ePrev = e;
	}
	regPrev.dirty = true;
	if(cleanUp) {
		hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions(tess,regPrev);
	}
};
hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices = function(tess,e1,e2) {
	tess.mesh.splice(e1,e2);
};
hxGeomAlgo__$Tess2_Sweep.vertexWeights = function(isect,org,dst) {
	var t1 = hxGeomAlgo__$Tess2_Geom.vertL1dist(org,isect);
	var t2 = hxGeomAlgo__$Tess2_Geom.vertL1dist(dst,isect);
	var w0 = 0.5 * t2 / (t1 + t2);
	var w1 = 0.5 * t1 / (t1 + t2);
	isect.coords[0] += w0 * org.coords[0] + w1 * dst.coords[0];
	isect.coords[1] += w0 * org.coords[1] + w1 * dst.coords[1];
	isect.coords[2] += w0 * org.coords[2] + w1 * dst.coords[2];
};
hxGeomAlgo__$Tess2_Sweep.getIntersectData = function(tess,isect,orgUp,dstUp,orgLo,dstLo) {
	var tmp = isect.coords[1] = isect.coords[2] = 0;
	isect.coords[0] = tmp;
	isect.idx = -1;
	hxGeomAlgo__$Tess2_Sweep.vertexWeights(isect,orgUp,dstUp);
	hxGeomAlgo__$Tess2_Sweep.vertexWeights(isect,orgLo,dstLo);
};
hxGeomAlgo__$Tess2_Sweep.checkForRightSplice = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eUp.Org,eLo.Org)) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eLo.get_Dst(),eUp.Org,eLo.Org) > 0) {
			return false;
		}
		if(!hxGeomAlgo__$Tess2_Geom.vertEq(eUp.Org,eLo.Org)) {
			tess.mesh.splitEdge(eLo.Sym);
			tess.mesh.splice(eUp,eLo.get_Oprev());
			regUp.dirty = regLo.dirty = true;
		} else if(eUp.Org != eLo.Org) {
			tess.pq.delete(eUp.Org.pqHandle);
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,eLo.get_Oprev(),eUp);
		}
	} else {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),eLo.Org,eUp.Org) < 0) {
			return false;
		}
		hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
		tess.mesh.splitEdge(eUp.Sym);
		tess.mesh.splice(eLo.get_Oprev(),eUp);
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.checkForLeftSplice = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var e;
	var cond = !hxGeomAlgo__$Tess2_Geom.vertEq(eUp.get_Dst(),eLo.get_Dst());
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eUp.get_Dst(),eLo.get_Dst())) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),eLo.get_Dst(),eUp.Org) < 0) {
			return false;
		}
		hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
		e = tess.mesh.splitEdge(eUp);
		tess.mesh.splice(eLo.Sym,e);
		e.Lface.inside = regUp.inside;
	} else {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eLo.get_Dst(),eUp.get_Dst(),eLo.Org) > 0) {
			return false;
		}
		regUp.dirty = regLo.dirty = true;
		e = tess.mesh.splitEdge(eLo);
		tess.mesh.splice(eUp.Lnext,eLo.Sym);
		e.get_Rface().inside = regUp.inside;
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.checkForIntersect = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var orgUp = eUp.Org;
	var orgLo = eLo.Org;
	var dstUp = eUp.get_Dst();
	var dstLo = eLo.get_Dst();
	var isect = new hxGeomAlgo__$Tess2_TessVertex();
	var e;
	var cond = !hxGeomAlgo__$Tess2_Geom.vertEq(dstLo,dstUp);
	var cond1 = hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,orgUp) <= 0;
	var cond2 = hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,orgLo) >= 0;
	if(orgUp == orgLo) {
		return false;
	}
	var tMinUp = Math.min(orgUp.t,dstUp.t);
	var tMaxLo = Math.max(orgLo.t,dstLo.t);
	if(tMinUp > tMaxLo) {
		return false;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(orgUp,orgLo)) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,orgUp,orgLo) > 0) {
			return false;
		}
	} else if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,orgLo,orgUp) < 0) {
		return false;
	}
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	hxGeomAlgo__$Tess2_Geom.intersect(dstUp,orgUp,dstLo,orgLo,isect);
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(isect,tess.event)) {
		isect.s = tess.event.s;
		isect.t = tess.event.t;
	}
	var orgMin = hxGeomAlgo__$Tess2_Geom.vertLeq(orgUp,orgLo) ? orgUp : orgLo;
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(orgMin,isect)) {
		isect.s = orgMin.s;
		isect.t = orgMin.t;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(isect,orgUp) || hxGeomAlgo__$Tess2_Geom.vertEq(isect,orgLo)) {
		hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regUp);
		return false;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertEq(dstUp,tess.event) && hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,isect) >= 0 || !hxGeomAlgo__$Tess2_Geom.vertEq(dstLo,tess.event) && hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,isect) <= 0) {
		if(dstLo == tess.event) {
			tess.mesh.splitEdge(eUp.Sym);
			tess.mesh.splice(eLo.Sym,eUp);
			regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,regUp);
			eUp = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp;
			hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp),regLo);
			hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eUp.get_Oprev(),eUp,eUp,true);
			return true;
		}
		if(dstUp == tess.event) {
			tess.mesh.splitEdge(eLo.Sym);
			tess.mesh.splice(eUp.Lnext,eLo.get_Oprev());
			regLo = regUp;
			regUp = hxGeomAlgo__$Tess2_Sweep.topRightRegion(regUp);
			e = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp.get_Rprev();
			regLo.eUp = eLo.get_Oprev();
			eLo = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,regLo,null);
			hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eLo.Onext,eUp.get_Rprev(),e,true);
			return true;
		}
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,isect) >= 0) {
			hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
			tess.mesh.splitEdge(eUp.Sym);
			eUp.Org.s = tess.event.s;
			eUp.Org.t = tess.event.t;
		}
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,isect) <= 0) {
			regUp.dirty = regLo.dirty = true;
			tess.mesh.splitEdge(eLo.Sym);
			eLo.Org.s = tess.event.s;
			eLo.Org.t = tess.event.t;
		}
		return false;
	}
	tess.mesh.splitEdge(eUp.Sym);
	tess.mesh.splitEdge(eLo.Sym);
	tess.mesh.splice(eLo.get_Oprev(),eUp);
	eUp.Org.s = isect.s;
	eUp.Org.t = isect.t;
	eUp.Org.pqHandle = tess.pq.insert(eUp.Org);
	hxGeomAlgo__$Tess2_Sweep.getIntersectData(tess,eUp.Org,orgUp,dstUp,orgLo,dstLo);
	hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;
	return false;
};
hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp;
	var eLo;
	while(true) {
		while(regLo.dirty) {
			regUp = regLo;
			regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regLo);
		}
		if(!regUp.dirty) {
			regLo = regUp;
			regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp);
			if(regUp == null || !regUp.dirty) {
				return;
			}
		}
		regUp.dirty = false;
		eUp = regUp.eUp;
		eLo = regLo.eUp;
		if(eUp.get_Dst() != eLo.get_Dst()) {
			if(hxGeomAlgo__$Tess2_Sweep.checkForLeftSplice(tess,regUp)) {
				if(regLo.fixUpperEdge) {
					hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regLo);
					tess.mesh.delete(eLo);
					regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
					eLo = regLo.eUp;
				} else if(regUp.fixUpperEdge) {
					hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regUp);
					tess.mesh.delete(eUp);
					regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regLo);
					eUp = regUp.eUp;
				}
			}
		}
		if(eUp.Org != eLo.Org) {
			if(eUp.get_Dst() != eLo.get_Dst() && !regUp.fixUpperEdge && !regLo.fixUpperEdge && (eUp.get_Dst() == tess.event || eLo.get_Dst() == tess.event)) {
				if(hxGeomAlgo__$Tess2_Sweep.checkForIntersect(tess,regUp)) {
					return;
				}
			} else {
				hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regUp);
			}
		}
		if(eUp.Org == eLo.Org && eUp.get_Dst() == eLo.get_Dst()) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(eLo,eUp);
			hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regUp);
			tess.mesh.delete(eUp);
			regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regLo);
		}
	}
};
hxGeomAlgo__$Tess2_Sweep.connectRightVertex = function(tess,regUp,eBottomLeft) {
	var eNew;
	var eTopLeft = eBottomLeft.Onext;
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var degenerate = false;
	if(eUp.get_Dst() != eLo.get_Dst()) {
		hxGeomAlgo__$Tess2_Sweep.checkForIntersect(tess,regUp);
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(eUp.Org,tess.event)) {
		tess.mesh.splice(eTopLeft.get_Oprev(),eUp);
		regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,regUp);
		eTopLeft = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp;
		hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp),regLo);
		degenerate = true;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(eLo.Org,tess.event)) {
		tess.mesh.splice(eBottomLeft,eLo.get_Oprev());
		eBottomLeft = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,regLo,null);
		degenerate = true;
	}
	if(degenerate) {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eBottomLeft.Onext,eTopLeft,eTopLeft,true);
		return;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eLo.Org,eUp.Org)) {
		eNew = eLo.get_Oprev();
	} else {
		eNew = eUp;
	}
	eNew = tess.mesh.connect(eBottomLeft.get_Lprev(),eNew);
	hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eNew,eNew.Onext,eNew.Onext,false);
	eNew.Sym.activeRegion.fixUpperEdge = true;
	hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions(tess,regUp);
};
hxGeomAlgo__$Tess2_Sweep.connectLeftDegenerate = function(tess,regUp,vEvent) {
	var e = regUp.eUp;
	if(hxGeomAlgo__$Tess2_Geom.vertEq(e.Org,vEvent)) {
		hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,e,vEvent.anEdge);
		return;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertEq(e.get_Dst(),vEvent)) {
		tess.mesh.splitEdge(e.Sym);
		if(regUp.fixUpperEdge) {
			tess.mesh.delete(e.Onext);
			regUp.fixUpperEdge = false;
		}
		tess.mesh.splice(vEvent.anEdge,e);
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,vEvent);
		return;
	}
	regUp = hxGeomAlgo__$Tess2_Sweep.topRightRegion(regUp);
	var reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eTopRight = reg.eUp.Sym;
	var eLast = eTopRight.Onext;
	var eTopLeft = eLast;
	if(reg.fixUpperEdge) {
		hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
		tess.mesh.delete(eTopRight);
		eTopRight = eTopLeft.get_Oprev();
	}
	tess.mesh.splice(vEvent.anEdge,eTopRight);
	if(!hxGeomAlgo__$Tess2_Geom.edgeGoesLeft(eTopLeft)) {
		eTopLeft = null;
	}
	hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eTopRight.Onext,eLast,eTopLeft,true);
};
hxGeomAlgo__$Tess2_Sweep.connectLeftVertex = function(tess,vEvent) {
	var eNew;
	var tmp = new hxGeomAlgo__$Tess2_ActiveRegion();
	tmp.eUp = vEvent.anEdge.Sym;
	var regUp = tess.dict.search(tmp).key;
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	if(regLo == null) {
		return;
	}
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),vEvent,eUp.Org) == 0.0) {
		hxGeomAlgo__$Tess2_Sweep.connectLeftDegenerate(tess,regUp,vEvent);
		return;
	}
	var reg = hxGeomAlgo__$Tess2_Geom.vertLeq(eLo.get_Dst(),eUp.get_Dst()) ? regUp : regLo;
	if(regUp.inside || reg.fixUpperEdge) {
		if(reg == regUp) {
			eNew = tess.mesh.connect(vEvent.anEdge.Sym,eUp.Lnext);
		} else {
			var tempHalfEdge = tess.mesh.connect(eLo.get_Dnext(),vEvent.anEdge);
			eNew = tempHalfEdge.Sym;
		}
		if(reg.fixUpperEdge) {
			hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,eNew);
		} else {
			hxGeomAlgo__$Tess2_Sweep.computeWinding(tess,hxGeomAlgo__$Tess2_Sweep.addRegionBelow(tess,regUp,eNew));
		}
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,vEvent);
	} else {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,vEvent.anEdge,vEvent.anEdge,null,true);
	}
};
hxGeomAlgo__$Tess2_Sweep.sweepEvent = function(tess,vEvent) {
	tess.event = vEvent;
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	var e = vEvent.anEdge;
	while(e.activeRegion == null) {
		e = e.Onext;
		if(e == vEvent.anEdge) {
			hxGeomAlgo__$Tess2_Sweep.connectLeftVertex(tess,vEvent);
			return;
		}
	}
	var regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,e.activeRegion);
	var reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eTopLeft = reg.eUp;
	var eBottomLeft = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,reg,null);
	if(eBottomLeft.Onext == eTopLeft) {
		hxGeomAlgo__$Tess2_Sweep.connectRightVertex(tess,regUp,eBottomLeft);
	} else {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eBottomLeft.Onext,eTopLeft,eTopLeft,true);
	}
};
hxGeomAlgo__$Tess2_Sweep.addSentinel = function(tess,smin,smax,t) {
	var reg = new hxGeomAlgo__$Tess2_ActiveRegion();
	var e = tess.mesh.makeEdge();
	e.Org.s = smax;
	e.Org.t = t;
	e.get_Dst().s = smin;
	e.get_Dst().t = t;
	tess.event = e.get_Dst();
	reg.eUp = e;
	reg.windingNumber = 0;
	reg.inside = false;
	reg.fixUpperEdge = false;
	reg.sentinel = true;
	reg.dirty = false;
	reg.nodeUp = tess.dict.insert(reg);
};
hxGeomAlgo__$Tess2_Sweep.initEdgeDict = function(tess) {
	tess.dict = new hxGeomAlgo__$Tess2_Dict(tess,hxGeomAlgo__$Tess2_Sweep.edgeLeq);
	var w = tess.bmax[0] - tess.bmin[0];
	var h = tess.bmax[1] - tess.bmin[1];
	var smin = tess.bmin[0] - w;
	var smax = tess.bmax[0] + w;
	var tmin = tess.bmin[1] - h;
	var tmax = tess.bmax[1] + h;
	hxGeomAlgo__$Tess2_Sweep.addSentinel(tess,smin,smax,tmin);
	hxGeomAlgo__$Tess2_Sweep.addSentinel(tess,smin,smax,tmax);
};
hxGeomAlgo__$Tess2_Sweep.doneEdgeDict = function(tess) {
	var reg;
	var fixedEdges = 0;
	while(true) {
		reg = tess.dict.min().key;
		if(!(reg != null)) {
			break;
		}
		if(!reg.sentinel) {
			var cond = ++fixedEdges == 1;
		}
		hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
	}
};
hxGeomAlgo__$Tess2_Sweep.removeDegenerateEdges = function(tess) {
	var eNext;
	var eLnext;
	var eHead = tess.mesh.eHead;
	var e = eHead.next;
	while(e != eHead) {
		eNext = e.next;
		eLnext = e.Lnext;
		if(hxGeomAlgo__$Tess2_Geom.vertEq(e.Org,e.get_Dst()) && e.Lnext.Lnext != e) {
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,eLnext,e);
			tess.mesh.delete(e);
			e = eLnext;
			eLnext = e.Lnext;
		}
		if(eLnext.Lnext == e) {
			if(eLnext != e) {
				if(eLnext == eNext || eLnext == eNext.Sym) {
					eNext = eNext.next;
				}
				tess.mesh.delete(eLnext);
			}
			if(e == eNext || e == eNext.Sym) {
				eNext = eNext.next;
			}
			tess.mesh.delete(e);
		}
		e = eNext;
	}
};
hxGeomAlgo__$Tess2_Sweep.initPriorityQ = function(tess) {
	var vertexCount = 0;
	var vHead = tess.mesh.vHead;
	var v = vHead.next;
	while(v != vHead) {
		++vertexCount;
		v = v.next;
	}
	vertexCount += 8;
	var pq = tess.pq = new hxGeomAlgo__$Tess2_PriorityQ(vertexCount,hxGeomAlgo__$Tess2_Geom.vertLeq);
	vHead = tess.mesh.vHead;
	v = vHead.next;
	while(v != vHead) {
		v.pqHandle = pq.insert(v);
		v = v.next;
	}
	if(v != vHead) {
		return false;
	}
	pq.init();
	return true;
};
hxGeomAlgo__$Tess2_Sweep.donePriorityQ = function(tess) {
	tess.pq = null;
};
hxGeomAlgo__$Tess2_Sweep.removeDegenerateFaces = function(tess,mesh) {
	var fNext;
	var e;
	var f = mesh.fHead.next;
	while(f != mesh.fHead) {
		fNext = f.next;
		e = f.anEdge;
		if(e.Lnext.Lnext == e) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(e.Onext,e);
			tess.mesh.delete(e);
		}
		f = fNext;
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.computeInterior = function(tess) {
	var v;
	var vNext;
	hxGeomAlgo__$Tess2_Sweep.removeDegenerateEdges(tess);
	if(!hxGeomAlgo__$Tess2_Sweep.initPriorityQ(tess)) {
		return false;
	}
	hxGeomAlgo__$Tess2_Sweep.initEdgeDict(tess);
	var pq = tess.pq;
	while(true) {
		v = tess.pq.extractMin();
		if(!(v != null)) {
			break;
		}
		while(true) {
			vNext = tess.pq.min();
			if(vNext == null || !hxGeomAlgo__$Tess2_Geom.vertEq(vNext,v)) {
				break;
			}
			vNext = tess.pq.extractMin();
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,v.anEdge,vNext.anEdge);
		}
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,v);
	}
	tess.event = tess.dict.min().key.eUp.Org;
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	hxGeomAlgo__$Tess2_Sweep.doneEdgeDict(tess);
	hxGeomAlgo__$Tess2_Sweep.donePriorityQ(tess);
	if(!hxGeomAlgo__$Tess2_Sweep.removeDegenerateFaces(tess,tess.mesh)) {
		return false;
	}
	tess.mesh.check();
	return true;
};
var hxGeomAlgo_Tesselator = $hx_exports["hxGeomAlgo"]["Tesselator"] = function() {
	this.elementCount = 0;
	this.elements = [];
	this.vertexCount = 0;
	this.vertexIndices = [];
	this.vertices = [];
	this.vertexIndexCounter = 0;
	this.event = null;
	this.pq = null;
	this.dict = null;
	this.bmax = [0.0,0.0];
	this.bmin = [0.0,0.0];
	this.tUnit = [0.0,0.0,0.0];
	this.sUnit = [0.0,0.0,0.0];
	this.normal = [0.0,0.0,0.0];
	this.mesh = null;
	this.windingRule = hxGeomAlgo_WindingRule.ODD;
};
hxGeomAlgo_Tesselator.__name__ = true;
hxGeomAlgo_Tesselator.prototype = {
	dot_: function(u,v) {
		return u[0] * v[0] + u[1] * v[1] + u[2] * v[2];
	}
	,normalize_: function(v) {
		var len = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
		len = Math.sqrt(len);
		v[0] /= len;
		v[1] /= len;
		v[2] /= len;
	}
	,longAxis_: function(v) {
		var i = 0;
		if(Math.abs(v[1]) > Math.abs(v[0])) {
			i = 1;
		}
		if(Math.abs(v[2]) > Math.abs(v[i])) {
			i = 2;
		}
		return i;
	}
	,computeNormal_: function(norm) {
		var c;
		var tLen2;
		var maxVal = [.0,.0,.0];
		var minVal = [.0,.0,.0];
		var d1 = [.0,.0,.0];
		var d2_0 = .0;
		var d2_1 = .0;
		var d2_2 = .0;
		var tNorm_0 = .0;
		var tNorm_1 = .0;
		var tNorm_2 = .0;
		var maxVert = [null,null,null];
		var minVert = [null,null,null];
		var vHead = this.mesh.vHead;
		var v = vHead.next;
		c = v.coords[0];
		minVal[0] = c;
		minVert[0] = v;
		maxVal[0] = c;
		maxVert[0] = v;
		c = v.coords[1];
		minVal[1] = c;
		minVert[1] = v;
		maxVal[1] = c;
		maxVert[1] = v;
		c = v.coords[2];
		minVal[2] = c;
		minVert[2] = v;
		maxVal[2] = c;
		maxVert[2] = v;
		v = vHead.next;
		while(v != vHead) {
			c = v.coords[0];
			if(c < minVal[0]) {
				minVal[0] = c;
				minVert[0] = v;
			}
			if(c > maxVal[0]) {
				maxVal[0] = c;
				maxVert[0] = v;
			}
			c = v.coords[1];
			if(c < minVal[1]) {
				minVal[1] = c;
				minVert[1] = v;
			}
			if(c > maxVal[1]) {
				maxVal[1] = c;
				maxVert[1] = v;
			}
			c = v.coords[2];
			if(c < minVal[2]) {
				minVal[2] = c;
				minVert[2] = v;
			}
			if(c > maxVal[2]) {
				maxVal[2] = c;
				maxVert[2] = v;
			}
			v = v.next;
		}
		var i = 0;
		if(maxVal[1] - minVal[1] > maxVal[0] - minVal[0]) {
			i = 1;
		}
		if(maxVal[2] - minVal[2] > maxVal[i] - minVal[i]) {
			i = 2;
		}
		if(minVal[i] >= maxVal[i]) {
			norm[0] = 0;
			norm[1] = 0;
			norm[2] = 1;
			return;
		}
		var maxLen2 = .0;
		var v1 = minVert[i];
		var v2 = maxVert[i];
		d1[0] = v1.coords[0] - v2.coords[0];
		d1[1] = v1.coords[1] - v2.coords[1];
		d1[2] = v1.coords[2] - v2.coords[2];
		v = vHead.next;
		while(v != vHead) {
			d2_0 = v.coords[0] - v2.coords[0];
			d2_1 = v.coords[1] - v2.coords[1];
			d2_2 = v.coords[2] - v2.coords[2];
			tNorm_0 = d1[1] * d2_2 - d1[2] * d2_1;
			tNorm_1 = d1[2] * d2_0 - d1[0] * d2_2;
			tNorm_2 = d1[0] * d2_1 - d1[1] * d2_0;
			tLen2 = tNorm_0 * tNorm_0 + tNorm_1 * tNorm_1 + tNorm_2 * tNorm_2;
			if(tLen2 > maxLen2) {
				maxLen2 = tLen2;
				norm[0] = tNorm_0;
				norm[1] = tNorm_1;
				norm[2] = tNorm_2;
			}
			v = v.next;
		}
		if(maxLen2 <= 0) {
			norm[0] = norm[1] = norm[2] = 0;
			norm[this.longAxis_(d1)] = 1;
		}
	}
	,checkOrientation_: function() {
		var fHead = this.mesh.fHead;
		var v;
		var vHead = this.mesh.vHead;
		var e;
		var area = .0;
		var f = fHead.next;
		while(f != fHead) {
			e = f.anEdge;
			if(e.winding <= 0) {
				f = f.next;
				continue;
			}
			while(true) {
				area += (e.Org.s - e.get_Dst().s) * (e.Org.t + e.get_Dst().t);
				e = e.Lnext;
				if(!(e != f.anEdge)) {
					break;
				}
			}
			f = f.next;
		}
		if(area < 0) {
			v = vHead.next;
			while(v != vHead) {
				v.t = -v.t;
				v = v.next;
			}
			this.tUnit[0] = -this.tUnit[0];
			this.tUnit[1] = -this.tUnit[1];
			this.tUnit[2] = -this.tUnit[2];
		}
	}
	,projectPolygon_: function() {
		var vHead = this.mesh.vHead;
		var norm = [.0,.0,.0];
		var computedNormal = false;
		norm[0] = this.normal[0];
		norm[1] = this.normal[1];
		norm[2] = this.normal[2];
		if(norm[0] == 0.0 && norm[1] == 0.0 && norm[2] == 0.0) {
			this.computeNormal_(norm);
			computedNormal = true;
		}
		var sUnit = this.sUnit;
		var tUnit = this.tUnit;
		var i = this.longAxis_(norm);
		sUnit[i] = 0;
		sUnit[(i + 1) % 3] = 1.0;
		sUnit[(i + 2) % 3] = 0.0;
		tUnit[i] = 0;
		tUnit[(i + 1) % 3] = 0.0;
		tUnit[(i + 2) % 3] = norm[i] > 0 ? 1.0 : -1.0;
		var v = vHead.next;
		while(v != vHead) {
			v.s = this.dot_(v.coords,sUnit);
			v.t = this.dot_(v.coords,tUnit);
			v = v.next;
		}
		if(computedNormal) {
			this.checkOrientation_();
		}
		var first = true;
		v = vHead.next;
		while(v != vHead) {
			if(first) {
				var tmp = this.bmax[0] = v.s;
				this.bmin[0] = tmp;
				var tmp1 = this.bmax[1] = v.t;
				this.bmin[1] = tmp1;
				first = false;
			} else {
				if(v.s < this.bmin[0]) {
					this.bmin[0] = v.s;
				}
				if(v.s > this.bmax[0]) {
					this.bmax[0] = v.s;
				}
				if(v.t < this.bmin[1]) {
					this.bmin[1] = v.t;
				}
				if(v.t > this.bmax[1]) {
					this.bmax[1] = v.t;
				}
			}
			v = v.next;
		}
	}
	,addWinding_: function(eDst,eSrc) {
		eDst.winding += eSrc.winding;
		eDst.Sym.winding += eSrc.Sym.winding;
	}
	,tessellateMonoRegion_: function(mesh,face) {
		var up = face.anEdge;
		while(hxGeomAlgo__$Tess2_Geom.vertLeq(up.get_Dst(),up.Org)) up = up.get_Lprev();
		while(hxGeomAlgo__$Tess2_Geom.vertLeq(up.Org,up.get_Dst())) up = up.Lnext;
		var lo = up.get_Lprev();
		while(up.Lnext != lo) if(hxGeomAlgo__$Tess2_Geom.vertLeq(up.get_Dst(),lo.Org)) {
			while(lo.Lnext != up && (hxGeomAlgo__$Tess2_Geom.edgeGoesLeft(lo.Lnext) || hxGeomAlgo__$Tess2_Geom.edgeSign(lo.Org,lo.get_Dst(),lo.Lnext.get_Dst()) <= 0.0)) {
				var tempHalfEdge = mesh.connect(lo.Lnext,lo);
				lo = tempHalfEdge.Sym;
			}
			lo = lo.get_Lprev();
		} else {
			while(lo.Lnext != up && (hxGeomAlgo__$Tess2_Geom.edgeGoesRight(up.get_Lprev()) || hxGeomAlgo__$Tess2_Geom.edgeSign(up.get_Dst(),up.Org,up.get_Lprev().Org) >= 0.0)) {
				var tempHalfEdge1 = mesh.connect(up,up.get_Lprev());
				up = tempHalfEdge1.Sym;
			}
			up = up.Lnext;
		}
		while(lo.Lnext.Lnext != up) {
			var tempHalfEdge2 = mesh.connect(lo.Lnext,lo);
			lo = tempHalfEdge2.Sym;
		}
		return true;
	}
	,tessellateInterior_: function(mesh) {
		var next;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			next = f.next;
			if(f.inside) {
				if(!this.tessellateMonoRegion_(mesh,f)) {
					return false;
				}
			}
			f = next;
		}
		return true;
	}
	,refineDelaunay_: function(mesh) {
		var stack = [];
		var e;
		var edges_0 = null;
		var edges_1 = null;
		var edges_2 = null;
		var edges_3 = null;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(f.inside) {
				e = f.anEdge;
				while(true) {
					e.mark = hxGeomAlgo__$Tess2_Geom.edgeIsInternal(e);
					if(e.mark && !e.Sym.mark) {
						stack.push(e);
					}
					e = e.Lnext;
					if(!(e != f.anEdge)) {
						break;
					}
				}
			}
			f = f.next;
		}
		while(stack.length > 0) {
			e = stack.pop();
			e.mark = e.Sym.mark = false;
			if(!hxGeomAlgo__$Tess2_Geom.edgeIsLocallyDelaunay(e)) {
				hxGeomAlgo__$Tess2_TessMesh.flipEdge(mesh,e);
				edges_0 = e.Lnext;
				edges_1 = e.get_Lprev();
				edges_2 = e.Sym.Lnext;
				edges_3 = e.Sym.get_Lprev();
				if(!edges_0.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_0)) {
					edges_0.mark = edges_0.Sym.mark = true;
					stack.push(edges_0);
				}
				if(!edges_1.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_1)) {
					edges_1.mark = edges_1.Sym.mark = true;
					stack.push(edges_1);
				}
				if(!edges_2.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_2)) {
					edges_2.mark = edges_2.Sym.mark = true;
					stack.push(edges_2);
				}
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var e1 = stack[_g];
			++_g;
			stack.pop();
		}
		stack = null;
	}
	,discardExterior_: function(mesh) {
		var next;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			next = f.next;
			if(!f.inside) {
				mesh.zapFace(f);
			}
			f = next;
		}
	}
	,setWindingNumber_: function(mesh,value,keepOnlyBoundary) {
		var eNext;
		var e = mesh.eHead.next;
		while(e != mesh.eHead) {
			eNext = e.next;
			if(e.get_Rface().inside != e.Lface.inside) {
				e.winding = e.Lface.inside ? value : -value;
			} else if(!keepOnlyBoundary) {
				e.winding = 0;
			} else {
				mesh.delete(e);
			}
			e = eNext;
		}
	}
	,getNeighbourFace_: function(edge) {
		if(edge.get_Rface() == null) {
			return -1;
		}
		if(!edge.get_Rface().inside) {
			return -1;
		}
		return edge.get_Rface().n;
	}
	,outputPolymesh_: function(mesh,resultsType,polySize,vertexDim) {
		var edge;
		var maxFaceCount = 0;
		var maxVertexCount = 0;
		var faceVerts;
		var i;
		var elements = 0;
		var vert;
		if(polySize > 3) {
			mesh.mergeConvexFaces(polySize);
		}
		var v = mesh.vHead.next;
		while(v != mesh.vHead) {
			v.n = -1;
			v = v.next;
		}
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			f.n = -1;
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			faceVerts = 0;
			while(true) {
				v = edge.Org;
				if(v.n == -1) {
					v.n = maxVertexCount;
					++maxVertexCount;
				}
				++faceVerts;
				edge = edge.Lnext;
				if(!(edge != f.anEdge)) {
					break;
				}
			}
			f.n = maxFaceCount;
			++maxFaceCount;
			f = f.next;
		}
		this.elementCount = maxFaceCount;
		if(resultsType == hxGeomAlgo_ResultType.CONNECTED_POLYGONS) {
			maxFaceCount *= 2;
		}
		this.elements = [];
		this.vertexCount = maxVertexCount;
		this.vertices = [];
		this.vertexIndices = [];
		v = mesh.vHead.next;
		while(v != mesh.vHead) {
			if(v.n != -1) {
				var idx = v.n * vertexDim;
				this.vertices[idx] = v.coords[0];
				this.vertices[idx + 1] = v.coords[1];
				if(vertexDim > 2) {
					this.vertices[idx + 2] = v.coords[2];
				}
				this.vertexIndices[v.n] = v.idx;
			}
			v = v.next;
		}
		var nel = 0;
		f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			faceVerts = 0;
			while(true) {
				v = edge.Org;
				this.elements[nel++] = v.n;
				++faceVerts;
				edge = edge.Lnext;
				if(!(edge != f.anEdge)) {
					break;
				}
			}
			var _g = faceVerts;
			var _g1 = polySize;
			while(_g < _g1) {
				var i1 = _g++;
				this.elements[nel++] = -1;
			}
			if(resultsType == hxGeomAlgo_ResultType.CONNECTED_POLYGONS) {
				edge = f.anEdge;
				while(true) {
					this.elements[nel++] = this.getNeighbourFace_(edge);
					edge = edge.Lnext;
					if(!(edge != f.anEdge)) {
						break;
					}
				}
				var _g2 = faceVerts;
				var _g3 = polySize;
				while(_g2 < _g3) {
					var i2 = _g2++;
					this.elements[nel++] = -1;
				}
			}
			f = f.next;
		}
	}
	,outputContours_: function(mesh,vertexDim) {
		var edge;
		var start;
		var verts;
		var elements;
		var vertInds;
		var startVert = 0;
		var vertCount = 0;
		this.vertexCount = 0;
		this.elementCount = 0;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			start = edge;
			while(true) {
				this.vertexCount++;
				edge = edge.Lnext;
				if(!(edge != start)) {
					break;
				}
			}
			this.elementCount++;
			f = f.next;
		}
		this.elements = [];
		this.vertices = [];
		this.vertexIndices = [];
		var nv = 0;
		var nvi = 0;
		var nel = 0;
		startVert = 0;
		f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			vertCount = 0;
			edge = f.anEdge;
			start = edge;
			while(true) {
				this.vertices[nv++] = edge.Org.coords[0];
				this.vertices[nv++] = edge.Org.coords[1];
				if(vertexDim > 2) {
					this.vertices[nv++] = edge.Org.coords[2];
				}
				this.vertexIndices[nvi++] = edge.Org.idx;
				++vertCount;
				edge = edge.Lnext;
				if(!(edge != start)) {
					break;
				}
			}
			this.elements[nel++] = startVert;
			this.elements[nel++] = vertCount;
			startVert += vertCount;
			f = f.next;
		}
	}
	,addContour: function(vertexDim,vertices) {
		if(this.mesh == null) {
			this.mesh = new hxGeomAlgo__$Tess2_TessMesh();
		}
		if(vertexDim < 2) {
			vertexDim = 2;
		}
		if(vertexDim > 3) {
			vertexDim = 3;
		}
		var e = null;
		var i = 0;
		while(i < vertices.length) {
			if(e == null) {
				e = this.mesh.makeEdge();
				this.mesh.splice(e,e.Sym);
			} else {
				this.mesh.splitEdge(e);
				e = e.Lnext;
			}
			e.Org.coords[0] = vertices[i];
			e.Org.coords[1] = vertices[i + 1];
			if(vertexDim > 2) {
				e.Org.coords[2] = vertices[i + 2];
			} else {
				e.Org.coords[2] = 0.0;
			}
			e.Org.idx = this.vertexIndexCounter++;
			e.winding = 1;
			e.Sym.winding = -1;
			i += vertexDim;
		}
	}
	,tesselate: function(windingRule,resultType,polySize,vertexDim,normal) {
		this.vertices = [];
		this.elements = [];
		this.vertexIndices = [];
		this.vertexIndexCounter = 0;
		if(normal != null) {
			this.normal[0] = normal[0];
			this.normal[1] = normal[1];
			this.normal[2] = normal[2];
		}
		this.windingRule = windingRule;
		if(vertexDim < 2) {
			vertexDim = 2;
		}
		if(vertexDim > 3) {
			vertexDim = 3;
		}
		if(this.mesh == null) {
			return false;
		}
		this.projectPolygon_();
		hxGeomAlgo__$Tess2_Sweep.computeInterior(this);
		var mesh = this.mesh;
		if(resultType == hxGeomAlgo_ResultType.BOUNDARY_CONTOURS) {
			this.setWindingNumber_(mesh,1,true);
		} else {
			this.tessellateInterior_(mesh);
			if(resultType == hxGeomAlgo_ResultType.EXPERIMENTAL_DELAUNAY) {
				this.refineDelaunay_(mesh);
				polySize = 3;
			}
		}
		mesh.check();
		if(resultType == hxGeomAlgo_ResultType.BOUNDARY_CONTOURS) {
			this.outputContours_(mesh,vertexDim);
		} else {
			this.outputPolymesh_(mesh,resultType,polySize,vertexDim);
		}
		return true;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
var trilateral2_Contour = function(pen_,endLine_) {
	if(endLine_ == null) {
		endLine_ = 0;
	}
	this.count = 0;
	this.pointsAnti = [];
	this.pointsClock = [];
	this.pen = pen_;
	this.endLine = endLine_;
};
trilateral2_Contour.__name__ = true;
trilateral2_Contour.prototype = {
	reset: function() {
		this.angleA = 0;
		this.count = 0;
		this.kax = 0;
		this.kay = 0;
		this.kbx = 0;
		this.kby = 0;
		this.kcx = 0;
		this.kcy = 0;
		this.ncx = 0;
		this.ncy = 0;
		this.ax = 0;
		this.ay = 0;
		this.bx = 0;
		this.by = 0;
		this.cx = 0;
		this.cy = 0;
		this.dx = null;
		this.dy = null;
		this.ex = null;
		this.ey = null;
		this.pointsClock.length = 0;
		this.pointsAnti.length = 0;
	}
	,endEdges: function() {
		var pC = this.pointsClock.length;
		var pA = this.pointsAnti.length;
		this.pointsClock[pC++] = this.penultimateCX;
		this.pointsClock[pC++] = this.penultimateCY;
		this.pointsClock[pC++] = this.lastClockX;
		this.pointsClock[pC++] = this.lastClockY;
		this.pointsAnti[pA++] = this.penultimateAX;
		this.pointsAnti[pA++] = this.penultimateAY;
		this.pointsAnti[pA++] = this.lastAntiX;
		this.pointsAnti[pA++] = this.lastAntiY;
	}
	,addQuads: function(clockWise,width_) {
		var currQuadIndex = this.pen.drawType.pos;
		var pC = 0;
		var pA = 0;
		if(clockWise && !this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.pos = v;
				_this.colorType.pos = v;
				var _this1 = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jxOld;
				this.pointsClock[pC++] = this.jyOld;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this2 = this.pen;
				var v1 = this.quadIndex + 1;
				_this2.drawType.pos = v1;
				_this2.colorType.pos = v1;
				var _this3 = this.pen;
				var color1 = -1;
				if(color1 == null) {
					color1 = -1;
				}
				if(color1 == -1) {
					color1 = _this3.currentColor;
				}
				_this3.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jxOld,this.jyOld,0);
				if(_this3.transformMatrix != null) {
					_this3.drawType.transform(_this3.transformMatrix);
				}
				_this3.drawType.next();
				_this3.colorType.cornerColors(color1,color1,color1);
			}
			var _this4 = this.pen;
			var v2 = this.quadIndex;
			_this4.drawType.pos = v2;
			_this4.colorType.pos = v2;
			var _this5 = this.pen;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = _this5.currentColor;
			}
			_this5.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jx,this.jy,0);
			if(_this5.transformMatrix != null) {
				_this5.drawType.transform(_this5.transformMatrix);
			}
			_this5.drawType.next();
			_this5.colorType.cornerColors(color2,color2,color2);
		}
		if(clockWise && this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				this.pointsAnti[pA++] = this.kbx;
				this.pointsAnti[pA++] = this.kby;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.kax;
				this.pointsClock[pC++] = this.kay;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this6 = this.pen;
				var v3 = this.quadIndex;
				_this6.drawType.pos = v3;
				_this6.colorType.pos = v3;
				var _this7 = this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this7.currentColor;
				}
				_this7.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jx,this.jy,0);
				if(_this7.transformMatrix != null) {
					_this7.drawType.transform(_this7.transformMatrix);
				}
				_this7.drawType.next();
				_this7.colorType.cornerColors(color3,color3,color3);
				var _this8 = this.pen;
				var v4 = this.quadIndex + 1;
				_this8.drawType.pos = v4;
				_this8.colorType.pos = v4;
				var _this9 = this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this9.currentColor;
				}
				_this9.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this9.transformMatrix != null) {
					_this9.drawType.transform(_this9.transformMatrix);
				}
				_this9.drawType.next();
				_this9.colorType.cornerColors(color4,color4,color4);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jxOld;
				this.pointsAnti[pA++] = this.jyOld;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this10 = this.pen;
				var v5 = this.quadIndex;
				_this10.drawType.pos = v5;
				_this10.colorType.pos = v5;
				var _this11 = this.pen;
				var color5 = -1;
				if(color5 == null) {
					color5 = -1;
				}
				if(color5 == -1) {
					color5 = _this11.currentColor;
				}
				_this11.drawType.triangle(this.jxOld,this.jyOld,0,this.kbx,this.kby,0,this.jx,this.jy,0);
				if(_this11.transformMatrix != null) {
					_this11.drawType.transform(_this11.transformMatrix);
				}
				_this11.drawType.next();
				_this11.colorType.cornerColors(color5,color5,color5);
				var _this12 = this.pen;
				var v6 = this.quadIndex + 1;
				_this12.drawType.pos = v6;
				_this12.colorType.pos = v6;
				var _this13 = this.pen;
				var color6 = -1;
				if(color6 == null) {
					color6 = -1;
				}
				if(color6 == -1) {
					color6 = _this13.currentColor;
				}
				_this13.drawType.triangle(this.jxOld,this.jyOld,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this13.transformMatrix != null) {
					_this13.drawType.transform(_this13.transformMatrix);
				}
				_this13.drawType.next();
				_this13.colorType.cornerColors(color6,color6,color6);
			}
		}
		if(!clockWise && !this.lastClock) {
			var _this14 = this.pen;
			var v7 = this.quadIndex;
			_this14.drawType.pos = v7;
			_this14.colorType.pos = v7;
			var _this15 = this.pen;
			var color7 = -1;
			if(color7 == null) {
				color7 = -1;
			}
			if(color7 == -1) {
				color7 = _this15.currentColor;
			}
			_this15.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
			if(_this15.transformMatrix != null) {
				_this15.drawType.transform(_this15.transformMatrix);
			}
			_this15.drawType.next();
			_this15.colorType.cornerColors(color7,color7,color7);
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				var _this16 = this.pen;
				var v8 = this.quadIndex + 1;
				_this16.drawType.pos = v8;
				_this16.colorType.pos = v8;
				var _this17 = this.pen;
				var color8 = -1;
				if(color8 == null) {
					color8 = -1;
				}
				if(color8 == -1) {
					color8 = _this17.currentColor;
				}
				_this17.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this17.transformMatrix != null) {
					_this17.drawType.transform(_this17.transformMatrix);
				}
				_this17.drawType.next();
				_this17.colorType.cornerColors(color8,color8,color8);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jxOld;
				this.pointsClock[pC++] = this.jyOld;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				var _this18 = this.pen;
				var v9 = this.quadIndex + 1;
				_this18.drawType.pos = v9;
				_this18.colorType.pos = v9;
				var _this19 = this.pen;
				var color9 = -1;
				if(color9 == null) {
					color9 = -1;
				}
				if(color9 == -1) {
					color9 = _this19.currentColor;
				}
				_this19.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.jxOld,this.jyOld,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color9,color9,color9);
			}
		}
		if(!clockWise && this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this20 = this.pen;
				var v10 = this.quadIndex;
				_this20.drawType.pos = v10;
				_this20.colorType.pos = v10;
				var _this21 = this.pen;
				var color10 = -1;
				if(color10 == null) {
					color10 = -1;
				}
				if(color10 == -1) {
					color10 = _this21.currentColor;
				}
				_this21.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
				if(_this21.transformMatrix != null) {
					_this21.drawType.transform(_this21.transformMatrix);
				}
				_this21.drawType.next();
				_this21.colorType.cornerColors(color10,color10,color10);
				var _this22 = this.pen;
				var v11 = this.quadIndex + 1;
				_this22.drawType.pos = v11;
				_this22.colorType.pos = v11;
				var _this23 = this.pen;
				var color11 = -1;
				if(color11 == null) {
					color11 = -1;
				}
				if(color11 == -1) {
					color11 = _this23.currentColor;
				}
				_this23.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this23.transformMatrix != null) {
					_this23.drawType.transform(_this23.transformMatrix);
				}
				_this23.drawType.next();
				_this23.colorType.cornerColors(color11,color11,color11);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jxOld;
				this.pointsAnti[pA++] = this.jyOld;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this24 = this.pen;
				var v12 = this.quadIndex;
				_this24.drawType.pos = v12;
				_this24.colorType.pos = v12;
				var _this25 = this.pen;
				var color12 = -1;
				if(color12 == null) {
					color12 = -1;
				}
				if(color12 == -1) {
					color12 = _this25.currentColor;
				}
				_this25.drawType.triangle(this.jxOld,this.jyOld,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
				if(_this25.transformMatrix != null) {
					_this25.drawType.transform(_this25.transformMatrix);
				}
				_this25.drawType.next();
				_this25.colorType.cornerColors(color12,color12,color12);
				var _this26 = this.pen;
				var v13 = this.quadIndex + 1;
				_this26.drawType.pos = v13;
				_this26.colorType.pos = v13;
				var _this27 = this.pen;
				var color13 = -1;
				if(color13 == null) {
					color13 = -1;
				}
				if(color13 == -1) {
					color13 = _this27.currentColor;
				}
				_this27.drawType.triangle(this.jxOld,this.jyOld,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this27.transformMatrix != null) {
					_this27.drawType.transform(_this27.transformMatrix);
				}
				_this27.drawType.next();
				_this27.colorType.cornerColors(color13,color13,color13);
			}
		}
		var _this28 = this.pen;
		_this28.drawType.pos = currQuadIndex;
		_this28.colorType.pos = currQuadIndex;
	}
};
var trilateral2_Pen = function(drawType_,colorType_) {
	this.currentColor = 16435934;
	this.drawType = drawType_;
	this.colorType = colorType_;
};
trilateral2_Pen.__name__ = true;
var trilateral2_Shaper = function() { };
trilateral2_Shaper.__name__ = true;
var trilateral2_Sketch = function(pen_,sketchForm_,endLine_) {
	if(endLine_ == null) {
		endLine_ = 0;
	}
	this.width = 0.01;
	this.y = 0.;
	this.x = 0.;
	this.contour = new trilateral2_Contour(pen_,endLine_);
	this.pen = pen_;
	this.endLine = endLine_;
	this.sketchForm = sketchForm_;
	switch(sketchForm_._hx_index) {
	case 0:
		this.line = $bind(this,this.tracerLine);
		break;
	case 1:
		this.line = $bind(this,this.baseLine);
		break;
	case 2:
		this.line = $bind(this,this.crudeLine);
		break;
	case 3:
		this.line = $bind(this,this.fillOnlyLine);
		break;
	case 4:
		this.line = $bind(this,this.fineLine);
		break;
	case 5:
		this.line = $bind(this,this.fineOverlapLine);
		break;
	case 6:
		this.line = $bind(this,this.mediumLine);
		break;
	case 7:
		this.line = $bind(this,this.mediumOverlapLine);
		break;
	case 8:
		this.line = $bind(this,this.roundEndLine);
		break;
	}
	this.points = [];
	this.pointsClock = [];
	this.pointsAnti = [];
	this.points[0] = [];
	this.dim = [];
};
trilateral2_Sketch.__name__ = true;
trilateral2_Sketch.prototype = {
	tracerLine: function(x_,y_) {
		haxe_Log.trace("lineTo( " + this.x + ", " + this.y + ", " + x_ + ", " + y_ + ", width )",{ fileName : "trilateral2/Sketch.hx", lineNumber : 27, className : "trilateral2.Sketch", methodName : "tracerLine"});
	}
	,fillOnlyLine: function(x_,y_) {
	}
	,baseLine: function(x_,y_) {
		haxe_Log.trace("lineTo( " + this.x + ", " + this.y + ", " + x_ + ", " + y_ + ", width )",{ fileName : "trilateral2/Sketch.hx", lineNumber : 27, className : "trilateral2.Sketch", methodName : "tracerLine"});
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
		var _this2 = _this.pen;
		var color1 = -1;
		if(color1 == null) {
			color1 = -1;
		}
		if(color1 == -1) {
			color1 = _this2.currentColor;
		}
		_this2.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this2.transformMatrix != null) {
			_this2.drawType.transform(_this2.transformMatrix);
		}
		_this2.drawType.next();
		_this2.colorType.cornerColors(color1,color1,color1);
	}
	,crudeLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
		var _this2 = _this.pen;
		var color1 = -1;
		if(color1 == null) {
			color1 = -1;
		}
		if(color1 == -1) {
			color1 = _this2.currentColor;
		}
		_this2.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this2.transformMatrix != null) {
			_this2.drawType.transform(_this2.transformMatrix);
		}
		_this2.drawType.next();
		_this2.colorType.cornerColors(color1,color1,color1);
	}
	,roundEndLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var endLineCurve = 3;
		if(endLineCurve == null) {
			endLineCurve = 0;
		}
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		switch(endLineCurve) {
		case 0:
			break;
		case 1:
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 + Math.PI;
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f1;
				if(gamma >= 0 && gamma > Math.PI) {
					f1 = gamma;
				} else {
					var a1 = gamma % (2 * Math.PI);
					f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
				}
				var this2 = f1;
				var zb = this2;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f2;
				if(beta >= 0 && beta > Math.PI) {
					f2 = beta;
				} else {
					var a2 = beta % (2 * Math.PI);
					f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
				}
				var this3 = f2;
				var za1 = this3;
				var f3;
				if(gamma >= 0 && gamma > Math.PI) {
					f3 = gamma;
				} else {
					var a3 = gamma % (2 * Math.PI);
					f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
				}
				var this4 = f3;
				var zb1 = this4;
				var fa1 = za1;
				var fb1 = zb1;
				var theta1 = Math.abs(fa1 - fb1);
				var clockwise1 = fa1 < fb1;
				var dif2 = clockwise1 ? theta1 : -theta1;
				dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
				break;
			case 2:
				var f4;
				if(beta >= 0 && beta > Math.PI) {
					f4 = beta;
				} else {
					var a4 = beta % (2 * Math.PI);
					f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
				}
				var this5 = f4;
				var za2 = this5;
				var f5;
				if(gamma >= 0 && gamma > Math.PI) {
					f5 = gamma;
				} else {
					var a5 = gamma % (2 * Math.PI);
					f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
				}
				var this6 = f5;
				var zb2 = this6;
				var fa2 = za2;
				var fb2 = zb2;
				var theta2 = Math.abs(fa2 - fb2);
				var smallest = theta2 <= Math.PI;
				var clockwise2 = fa2 < fb2;
				var dif3 = clockwise2 ? theta2 : -theta2;
				dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
				break;
			case 3:
				var f6;
				if(beta >= 0 && beta > Math.PI) {
					f6 = beta;
				} else {
					var a6 = beta % (2 * Math.PI);
					f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
				}
				var this7 = f6;
				var za3 = this7;
				var f7;
				if(gamma >= 0 && gamma > Math.PI) {
					f7 = gamma;
				} else {
					var a7 = gamma % (2 * Math.PI);
					f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
				}
				var this8 = f7;
				var zb3 = this8;
				var fa3 = za3;
				var fb3 = zb3;
				var theta3 = Math.abs(fa3 - fb3);
				var largest = theta3 > Math.PI;
				var clockwise3 = fa3 < fb3;
				var dif4 = clockwise3 ? theta3 : -theta3;
				dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step1 = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax_ + radius * Math.sin(angle);
				cy = ay_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = 0;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			break;
		case 2:
			var radius1 = width_ / 2;
			var beta1 = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 - Math.PI;
			var drawType1 = _this.pen.drawType;
			var sides1 = 36;
			if(sides1 == null) {
				sides1 = 36;
			}
			var pi1 = Math.PI;
			var step2 = pi1 * 2 / sides1;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f8;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f8 = beta1;
				} else {
					var a8 = beta1 % (2 * Math.PI);
					f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
				}
				var this9 = f8;
				var za4 = this9;
				var f9;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f9 = gamma1;
				} else {
					var a9 = gamma1 % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var zb4 = this10;
				var fa4 = za4;
				var fb4 = zb4;
				var theta4 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta4 : -theta4;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f10;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f10 = beta1;
				} else {
					var a10 = beta1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var za5 = this11;
				var f11;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f11 = gamma1;
				} else {
					var a11 = gamma1 % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var zb5 = this12;
				var fa5 = za5;
				var fb5 = zb5;
				var theta5 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta5 : -theta5;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f12;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f12 = beta1;
				} else {
					var a12 = beta1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var za6 = this13;
				var f13;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f13 = gamma1;
				} else {
					var a13 = gamma1 % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var zb6 = this14;
				var fa6 = za6;
				var fb6 = zb6;
				var theta6 = Math.abs(fa6 - fb6);
				var smallest1 = theta6 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta6 : -theta6;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
				break;
			case 3:
				var f14;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f14 = beta1;
				} else {
					var a14 = beta1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var za7 = this15;
				var f15;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f15 = gamma1;
				} else {
					var a15 = gamma1 % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var zb7 = this16;
				var fa7 = za7;
				var fb7 = zb7;
				var theta7 = Math.abs(fa7 - fb7);
				var largest1 = theta7 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta7 : -theta7;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			}
			var positive1 = dif5 >= 0;
			var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
			var step3 = dif5 / totalSteps1;
			var angle1 = beta1;
			var cx1;
			var cy1;
			var bx1 = 0;
			var by1 = 0;
			var _g2 = 0;
			var _g11 = totalSteps1 + 1;
			while(_g2 < _g11) {
				var i1 = _g2++;
				cx1 = x_ + radius1 * Math.sin(angle1);
				cy1 = y_ + radius1 * Math.cos(angle1);
				if(i1 != 0) {
					drawType1.triangle(x_,y_,0,bx1,by1,0,cx1,cy1,0);
					var m1 = trilateral2_Shaper.transformMatrix;
					if(m1 != null) {
						drawType1.transform(m1);
					}
					drawType1.next();
				}
				angle1 += step3;
				bx1 = cx1;
				by1 = cy1;
			}
			var len1 = totalSteps1;
			var _this2 = _this.pen;
			var color1 = 0;
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.colorType.colorTriangles(color1,len1);
			break;
		case 3:
			var radius2 = width_ / 2;
			var beta2 = -_this.angle1 - Math.PI / 2;
			var gamma2 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var drawType2 = _this.pen.drawType;
			var sides2 = 36;
			if(sides2 == null) {
				sides2 = 36;
			}
			var pi2 = Math.PI;
			var step4 = pi2 * 2 / sides2;
			var dif10;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f16;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f16 = beta2;
				} else {
					var a16 = beta2 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var za8 = this17;
				var f17;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f17 = gamma2;
				} else {
					var a17 = gamma2 % (2 * Math.PI);
					f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
				}
				var this18 = f17;
				var zb8 = this18;
				var fa8 = za8;
				var fb8 = zb8;
				var theta8 = Math.abs(fa8 - fb8);
				var clockwise8 = fa8 < fb8;
				var dif11 = clockwise8 ? theta8 : -theta8;
				dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
				break;
			case 1:
				var f18;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f18 = beta2;
				} else {
					var a18 = beta2 % (2 * Math.PI);
					f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
				}
				var this19 = f18;
				var za9 = this19;
				var f19;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f19 = gamma2;
				} else {
					var a19 = gamma2 % (2 * Math.PI);
					f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
				}
				var this20 = f19;
				var zb9 = this20;
				var fa9 = za9;
				var fb9 = zb9;
				var theta9 = Math.abs(fa9 - fb9);
				var clockwise9 = fa9 < fb9;
				var dif12 = clockwise9 ? theta9 : -theta9;
				dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
				break;
			case 2:
				var f20;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f20 = beta2;
				} else {
					var a20 = beta2 % (2 * Math.PI);
					f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
				}
				var this21 = f20;
				var za10 = this21;
				var f21;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f21 = gamma2;
				} else {
					var a21 = gamma2 % (2 * Math.PI);
					f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
				}
				var this22 = f21;
				var zb10 = this22;
				var fa10 = za10;
				var fb10 = zb10;
				var theta10 = Math.abs(fa10 - fb10);
				var smallest2 = theta10 <= Math.PI;
				var clockwise10 = fa10 < fb10;
				var dif13 = clockwise10 ? theta10 : -theta10;
				dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
				break;
			case 3:
				var f22;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f22 = beta2;
				} else {
					var a22 = beta2 % (2 * Math.PI);
					f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
				}
				var this23 = f22;
				var za11 = this23;
				var f23;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f23 = gamma2;
				} else {
					var a23 = gamma2 % (2 * Math.PI);
					f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
				}
				var this24 = f23;
				var zb11 = this24;
				var fa11 = za11;
				var fb11 = zb11;
				var theta11 = Math.abs(fa11 - fb11);
				var largest2 = theta11 > Math.PI;
				var clockwise11 = fa11 < fb11;
				var dif14 = clockwise11 ? theta11 : -theta11;
				dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
				break;
			}
			var positive2 = dif10 >= 0;
			var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
			var step5 = dif10 / totalSteps2;
			var angle2 = beta2;
			var cx2;
			var cy2;
			var bx2 = 0;
			var by2 = 0;
			var _g3 = 0;
			var _g12 = totalSteps2 + 1;
			while(_g3 < _g12) {
				var i2 = _g3++;
				cx2 = ax_ + radius2 * Math.sin(angle2);
				cy2 = ay_ + radius2 * Math.cos(angle2);
				if(i2 != 0) {
					drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
					var m2 = trilateral2_Shaper.transformMatrix;
					if(m2 != null) {
						drawType2.transform(m2);
					}
					drawType2.next();
				}
				angle2 += step5;
				bx2 = cx2;
				by2 = cy2;
			}
			var len2 = totalSteps2;
			var _this3 = _this.pen;
			var color2 = 0;
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.colorType.colorTriangles(color2,len2);
			var radius3 = width_ / 2;
			var beta3 = -_this.angle1 - Math.PI / 2;
			var gamma3 = -_this.angle1 - Math.PI / 2 - Math.PI;
			var drawType3 = _this.pen.drawType;
			var sides3 = 36;
			if(sides3 == null) {
				sides3 = 36;
			}
			var pi3 = Math.PI;
			var step6 = pi3 * 2 / sides3;
			var dif15;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f24;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f24 = beta3;
				} else {
					var a24 = beta3 % (2 * Math.PI);
					f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
				}
				var this25 = f24;
				var za12 = this25;
				var f25;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f25 = gamma3;
				} else {
					var a25 = gamma3 % (2 * Math.PI);
					f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
				}
				var this26 = f25;
				var zb12 = this26;
				var fa12 = za12;
				var fb12 = zb12;
				var theta12 = Math.abs(fa12 - fb12);
				var clockwise12 = fa12 < fb12;
				var dif16 = clockwise12 ? theta12 : -theta12;
				dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
				break;
			case 1:
				var f26;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f26 = beta3;
				} else {
					var a26 = beta3 % (2 * Math.PI);
					f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
				}
				var this27 = f26;
				var za13 = this27;
				var f27;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f27 = gamma3;
				} else {
					var a27 = gamma3 % (2 * Math.PI);
					f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
				}
				var this28 = f27;
				var zb13 = this28;
				var fa13 = za13;
				var fb13 = zb13;
				var theta13 = Math.abs(fa13 - fb13);
				var clockwise13 = fa13 < fb13;
				var dif17 = clockwise13 ? theta13 : -theta13;
				dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
				break;
			case 2:
				var f28;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f28 = beta3;
				} else {
					var a28 = beta3 % (2 * Math.PI);
					f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
				}
				var this29 = f28;
				var za14 = this29;
				var f29;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f29 = gamma3;
				} else {
					var a29 = gamma3 % (2 * Math.PI);
					f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
				}
				var this30 = f29;
				var zb14 = this30;
				var fa14 = za14;
				var fb14 = zb14;
				var theta14 = Math.abs(fa14 - fb14);
				var smallest3 = theta14 <= Math.PI;
				var clockwise14 = fa14 < fb14;
				var dif18 = clockwise14 ? theta14 : -theta14;
				dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
				break;
			case 3:
				var f30;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f30 = beta3;
				} else {
					var a30 = beta3 % (2 * Math.PI);
					f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
				}
				var this31 = f30;
				var za15 = this31;
				var f31;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f31 = gamma3;
				} else {
					var a31 = gamma3 % (2 * Math.PI);
					f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
				}
				var this32 = f31;
				var zb15 = this32;
				var fa15 = za15;
				var fb15 = zb15;
				var theta15 = Math.abs(fa15 - fb15);
				var largest3 = theta15 > Math.PI;
				var clockwise15 = fa15 < fb15;
				var dif19 = clockwise15 ? theta15 : -theta15;
				dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
				break;
			}
			var positive3 = dif15 >= 0;
			var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
			var step7 = dif15 / totalSteps3;
			var angle3 = beta3;
			var cx3;
			var cy3;
			var bx3 = 0;
			var by3 = 0;
			var _g4 = 0;
			var _g13 = totalSteps3 + 1;
			while(_g4 < _g13) {
				var i3 = _g4++;
				cx3 = x_ + radius3 * Math.sin(angle3);
				cy3 = y_ + radius3 * Math.cos(angle3);
				if(i3 != 0) {
					drawType3.triangle(x_,y_,0,bx3,by3,0,cx3,cy3,0);
					var m3 = trilateral2_Shaper.transformMatrix;
					if(m3 != null) {
						drawType3.transform(m3);
					}
					drawType3.next();
				}
				angle3 += step7;
				bx3 = cx3;
				by3 = cy3;
			}
			var len3 = totalSteps3;
			var _this4 = _this.pen;
			var color3 = 0;
			if(color3 == -1) {
				color3 = _this4.currentColor;
			}
			_this4.colorType.colorTriangles(color3,len3);
			break;
		}
		var _this5 = _this.pen;
		var color4 = -1;
		if(color4 == null) {
			color4 = -1;
		}
		if(color4 == -1) {
			color4 = _this5.currentColor;
		}
		_this5.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this5.transformMatrix != null) {
			_this5.drawType.transform(_this5.transformMatrix);
		}
		_this5.drawType.next();
		_this5.colorType.cornerColors(color4,color4,color4);
		var _this6 = _this.pen;
		var color5 = -1;
		if(color5 == null) {
			color5 = -1;
		}
		if(color5 == -1) {
			color5 = _this6.currentColor;
		}
		_this6.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this6.transformMatrix != null) {
			_this6.drawType.transform(_this6.transformMatrix);
		}
		_this6.drawType.next();
		_this6.colorType.cornerColors(color5,color5,color5);
	}
	,mediumLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = false;
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(_this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(_this.count != 0) {
			_this.addQuads(clockWise,width_);
		}
		_this.quadIndex = _this.pen.drawType.pos;
		if(_this.count == 0) {
			_this.penultimateAX = _this.dxPrev;
			_this.penultimateAY = _this.dyPrev;
			_this.lastAntiX = _this.ex;
			_this.lastAntiY = _this.ey;
			_this.penultimateCX = _this.dx;
			_this.penultimateCY = _this.dy;
			_this.lastClockX = _this.exPrev;
			_this.lastClockY = _this.eyPrev;
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == null) {
				color1 = -1;
			}
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(clockWise && !_this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			}
			if(clockWise && _this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this6 = _this.pen;
				var color5 = -1;
				if(color5 == null) {
					color5 = -1;
				}
				if(color5 == -1) {
					color5 = _this6.currentColor;
				}
				_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this6.transformMatrix != null) {
					_this6.drawType.transform(_this6.transformMatrix);
				}
				_this6.drawType.next();
				_this6.colorType.cornerColors(color5,color5,color5);
				var _this7 = _this.pen;
				var color6 = -1;
				if(color6 == null) {
					color6 = -1;
				}
				if(color6 == -1) {
					color6 = _this7.currentColor;
				}
				_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this7.transformMatrix != null) {
					_this7.drawType.transform(_this7.transformMatrix);
				}
				_this7.drawType.next();
				_this7.colorType.cornerColors(color6,color6,color6);
			}
			if(!clockWise && !_this.lastClock) {
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.jx;
				_this.lastClockY = _this.jy;
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				var _this8 = _this.pen;
				var color7 = -1;
				if(color7 == null) {
					color7 = -1;
				}
				if(color7 == -1) {
					color7 = _this8.currentColor;
				}
				_this8.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
				if(_this8.transformMatrix != null) {
					_this8.drawType.transform(_this8.transformMatrix);
				}
				_this8.drawType.next();
				_this8.colorType.cornerColors(color7,color7,color7);
				var _this9 = _this.pen;
				var color8 = -1;
				if(color8 == null) {
					color8 = -1;
				}
				if(color8 == -1) {
					color8 = _this9.currentColor;
				}
				_this9.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this9.transformMatrix != null) {
					_this9.drawType.transform(_this9.transformMatrix);
				}
				_this9.drawType.next();
				_this9.colorType.cornerColors(color8,color8,color8);
			}
			if(!clockWise && _this.lastClock) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.jx;
				_this.penultimateCY = _this.jy;
				_this.lastClockX = _this.dx;
				_this.lastClockY = _this.dy;
				var _this10 = _this.pen;
				var color9 = -1;
				if(color9 == null) {
					color9 = -1;
				}
				if(color9 == -1) {
					color9 = _this10.currentColor;
				}
				_this10.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this10.transformMatrix != null) {
					_this10.drawType.transform(_this10.transformMatrix);
				}
				_this10.drawType.next();
				_this10.colorType.cornerColors(color9,color9,color9);
				var _this11 = _this.pen;
				var color10 = -1;
				if(color10 == null) {
					color10 = -1;
				}
				if(color10 == -1) {
					color10 = _this11.currentColor;
				}
				_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
				if(_this11.transformMatrix != null) {
					_this11.drawType.transform(_this11.transformMatrix);
				}
				_this11.drawType.next();
				_this11.colorType.cornerColors(color10,color10,color10);
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this12 = _this.pen;
				var color11 = -1;
				if(color11 == -1) {
					color11 = _this12.currentColor;
				}
				_this12.colorType.colorTriangles(color11,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this13 = _this.pen;
				var color12 = -1;
				if(color12 == -1) {
					color12 = _this13.currentColor;
				}
				_this13.colorType.colorTriangles(color12,len3);
			}
		} else if(_this.count != 0) {
			if(clockWise) {
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == null) {
					color13 = -1;
				}
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this14.transformMatrix != null) {
					_this14.drawType.transform(_this14.transformMatrix);
				}
				_this14.drawType.next();
				_this14.colorType.cornerColors(color13,color13,color13);
			} else {
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == null) {
					color14 = -1;
				}
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this15.transformMatrix != null) {
					_this15.drawType.transform(_this15.transformMatrix);
				}
				_this15.drawType.next();
				_this15.colorType.cornerColors(color14,color14,color14);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && _this.count != 0) {
			if(clockWise) {
				var _this16 = _this.pen;
				var color15 = -1;
				if(color15 == null) {
					color15 = -1;
				}
				if(color15 == -1) {
					color15 = _this16.currentColor;
				}
				_this16.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this16.transformMatrix != null) {
					_this16.drawType.transform(_this16.transformMatrix);
				}
				_this16.drawType.next();
				_this16.colorType.cornerColors(color15,color15,color15);
				var _this17 = _this.pen;
				var color16 = -1;
				if(color16 == null) {
					color16 = -1;
				}
				if(color16 == -1) {
					color16 = _this17.currentColor;
				}
				_this17.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this17.transformMatrix != null) {
					_this17.drawType.transform(_this17.transformMatrix);
				}
				_this17.drawType.next();
				_this17.colorType.cornerColors(color16,color16,color16);
			} else {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,mediumOverlapLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = false;
		var overlap = true;
		if(overlap == null) {
			overlap = false;
		}
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(!overlap && _this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(overlap) {
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(_this.count != 0) {
				_this.addQuads(clockWise,width_);
			}
			_this.quadIndex = _this.pen.drawType.pos;
			if(_this.count == 0) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			} else {
				if(clockWise && !_this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this6 = _this.pen;
					var color5 = -1;
					if(color5 == null) {
						color5 = -1;
					}
					if(color5 == -1) {
						color5 = _this6.currentColor;
					}
					_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this6.transformMatrix != null) {
						_this6.drawType.transform(_this6.transformMatrix);
					}
					_this6.drawType.next();
					_this6.colorType.cornerColors(color5,color5,color5);
					var _this7 = _this.pen;
					var color6 = -1;
					if(color6 == null) {
						color6 = -1;
					}
					if(color6 == -1) {
						color6 = _this7.currentColor;
					}
					_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this7.transformMatrix != null) {
						_this7.drawType.transform(_this7.transformMatrix);
					}
					_this7.drawType.next();
					_this7.colorType.cornerColors(color6,color6,color6);
				}
				if(clockWise && _this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this8 = _this.pen;
					var color7 = -1;
					if(color7 == null) {
						color7 = -1;
					}
					if(color7 == -1) {
						color7 = _this8.currentColor;
					}
					_this8.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this8.transformMatrix != null) {
						_this8.drawType.transform(_this8.transformMatrix);
					}
					_this8.drawType.next();
					_this8.colorType.cornerColors(color7,color7,color7);
					var _this9 = _this.pen;
					var color8 = -1;
					if(color8 == null) {
						color8 = -1;
					}
					if(color8 == -1) {
						color8 = _this9.currentColor;
					}
					_this9.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this9.transformMatrix != null) {
						_this9.drawType.transform(_this9.transformMatrix);
					}
					_this9.drawType.next();
					_this9.colorType.cornerColors(color8,color8,color8);
				}
				if(!clockWise && !_this.lastClock) {
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.jx;
					_this.lastClockY = _this.jy;
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					var _this10 = _this.pen;
					var color9 = -1;
					if(color9 == null) {
						color9 = -1;
					}
					if(color9 == -1) {
						color9 = _this10.currentColor;
					}
					_this10.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
					if(_this10.transformMatrix != null) {
						_this10.drawType.transform(_this10.transformMatrix);
					}
					_this10.drawType.next();
					_this10.colorType.cornerColors(color9,color9,color9);
					var _this11 = _this.pen;
					var color10 = -1;
					if(color10 == null) {
						color10 = -1;
					}
					if(color10 == -1) {
						color10 = _this11.currentColor;
					}
					_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this11.transformMatrix != null) {
						_this11.drawType.transform(_this11.transformMatrix);
					}
					_this11.drawType.next();
					_this11.colorType.cornerColors(color10,color10,color10);
				}
				if(!clockWise && _this.lastClock) {
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.jx;
					_this.penultimateCY = _this.jy;
					_this.lastClockX = _this.dx;
					_this.lastClockY = _this.dy;
					var _this12 = _this.pen;
					var color11 = -1;
					if(color11 == null) {
						color11 = -1;
					}
					if(color11 == -1) {
						color11 = _this12.currentColor;
					}
					_this12.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this12.transformMatrix != null) {
						_this12.drawType.transform(_this12.transformMatrix);
					}
					_this12.drawType.next();
					_this12.colorType.cornerColors(color11,color11,color11);
					var _this13 = _this.pen;
					var color12 = -1;
					if(color12 == null) {
						color12 = -1;
					}
					if(color12 == -1) {
						color12 = _this13.currentColor;
					}
					_this13.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
					if(_this13.transformMatrix != null) {
						_this13.drawType.transform(_this13.transformMatrix);
					}
					_this13.drawType.next();
					_this13.colorType.cornerColors(color12,color12,color12);
				}
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.colorType.colorTriangles(color13,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.colorType.colorTriangles(color14,len3);
			}
		} else if(_this.count != 0) {
			if(overlap) {
				if(clockWise) {
					var _this16 = _this.pen;
					var color15 = -1;
					if(color15 == null) {
						color15 = -1;
					}
					if(color15 == -1) {
						color15 = _this16.currentColor;
					}
					_this16.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.ax,_this.ay,0);
					if(_this16.transformMatrix != null) {
						_this16.drawType.transform(_this16.transformMatrix);
					}
					_this16.drawType.next();
					_this16.colorType.cornerColors(color15,color15,color15);
				} else {
					var _this17 = _this.pen;
					var color16 = -1;
					if(color16 == null) {
						color16 = -1;
					}
					if(color16 == -1) {
						color16 = _this17.currentColor;
					}
					_this17.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.ax,_this.ay,0);
					if(_this17.transformMatrix != null) {
						_this17.drawType.transform(_this17.transformMatrix);
					}
					_this17.drawType.next();
					_this17.colorType.cornerColors(color16,color16,color16);
				}
			} else if(clockWise) {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
			} else {
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && !overlap && _this.count != 0) {
			if(clockWise) {
				var _this20 = _this.pen;
				var color19 = -1;
				if(color19 == null) {
					color19 = -1;
				}
				if(color19 == -1) {
					color19 = _this20.currentColor;
				}
				_this20.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this20.transformMatrix != null) {
					_this20.drawType.transform(_this20.transformMatrix);
				}
				_this20.drawType.next();
				_this20.colorType.cornerColors(color19,color19,color19);
				var _this21 = _this.pen;
				var color20 = -1;
				if(color20 == null) {
					color20 = -1;
				}
				if(color20 == -1) {
					color20 = _this21.currentColor;
				}
				_this21.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this21.transformMatrix != null) {
					_this21.drawType.transform(_this21.transformMatrix);
				}
				_this21.drawType.next();
				_this21.colorType.cornerColors(color20,color20,color20);
			} else {
				var _this22 = _this.pen;
				var color21 = -1;
				if(color21 == null) {
					color21 = -1;
				}
				if(color21 == -1) {
					color21 = _this22.currentColor;
				}
				_this22.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this22.transformMatrix != null) {
					_this22.drawType.transform(_this22.transformMatrix);
				}
				_this22.drawType.next();
				_this22.colorType.cornerColors(color21,color21,color21);
				var _this23 = _this.pen;
				var color22 = -1;
				if(color22 == null) {
					color22 = -1;
				}
				if(color22 == -1) {
					color22 = _this23.currentColor;
				}
				_this23.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this23.transformMatrix != null) {
					_this23.drawType.transform(_this23.transformMatrix);
				}
				_this23.drawType.next();
				_this23.colorType.cornerColors(color22,color22,color22);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,fineLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = true;
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(_this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(_this.count != 0) {
			_this.addQuads(clockWise,width_);
		}
		_this.quadIndex = _this.pen.drawType.pos;
		if(_this.count == 0) {
			_this.penultimateAX = _this.dxPrev;
			_this.penultimateAY = _this.dyPrev;
			_this.lastAntiX = _this.ex;
			_this.lastAntiY = _this.ey;
			_this.penultimateCX = _this.dx;
			_this.penultimateCY = _this.dy;
			_this.lastClockX = _this.exPrev;
			_this.lastClockY = _this.eyPrev;
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == null) {
				color1 = -1;
			}
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(clockWise && !_this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			}
			if(clockWise && _this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this6 = _this.pen;
				var color5 = -1;
				if(color5 == null) {
					color5 = -1;
				}
				if(color5 == -1) {
					color5 = _this6.currentColor;
				}
				_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this6.transformMatrix != null) {
					_this6.drawType.transform(_this6.transformMatrix);
				}
				_this6.drawType.next();
				_this6.colorType.cornerColors(color5,color5,color5);
				var _this7 = _this.pen;
				var color6 = -1;
				if(color6 == null) {
					color6 = -1;
				}
				if(color6 == -1) {
					color6 = _this7.currentColor;
				}
				_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this7.transformMatrix != null) {
					_this7.drawType.transform(_this7.transformMatrix);
				}
				_this7.drawType.next();
				_this7.colorType.cornerColors(color6,color6,color6);
			}
			if(!clockWise && !_this.lastClock) {
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.jx;
				_this.lastClockY = _this.jy;
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				var _this8 = _this.pen;
				var color7 = -1;
				if(color7 == null) {
					color7 = -1;
				}
				if(color7 == -1) {
					color7 = _this8.currentColor;
				}
				_this8.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
				if(_this8.transformMatrix != null) {
					_this8.drawType.transform(_this8.transformMatrix);
				}
				_this8.drawType.next();
				_this8.colorType.cornerColors(color7,color7,color7);
				var _this9 = _this.pen;
				var color8 = -1;
				if(color8 == null) {
					color8 = -1;
				}
				if(color8 == -1) {
					color8 = _this9.currentColor;
				}
				_this9.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this9.transformMatrix != null) {
					_this9.drawType.transform(_this9.transformMatrix);
				}
				_this9.drawType.next();
				_this9.colorType.cornerColors(color8,color8,color8);
			}
			if(!clockWise && _this.lastClock) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.jx;
				_this.penultimateCY = _this.jy;
				_this.lastClockX = _this.dx;
				_this.lastClockY = _this.dy;
				var _this10 = _this.pen;
				var color9 = -1;
				if(color9 == null) {
					color9 = -1;
				}
				if(color9 == -1) {
					color9 = _this10.currentColor;
				}
				_this10.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this10.transformMatrix != null) {
					_this10.drawType.transform(_this10.transformMatrix);
				}
				_this10.drawType.next();
				_this10.colorType.cornerColors(color9,color9,color9);
				var _this11 = _this.pen;
				var color10 = -1;
				if(color10 == null) {
					color10 = -1;
				}
				if(color10 == -1) {
					color10 = _this11.currentColor;
				}
				_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
				if(_this11.transformMatrix != null) {
					_this11.drawType.transform(_this11.transformMatrix);
				}
				_this11.drawType.next();
				_this11.colorType.cornerColors(color10,color10,color10);
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this12 = _this.pen;
				var color11 = -1;
				if(color11 == -1) {
					color11 = _this12.currentColor;
				}
				_this12.colorType.colorTriangles(color11,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this13 = _this.pen;
				var color12 = -1;
				if(color12 == -1) {
					color12 = _this13.currentColor;
				}
				_this13.colorType.colorTriangles(color12,len3);
			}
		} else if(_this.count != 0) {
			if(clockWise) {
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == null) {
					color13 = -1;
				}
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this14.transformMatrix != null) {
					_this14.drawType.transform(_this14.transformMatrix);
				}
				_this14.drawType.next();
				_this14.colorType.cornerColors(color13,color13,color13);
			} else {
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == null) {
					color14 = -1;
				}
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this15.transformMatrix != null) {
					_this15.drawType.transform(_this15.transformMatrix);
				}
				_this15.drawType.next();
				_this15.colorType.cornerColors(color14,color14,color14);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && _this.count != 0) {
			if(clockWise) {
				var _this16 = _this.pen;
				var color15 = -1;
				if(color15 == null) {
					color15 = -1;
				}
				if(color15 == -1) {
					color15 = _this16.currentColor;
				}
				_this16.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this16.transformMatrix != null) {
					_this16.drawType.transform(_this16.transformMatrix);
				}
				_this16.drawType.next();
				_this16.colorType.cornerColors(color15,color15,color15);
				var _this17 = _this.pen;
				var color16 = -1;
				if(color16 == null) {
					color16 = -1;
				}
				if(color16 == -1) {
					color16 = _this17.currentColor;
				}
				_this17.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this17.transformMatrix != null) {
					_this17.drawType.transform(_this17.transformMatrix);
				}
				_this17.drawType.next();
				_this17.colorType.cornerColors(color16,color16,color16);
			} else {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,fineOverlapLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = true;
		var overlap = true;
		if(overlap == null) {
			overlap = false;
		}
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(!overlap && _this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(overlap) {
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(_this.count != 0) {
				_this.addQuads(clockWise,width_);
			}
			_this.quadIndex = _this.pen.drawType.pos;
			if(_this.count == 0) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			} else {
				if(clockWise && !_this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this6 = _this.pen;
					var color5 = -1;
					if(color5 == null) {
						color5 = -1;
					}
					if(color5 == -1) {
						color5 = _this6.currentColor;
					}
					_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this6.transformMatrix != null) {
						_this6.drawType.transform(_this6.transformMatrix);
					}
					_this6.drawType.next();
					_this6.colorType.cornerColors(color5,color5,color5);
					var _this7 = _this.pen;
					var color6 = -1;
					if(color6 == null) {
						color6 = -1;
					}
					if(color6 == -1) {
						color6 = _this7.currentColor;
					}
					_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this7.transformMatrix != null) {
						_this7.drawType.transform(_this7.transformMatrix);
					}
					_this7.drawType.next();
					_this7.colorType.cornerColors(color6,color6,color6);
				}
				if(clockWise && _this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this8 = _this.pen;
					var color7 = -1;
					if(color7 == null) {
						color7 = -1;
					}
					if(color7 == -1) {
						color7 = _this8.currentColor;
					}
					_this8.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this8.transformMatrix != null) {
						_this8.drawType.transform(_this8.transformMatrix);
					}
					_this8.drawType.next();
					_this8.colorType.cornerColors(color7,color7,color7);
					var _this9 = _this.pen;
					var color8 = -1;
					if(color8 == null) {
						color8 = -1;
					}
					if(color8 == -1) {
						color8 = _this9.currentColor;
					}
					_this9.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this9.transformMatrix != null) {
						_this9.drawType.transform(_this9.transformMatrix);
					}
					_this9.drawType.next();
					_this9.colorType.cornerColors(color8,color8,color8);
				}
				if(!clockWise && !_this.lastClock) {
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.jx;
					_this.lastClockY = _this.jy;
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					var _this10 = _this.pen;
					var color9 = -1;
					if(color9 == null) {
						color9 = -1;
					}
					if(color9 == -1) {
						color9 = _this10.currentColor;
					}
					_this10.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
					if(_this10.transformMatrix != null) {
						_this10.drawType.transform(_this10.transformMatrix);
					}
					_this10.drawType.next();
					_this10.colorType.cornerColors(color9,color9,color9);
					var _this11 = _this.pen;
					var color10 = -1;
					if(color10 == null) {
						color10 = -1;
					}
					if(color10 == -1) {
						color10 = _this11.currentColor;
					}
					_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this11.transformMatrix != null) {
						_this11.drawType.transform(_this11.transformMatrix);
					}
					_this11.drawType.next();
					_this11.colorType.cornerColors(color10,color10,color10);
				}
				if(!clockWise && _this.lastClock) {
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.jx;
					_this.penultimateCY = _this.jy;
					_this.lastClockX = _this.dx;
					_this.lastClockY = _this.dy;
					var _this12 = _this.pen;
					var color11 = -1;
					if(color11 == null) {
						color11 = -1;
					}
					if(color11 == -1) {
						color11 = _this12.currentColor;
					}
					_this12.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this12.transformMatrix != null) {
						_this12.drawType.transform(_this12.transformMatrix);
					}
					_this12.drawType.next();
					_this12.colorType.cornerColors(color11,color11,color11);
					var _this13 = _this.pen;
					var color12 = -1;
					if(color12 == null) {
						color12 = -1;
					}
					if(color12 == -1) {
						color12 = _this13.currentColor;
					}
					_this13.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
					if(_this13.transformMatrix != null) {
						_this13.drawType.transform(_this13.transformMatrix);
					}
					_this13.drawType.next();
					_this13.colorType.cornerColors(color12,color12,color12);
				}
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.colorType.colorTriangles(color13,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.colorType.colorTriangles(color14,len3);
			}
		} else if(_this.count != 0) {
			if(overlap) {
				if(clockWise) {
					var _this16 = _this.pen;
					var color15 = -1;
					if(color15 == null) {
						color15 = -1;
					}
					if(color15 == -1) {
						color15 = _this16.currentColor;
					}
					_this16.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.ax,_this.ay,0);
					if(_this16.transformMatrix != null) {
						_this16.drawType.transform(_this16.transformMatrix);
					}
					_this16.drawType.next();
					_this16.colorType.cornerColors(color15,color15,color15);
				} else {
					var _this17 = _this.pen;
					var color16 = -1;
					if(color16 == null) {
						color16 = -1;
					}
					if(color16 == -1) {
						color16 = _this17.currentColor;
					}
					_this17.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.ax,_this.ay,0);
					if(_this17.transformMatrix != null) {
						_this17.drawType.transform(_this17.transformMatrix);
					}
					_this17.drawType.next();
					_this17.colorType.cornerColors(color16,color16,color16);
				}
			} else if(clockWise) {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
			} else {
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && !overlap && _this.count != 0) {
			if(clockWise) {
				var _this20 = _this.pen;
				var color19 = -1;
				if(color19 == null) {
					color19 = -1;
				}
				if(color19 == -1) {
					color19 = _this20.currentColor;
				}
				_this20.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this20.transformMatrix != null) {
					_this20.drawType.transform(_this20.transformMatrix);
				}
				_this20.drawType.next();
				_this20.colorType.cornerColors(color19,color19,color19);
				var _this21 = _this.pen;
				var color20 = -1;
				if(color20 == null) {
					color20 = -1;
				}
				if(color20 == -1) {
					color20 = _this21.currentColor;
				}
				_this21.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this21.transformMatrix != null) {
					_this21.drawType.transform(_this21.transformMatrix);
				}
				_this21.drawType.next();
				_this21.colorType.cornerColors(color20,color20,color20);
			} else {
				var _this22 = _this.pen;
				var color21 = -1;
				if(color21 == null) {
					color21 = -1;
				}
				if(color21 == -1) {
					color21 = _this22.currentColor;
				}
				_this22.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this22.transformMatrix != null) {
					_this22.drawType.transform(_this22.transformMatrix);
				}
				_this22.drawType.next();
				_this22.colorType.cornerColors(color21,color21,color21);
				var _this23 = _this.pen;
				var color22 = -1;
				if(color22 == null) {
					color22 = -1;
				}
				if(color22 == -1) {
					color22 = _this23.currentColor;
				}
				_this23.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this23.transformMatrix != null) {
					_this23.drawType.transform(_this23.transformMatrix);
				}
				_this23.drawType.next();
				_this23.colorType.cornerColors(color22,color22,color22);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,moveTo: function(x_,y_) {
		if(this.endLine == 2 || this.endLine == 3) {
			var _this = this.contour;
			var width_ = this.width;
			_this.endEdges();
			if(_this.count != 0) {
				var ax = _this.bx;
				var ay = _this.by;
				var radius = width_ / 2;
				var beta = -_this.angle1 - Math.PI / 2;
				var gamma = -_this.angle1 - Math.PI / 2 - Math.PI;
				var temp = [];
				var drawType = _this.pen.drawType;
				var sides = 36;
				if(sides == null) {
					sides = 36;
				}
				var pi = Math.PI;
				var step = pi * 2 / sides;
				var dif;
				switch(fracs_DifferencePreference.SMALL._hx_index) {
				case 0:
					var f;
					if(beta >= 0 && beta > Math.PI) {
						f = beta;
					} else {
						var a = beta % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var za = this1;
					var f1;
					if(gamma >= 0 && gamma > Math.PI) {
						f1 = gamma;
					} else {
						var a1 = gamma % (2 * Math.PI);
						f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
					}
					var this2 = f1;
					var zb = this2;
					var fa = za;
					var fb = zb;
					var theta = Math.abs(fa - fb);
					var clockwise = fa < fb;
					var dif1 = clockwise ? theta : -theta;
					dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
					break;
				case 1:
					var f2;
					if(beta >= 0 && beta > Math.PI) {
						f2 = beta;
					} else {
						var a2 = beta % (2 * Math.PI);
						f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
					}
					var this3 = f2;
					var za1 = this3;
					var f3;
					if(gamma >= 0 && gamma > Math.PI) {
						f3 = gamma;
					} else {
						var a3 = gamma % (2 * Math.PI);
						f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
					}
					var this4 = f3;
					var zb1 = this4;
					var fa1 = za1;
					var fb1 = zb1;
					var theta1 = Math.abs(fa1 - fb1);
					var clockwise1 = fa1 < fb1;
					var dif2 = clockwise1 ? theta1 : -theta1;
					dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
					break;
				case 2:
					var f4;
					if(beta >= 0 && beta > Math.PI) {
						f4 = beta;
					} else {
						var a4 = beta % (2 * Math.PI);
						f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
					}
					var this5 = f4;
					var za2 = this5;
					var f5;
					if(gamma >= 0 && gamma > Math.PI) {
						f5 = gamma;
					} else {
						var a5 = gamma % (2 * Math.PI);
						f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
					}
					var this6 = f5;
					var zb2 = this6;
					var fa2 = za2;
					var fb2 = zb2;
					var theta2 = Math.abs(fa2 - fb2);
					var smallest = theta2 <= Math.PI;
					var clockwise2 = fa2 < fb2;
					var dif3 = clockwise2 ? theta2 : -theta2;
					dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
					break;
				case 3:
					var f6;
					if(beta >= 0 && beta > Math.PI) {
						f6 = beta;
					} else {
						var a6 = beta % (2 * Math.PI);
						f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
					}
					var this7 = f6;
					var za3 = this7;
					var f7;
					if(gamma >= 0 && gamma > Math.PI) {
						f7 = gamma;
					} else {
						var a7 = gamma % (2 * Math.PI);
						f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
					}
					var this8 = f7;
					var zb3 = this8;
					var fa3 = za3;
					var fb3 = zb3;
					var theta3 = Math.abs(fa3 - fb3);
					var largest = theta3 > Math.PI;
					var clockwise3 = fa3 < fb3;
					var dif4 = clockwise3 ? theta3 : -theta3;
					dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
					break;
				}
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step1 = dif / totalSteps;
				var angle = beta;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = temp.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax + radius * Math.sin(angle);
					cy = ay + radius * Math.cos(angle);
					temp[p2++] = cx;
					temp[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step1;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = 0;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
				var pA = _this.pointsAnti.length;
				var len1 = temp.length / 2 | 0;
				var _g2 = 0;
				var _g11 = len1 + 2;
				while(_g2 < _g11) {
					var i1 = _g2++;
					_this.pointsAnti[pA++] = temp[i1];
				}
				var pC = _this.pointsClock.length;
				var _g21 = 1;
				var _g3 = len1 / 2 + 1 | 0;
				while(_g21 < _g3) {
					var i2 = _g21++;
					_this.pointsClock[pC++] = temp[temp.length - 2 * i2];
					_this.pointsClock[pC++] = temp[temp.length - 2 * i2 - 1];
				}
			}
		}
		this.x = x_;
		this.y = y_;
		var l = this.points.length;
		this.points[l] = [];
		this.points[l][0] = x_;
		this.points[l][1] = y_;
		this.pointsClock[this.pointsClock.length] = this.contour.pointsClock.slice();
		this.pointsAnti[this.pointsAnti.length] = this.contour.pointsAnti.slice();
		this.dim[this.dim.length] = { minX : Infinity, maxX : -Infinity, minY : Infinity, maxY : -Infinity};
		var d = this.dim[this.dim.length - 1];
		if(x_ < d.minX) {
			d.minX = x_;
		}
		if(x_ > d.maxX) {
			d.maxX = x_;
		}
		if(y_ < d.minY) {
			d.minY = y_;
		}
		if(y_ > d.maxY) {
			d.maxY = y_;
		}
		this.contour.reset();
	}
};
var trilateral2_SketchForm = $hxEnums["trilateral2.SketchForm"] = { __ename__ : "trilateral2.SketchForm", __constructs__ : ["Tracer","Base","Crude","FillOnly","Fine","FineOverlap","Medium","MediumOverlap","RoundEnd"]
	,Tracer: {_hx_index:0,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Base: {_hx_index:1,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Crude: {_hx_index:2,__enum__:"trilateral2.SketchForm",toString:$estr}
	,FillOnly: {_hx_index:3,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Fine: {_hx_index:4,__enum__:"trilateral2.SketchForm",toString:$estr}
	,FineOverlap: {_hx_index:5,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Medium: {_hx_index:6,__enum__:"trilateral2.SketchForm",toString:$estr}
	,MediumOverlap: {_hx_index:7,__enum__:"trilateral2.SketchForm",toString:$estr}
	,RoundEnd: {_hx_index:8,__enum__:"trilateral2.SketchForm",toString:$estr}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
hxGeomAlgo_PolyTools.exposeEnum(hxGeomAlgo_WindingRule);
hxGeomAlgo_PolyTools.exposeEnum(hxGeomAlgo_ResultType);
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
htmlHelper_webgl_WebGLSetup.posName = "pos";
htmlHelper_webgl_WebGLSetup.colorName = "color";
htmlHelper_webgl_WebGLSetup.textureName = "aTexture";
dice_helpers_ViewGL.largeEnough = 2000000;
htmlHelper_tools_AnimateTimer.counter = 0;
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.EMPTY = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(NaN,NaN);
hxGeomAlgo_PolyTools.point = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
hxGeomAlgo_PolyTools.zero = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(0,0);
hxGeomAlgo_PolyTools.EPSILON = .00000001;
dice_Dice.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
